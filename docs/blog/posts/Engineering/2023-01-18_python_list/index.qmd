---
title: Data Structure (4) Python List
subtitle: Python List
description: |
  Data Structure for Data Science
categories:
  - Engineering
author: Kwangmin Kim
date: 01/17/2023
format: 
  html:
    page-layout: full
draft: False
---

<ul class="nav nav-pills" id="language-tab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" role="tab" aria-controls="Korean" aria-selected="true">Korean</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" role="tab" aria-controls="knitr" aria-selected="false">English</button>
  </li>

<div class="tab-content" id="language-tabcontent">

<div class="tab-pane fade  show active" id="Korean" role="tabpanel" aria-labelledby="Korean-tab">


| Number | Methods          | Time Complexity | Examples              |        Description                                             |
|--------|------------------|-----------------|-----------------------|----------------------------------------------------------------|
| 1      | Indexing         | $O(1)$          | `arr[i]`              | 특정 i th 인덱스의 값 반환                                       | 
| 2      | Storing          | $O(1)$          | `arr[i] = 1`          | 특정 i th 인덱스에 값 (=1) 할당                                  |
| 3      | Append           | $O(1)$          | `arr.append(5)`       | 리스트의 가장 뒤에 데이터 추가                                    |
| 4      | Pop              | $O(1)$          | `arr.pop()`           | 리스트의 가장 뒤에서 원소 꺼내기                                  |
| 5      | Length           | $O(1)$          | `len(arr)`            | 리스트의 길이 얻기                                               |
| 6      | Clear            | $O(1)$          | `arr.clear()`         | 리스트 내 모든 원소 제거하기                                      |
| 7      | Slicing          | $O(b-a)$        | `arr[a:b]`            | 리스트에서 인덱스 a부터 b-1까지의 원소만 꺼내 새 리스트 만들기      |
| 8      | Extend           | $O(len(other))$ | `arr.extend(list2)`   | 기존 리스트, list1에 다른 리스트, list2를 이어 붙이기              |
| 9      | Insertion        | $O(N)$          | `arr.insert(index, x)`| 특정 인덱스에 데이터 x를 삽입하기, 즉 i th index를 뒤로 밀고 추가   | 
| 10     | Delete           | $O(N)$          | `del arr[index]`      | 특정 인덱스의 데이터 삭제하기                                     |
| 11     | Construction     | $O(len(other))$ | `arr = list(other)`   | 다른 자료구조의 원소들을 이용해 리스트로 만들기                     |
| 12     | In               | $O(N)$          | `x in arr`            | 데이터 x가 리스트에 존재하는지 확인                                |
| 13     | Not in           | $O(N)$          | `x not in arr`        | 데이터 x가 리스트에 존재하지 않는지 확인                           |
| 14     | Pop              | $O(N)$          | `arr.pop(index)`      | 특정 인덱스의 데이터를 꺼내기 / 단, 가장 뒤 원소를 꺼내는 경우 O(1) |
| 15     | Remove           | $O(N)$          | `arr.remove(x)`       | 리스트 내에 존재하는 데이터 x를 삭제                               |
| 16     | Copy             | $O(N)$          | `arr.copy()`          | 리스트를 복제                                                    |
| 17     | Min              | $O(N)$          | `min(arr)`            | 리스트 내에 존재하는 가장 작은 원소                                |
| 18     | Max              | $O(N)$          | `max(arr)`            | 리스트 내에 존재하는 가장 큰 원소                                  |
| 19     | Iteration        | $O(N)$          | `for x in arr`        | 리스트 내에 존재하는 모든 원소 순회                                |
| 20     | Multiply         | $O(k*N)$        | `arr * k`             | 리스트를 k번 반복하여 길게 만들기                                  |
| 21     | Sort             | $O(NlogN)$      | `arr.sort()`          | 리스트 내 존재하는 원소를 정렬                                     |
: a list of the list functions in Python {#tbl-letters}

See @tbl-letters.

* 1~6: 파이썬의 list는 동적 배열의 특징이 있다. 시간 복잡도는 모두 $O(1)$ 이다.
  * 3~4: 사실상 stack의 기능과 동일

```{python}
#| code-fold: true

arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(arr[4]) # 인덱싱(indexing)

# 저장(storing)
arr[7] = 10

# 뒤에 붙이기(append)
arr.append(10)
print(arr)

# 뒤에서 꺼내기(pop)
arr.pop()
print(arr)

# 길이(length)
print(len(arr))

# 배열 비우기(clear)
arr.clear()
print(arr)
```

* 7~11 

```{python}
#| code-fold: true

arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
new_arr = arr[2:7] # 슬라이싱(slicing)
print(new_arr)

arr1 = [0, 1, 2, 3, 4]
arr2 = [5, 6, 7, 8, 9]
arr1.extend(arr2) # 확장(extend)
print(arr1)

arr = [0, 1, 2, 3, 4]
arr.insert(3, 7) # 삽입(insertion)
print(arr)

del arr[3] # 삭제(delete)
print(arr)

data = {7, 8, 9}
arr = list(data) # 다른 자료구조로 리스트 만들기
print(arr)
```

* 12~16

```{python}
#| code-fold: true

arr = [0, 1, 2, 3, 4]

print(3 in arr) # 존재 여부(in)
print(7 not in arr) # 비존재 여부(not in)

arr.pop(1) # 인덱스 1에 해당하는 원소 꺼내기(pop)
print(arr)

arr.remove(3) # 리스트의 특정 원소 삭제(remove)
print(arr)

new_arr = arr.copy() # 복제(copy)
print(new_arr)
```

* 17~21

```{python}
#| code-fold: true

arr = [3, 5, 4, 1, 2]

print(min(arr)) # 최소(min)
print(max(arr)) # 최대(max)

for x in arr: # 원소 순회(iteration)
    print(x, end=" ")
print()

print(arr * 2) # 리스트 반복하여 곱하기(multiply)

arr.sort() # 정렬(sorting)
print(arr)
```


</div>

<div class="tab-pane fade" id="English" role="tabpanel" aria-labelledby="English-tab">


</div>