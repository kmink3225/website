---
title: "Data Preparation"
subtitle: "Simulation"
description: ""
author: Kwangmin Kim
date: 2022-12-20
image: images/high_dimensions.jpg
image-alt: "a high dimensional data"
format:
  html:
    toc: true
    number-sections: true
    code-fold: true
    code-summary: "Show the code"
execute:
  warning: false
# ---
# title: "Comparative Study of Dimension Reduction Methods"
# subtitle: "Statistics and Machine Learning"
# description: "Due to security concerns, it is difficult to display the data used in this project. Therefore, I will generate fake data to reproduce and demonstrate a rough analysis pipeline."
# author: Kwangmin Kim
# date: 2022-12-20
# image: images/high_dimensions.jpg
# image-alt: "a high dimensional data"
# format:
#   html:
#     code-fold: true
#     code-summary: "Show the code"
# execute:
#   warning: false
# ---  
---


<ul class="nav nav-pills" id="language-tab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" role="tab" aria-controls="Korean" aria-selected="true">Korean</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" role="tab" aria-controls="knitr" aria-selected="false">English</button>
  </li>

<div class="tab-content" id="language-tabcontent">

<div class="tab-pane fade  show active" id="Korean" role="tabpanel" aria-labelledby="Korean-tab">



</div>

<div class="tab-pane fade" id="English" role="tabpanel" aria-labelledby="English-tab">



## Data Preparation

### Package Loading and Option Settings

```{r}
#| message: false
#| code-fold: true
#| warning: false

library(tidyverse)
library(tidymodels)
library(glmnet)
library(MASS)
library(mixOmics)
set.seed(20221213) 
knitr::opts_chunk$set(message=FALSE,warning=FALSE)
```

### Data Simulation

```{r}
#| eval: false
#| message: false
#| code-fold: true
#| warning: false


# the number of samples
sample_size <- 1000
# the number of predictors
predictor_size <- 10000
group_size <- 10
# the number of predictors truly associated with a response variable
significant_predictors <- floor(predictor_size*sample((50:200)/1000,1)) 

## set the predictors associated with an outcome
### the number of predictors positively associated with an outcome
### the number of predictors negatively associated with an outcome
positively_associated_predictors<-floor(significant_predictors*0.4) 
negatively_associated_predictors<-significant_predictors-positively_associated_predictors 

## set correlated predictors within each group
### randomly sampling proportions of 10 correlated predictor groups 
### to become their sum equal to 1
proportion_list<-sample(seq(1,1+2*(100-group_size)/group_size,
                            by=2*(100-group_size)/(group_size*(group_size-1)))/100,
                        group_size,replace=FALSE)%>%round(3) 
names(proportion_list)<-paste0("group",1:length(proportion_list))
### initialize a matrix with a size as sample_size by predictor_size
predictor_matrix <- matrix(0, ncol = predictor_size, nrow = sample_size)
### initialize a data frame and assign meta information used to generate simulated data
meta_data<-
    data.frame(group_name=c(names(proportion_list)),
               proportion=proportion_list)%>%
    mutate(group_n=(predictor_size*proportion_list)%>%round(0), # the within-group number of predictors
           first_index=c(1,cumsum(group_n[-length(proportion_list)])+1), # the 1st index of predictors in each group
           last_index=cumsum(group_n), # the last index of predictors in each group
           group_correlation=sample((0:700)/1000,length(proportion_list),replace=TRUE), # correlation among the within-group predictors
           group_effect=sample((-2:2)/10,length(proportion_list),replace=TRUE)); # effect of each group on an outcome variable


data<-matrix(rnorm(sample_size*predictor_size,mean=0,sd=0.01), 
             nrow = sample_size, ncol = predictor_size)
covariance_matrix<-matrix(rnorm(predictor_size*predictor_size,0.15,0.05),
                          nrow=predictor_size, ncol=predictor_size)
beta_coefficients <- rnorm(predictor_size,0,0.05)

for (i in 1:nrow(meta_data)) {
    
    group_range <- meta_data[i, "first_index"]:meta_data[i, "last_index"]
    for (j in group_range){
        for(k in group_range){
        covariance_matrix[j, k] <- meta_data[i, "group_correlation"]
        }
    }
    #covariance_matrix[group_range, group_range]+meta_data[i, "group_correlation"]    
    diag(covariance_matrix) <- 1
    data[, group_range] <- 
        mvrnorm(n = sample_size, 
                mu = rep(0,meta_data[i,"group_n"]),
                Sigma = covariance_matrix[group_range, group_range])
    data=as.data.frame(data)
    beta_coefficients[meta_data[i, "first_index"]:meta_data[i, "last_index"]] <-
        beta_coefficients[meta_data[i, "first_index"]:meta_data[i, "last_index"]]+
        meta_data[i,"group_effect"]
    predictor_names<-paste0(meta_data[i,"group_name"],"_",1:meta_data[i,"group_n"])
    names(beta_coefficients)[meta_data[i, "first_index"]:meta_data[i, "last_index"]] <- predictor_names
    names(data)[meta_data[i, "first_index"]:meta_data[i, "last_index"]]<-predictor_names
        
}
score=as.matrix(data)%*%beta_coefficients # score of each sample
# logistic function to get a probability, intercept = 0, 
# to decrease prevalence, set p-0.2, negative probabilities into 0
probabilities <- ((1/(1+exp(-(0+score))))-rnorm(sample_size,m=0.2,sd=0.05))%>%
    ifelse(.>1,1,.)%>%abs()
response <- rbinom(sample_size, 1, probabilities) 

age_distribution=rchisq(sample_size,df=9)
sex_distribution=sample(c(0,1),sample_size,replace=TRUE,prob = c(0.45,0.55))
country_distribution=sample(c(0:3),sample_size,replace=TRUE,prob = c(0.3,0.2,0.2,0.3))
treatment_distribution=sample(c(0:2),sample_size,replace=TRUE,prob = c(0.7,0.2,0.1))
genotype_distribution=sample(c(0:5),sample_size,replace=TRUE,
                             prob = c(0.08,0.15,0.086,0.3,0.25,0.134)) #just random numbers
phenotype_data<-
    data.frame(
        id=1:sample_size,
        outcome=response,
        probabilities=probabilities,
        age=ifelse(probabilities<0.15,age_distribution-4,
                   ifelse(probabilities<0.3,age_distribution-2,
                          ifelse(probabilities>0.5,age_distribution+3,
                                 ifelse(probabilities>0.7,age_distribution+6,age_distribution)))))%>%
    mutate(age=sapply(age,
                   function(x)(x-min(age))/(max(age)-min(age))*(105-65)+65)%>%round(0),
           sex=sex_distribution,
           country=country_distribution,
           treatment=treatment_distribution,
           treatment=ifelse(probabilities>0.7,1,
                            ifelse(probabilities>0.8,2,treatment)),
           genotype=genotype_distribution,
           genotype=ifelse(probabilities<0.1,0,
                           ifelse(probabilities<0.15,1,
                                  ifelse(probabilities>0.7,3,
                                         ifelse(probabilities>0.8,4,
                                                ifelse(probabilities>0.9,5,genotype))))),
           age=ifelse(outcome==0&genotype==0,age+10,
                      ifelse(outcome==0&genotype==1,age+5,
                             ifelse(genotype==4,age-3,
                                    ifelse(genotype==5,age-2,age)))),
           genotype=ifelse(outcome==1&genotype==3&age>83&age<92,4,genotype),
           genotype=ifelse(outcome==1&genotype==4&age>87,5,genotype))


all_data=inner_join(phenotype_data,data%>%mutate(id=1:n()),by="id")

#write_rds(all_data,"./docs/projects/data/llfs_simulated_data.rds")
```

### Load Data

```{r}
#| code-fold: true
#| message: false
#| warning: false
 
 simulated_data=read_rds("C:/Users/kmkim/Desktop/my_project/website/docs/projects/data/llfs_simulated_data.rds")%>%
     dplyr::select(-1,-probabilities)
 all_data=simulated_data%>%
 mutate(
      outcome=ifelse(outcome==0,"negative","positive"),
      outcome=factor(outcome,levels=c("negative","positive")),
      sex=ifelse(sex==0,"man","woman"),
      sex=factor(sex,levels=c("man","woman")),
      country=ifelse(country==0,"center_a",ifelse(country==1,"center_b",ifelse(country==2,"center_c","center_d"))),
      country=factor(country,levels=c("center_a","center_b","center_c","center_d")),
      treatment=ifelse(treatment==0,"trmnt1",ifelse(treatment==1,"trmnt2","trmnt3")),
      treatment=factor(treatment,levels=c("trmnt1","trmnt2","trmnt3")),
      genotype=ifelse(genotype==0,"e2/e2",
      ifelse(genotype==1,"e2/e3",
      ifelse(genotype==2,"e2/e4",
      ifelse(genotype==3,"e3/e3",
      ifelse(genotype==4,"e3/e4","e4/e4"))))),
      genotype=factor(genotype,levels=c("e2/e2","e2/e3","e2/e4","e3/e3","e3/e4","e4/e4"))
      )
 names(all_data)[7:ncol(all_data)]<-paste0("meta",1:10000)
```

## Data Description

This data include `r dim(all_data)[1]` samples and `r dim(all_data)[2]` variables:

* `r names(all_data)[1]`: a disease status (`r unique(all_data[,"outcome"])`), `r unique(all_data[,"outcome"])[1]` is an affected status, `r unique(all_data[,"outcome"])[2]` is an unaffected status, and the reference group is `r unique(all_data[,"outcome"])[2]`.
* `r names(all_data)[2]`: an age 
* `r names(all_data)[3]`: a sex status (`r unique(all_data[,"sex"])`) and the reference group is `r unique(all_data[,"sex"])[2]`.
* `r names(all_data)[4]`: a country where data were collected (`r unique(all_data[,"country"])`) and the reference group is `r unique(all_data[,"country"])[3]`.
* `r names(all_data)[5]`: a treatment for the disease (`r unique(all_data[,"treatment"])`) and the reference group is `r unique(all_data[,"treatment"])[2]`.
* `r names(all_data)[6]`: a genotype of APOE.
  * the apolipoprotein $\epsilon$ (APOE) is a protein produced in the metabolic pathway of fats in mammals, a genotype of which seems to be related to Alzheimer's disease (AD). APOE is polymorphic and has three major alleles, $\epsilon 2$ (e2), $\epsilon 3$(e3), and $\epsilon 4$ (e4). The statistics of the polymorphism are 8.4% for e2, 77.9% for e3, and 13.7% for e4 in worldwide allel frequency, respectively. It is known that the e2, e3, and e4 allels are associated with the protective factor, the neutral one, and the risk one with regard to AD. However, this finding has not been replicated in a large population. Therefore, it is known that we do not know their true associations with AD in the true population. [(from Wiki)](https://en.wikipedia.org/wiki/Apolipoprotein_E) 
  * There are 6 combinations of the genotypes: 
    * e2/e2
    * e2/e3
    * e2/e4
    * e3/e3 (reference group)
    * e3/e4
    * e4/e4
* `r names(all_data)[7]` ~ `r names(all_data)[ncol(all_data)]`: a list of metabolites that were blood-sampled from the APOE carriers.

</div>