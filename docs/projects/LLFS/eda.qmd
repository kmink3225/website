---
title: "EDA"
subtitle: "Explorative Data Analysis"
description: "Both EDA and Data Mining are used"
author: Kwangmin Kim
date: 2023-01-03
format: 
  html:
    page-layout: full
---

<ul class="nav nav-pills" id="language-tab" role="tablist">

<li class="nav-item" role="presentation">

<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" role="tab" aria-controls="Korean" aria-selected="true">

Korean

</button>

</li>

<li class="nav-item" role="presentation">

<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" role="tab" aria-controls="knitr" aria-selected="false">

English

</button>

</li>

<div class="tab-content" id="language-tabcontent">

::: {#Korean .tab-pane .fade .show .active role="tabpanel" aria-labelledby="Korean-tab"}

## 준비중

please, read the English section first. 


:::

::: {#English .tab-pane .fade role="tabpanel" aria-labelledby="English-tab"}
```{r}
#| echo: false
#| message: false
#| code-fold: true
#| warning: false

library(tidyverse)
library(tidymodels)
library(glmnet)
library(MASS)
library(ggpubr)
library(mixOmics)
set.seed(20230103) 
knitr::opts_chunk$set(message=FALSE,warning=FALSE)
```

```{r}
#| echo: false
#| code-fold: true
#| message: false
#| warning: false
datapath<-"C:/Users/kmkim/Desktop/my_project/website/docs/projects/data/llfs_simulated_data.rds"
#datapath<-"C:/Users/kkm/Desktop/projects/R/website/docs/projects/data/llfs_simulated_data.rds"
 simulated_data<-read_rds(datapath)%>%
     dplyr::select(-1,-probabilities)
 all_data<-simulated_data%>%
 mutate(
      outcome=ifelse(outcome==0,"negative","positive"),
      outcome=factor(outcome,levels=c("negative","positive")),
      sex=ifelse(sex==0,"man","woman"),
      sex=factor(sex,levels=c("man","woman")),
      country=ifelse(country==0,"center_a",ifelse(country==1,"center_b",ifelse(country==2,"center_c","center_d"))),
      country=factor(country,levels=c("center_a","center_b","center_c","center_d")),
      treatment=ifelse(treatment==0,"trmnt1",ifelse(treatment==1,"trmnt2","trmnt3")),
      treatment=factor(treatment,levels=c("trmnt1","trmnt2","trmnt3")),
      genotype=ifelse(genotype==0,"e2/e2",
      ifelse(genotype==1,"e2/e3",
      ifelse(genotype==2,"e2/e4",
      ifelse(genotype==3,"e3/e3",
      ifelse(genotype==4,"e3/e4","e4/e4"))))),
      genotype=factor(genotype,levels=c("e2/e2","e2/e3","e2/e4","e3/e3","e3/e4","e4/e4"))
      )
 names(all_data)[7:ncol(all_data)]<-paste0("meta",1:10000)
```

## Univariable Analysis

mean, sd, normality check with p value

```{r}
#| echo: false
#| code-fold: true
#| message: false
#| warning: false
test<-apply(all_data[,unlist(lapply(all_data, is.numeric))],2,function(x)shapiro.test(x))

```

## Bivariable Analysis

### Age vs Catogrical Variables

```{r}
#| code-fold: true
#| message: false
#| warning: false
group_variable="country"
summary_variable="age"

color_function<-function(summary_data){
return(
    if(nrow(summary_data)==2){
        c("darkblue","darkred")
    }else if(nrow(summary_data)==3){
        c("darkblue","darkred","yellow4")
    }else if(nrow(summary_data)==4){
        c("darkblue","darkred","yellow4","blueviolet")
    }else if(nrow(summary_data)==5){
        c("darkblue","darkred","yellow4","blueviolet","darkorange")
    }else{
        c("darkblue","darkred","yellow4","blueviolet","darkorange","darkgreen")
    }
    )
}

getNumericSummary=function(data=all_data,group_variable,summary_variable,set_color=color_function){
    # table
    temp<-data %>% 
    group_by(get(group_variable)) %>% 
    mutate(count=n())%>%
    summarise_at(vars(summary_variable,count),
                 list(mean=mean,
                 sd=sd,
                 min=min,
                 Q1=~quantile(., probs = 0.25),
                 median=median, 
                 Q3=~quantile(., probs = 0.75),
                 max=max))%>%
                 as.data.frame()%>%
                 rename(
                 n=count_mean)%>%
                 dplyr::select(-contains('count'))%>%
                 as.data.frame()
    names(temp)<-c("group",
    sapply(names(temp)[-1],function(x)str_replace(x,paste0(summary_variable,"_"),"")))
    temp<-temp%>%
    mutate(
        variable=group_variable,
        summary=summary_variable,
        mean=mean%>%round(2),
        sd=sd%>%round(2),
        min=min%>%round(2),
        Q1=Q1%>%round(2),
        Q4=Q3%>%round(2),
        max=max%>%round(2),
        IQR_min=Q1-(Q3-Q1)*1.5%>%round(2),
    IQR_max=Q3+(Q3-Q1)*1.5%>%round(2),
    proportion=paste0(round(n/nrow(all_data)*100,2),"%"))%>%
    dplyr::select(variable,group,summary,n,proportion,mean,sd,min,IQR_min,Q1,median,Q3,IQR_max,max)

    # plot
    temp2=temp
    names(temp2)[2]=group_variable
    plot<-
    data%>%
    dplyr::select(group_variable,summary_variable)%>%
    inner_join(.,temp2,by=group_variable)%>%
    ggplot(aes(x=age,fill=get(group_variable),color=get(group_variable)))+
    geom_histogram(aes(y=..density..),binwidth=1,alpha=0.5, position="identity")+
    geom_vline(aes(xintercept=mean,color=get(group_variable)), linetype="dashed", size=1.5) + 
    geom_density(aes(y=..density..),alpha=0.3) +
    scale_color_manual(values=set_color(temp2))+
    scale_fill_manual(values=set_color(temp2))+
    theme_bw()+
    theme(legend.position = c(.95, .95),
    legend.justification = c("right", "top"),
    legend.margin = margin(6, 6, 6, 6),
    legend.text = element_text(size = 10))+
    guides(fill=guide_legend(title=group_variable),
    color=FALSE)+
    geom_text(aes(label=round(mean,1),y=0,x=mean),
                vjust=-1,col='yellow',size=5)+
    ggtitle(paste0("Histogram & Density, ", summary_variable, " Grouped by ", group_variable))+
        labs(x=summary_variable, y = "Density")

    result<-list(temp,plot)
    return(result)
}

ad_age_summary=getNumericSummary(data=all_data,group_variable="outcome",summary_variable="age")[[1]]
sex_age_summary=getNumericSummary(data=all_data,group_variable="sex",summary_variable="age")[[1]]
country_age_summary=getNumericSummary(data=all_data,group_variable="country",summary_variable="age")[[1]]
treatment_age_summary=getNumericSummary(data=all_data,group_variable="treatment",summary_variable="age")[[1]]
genotype_age_summary=getNumericSummary(data=all_data,group_variable="genotype",summary_variable="age")[[1]]
age_summary=rbind(
    ad_age_summary,
    sex_age_summary,
    country_age_summary,
    treatment_age_summary,
    genotype_age_summary)
```

Age is known as a strong risk factor of AD or dementia. Human nerve system gets damaged as people are aged and the nerve fibrosis symptoms progress gradually (some reference, to be added after figuring out how to add bibliography in quarto). For this reason, we need to look into how the sample data are distributed in terms of age.

```{r}
#| code-fold: true
#| message: false
#| warning: false
age_summary%>%knitr::kable()
```

The table above shows the summary statistics of age grouped by the affected status, AD and non AD. The difference of age between the two groups are about `r round(age_summary%>%filter(group=="positive")%>%dplyr::select(mean)- age_summary%>%filter(group=="negative")%>%dplyr::select(mean),2)`, but their standard deviations are `r round(age_summary%>%filter(group=="positive")%>%dplyr::select(sd),2)` and `r round(age_summary%>%filter(group=="negative")%>%dplyr::select(sd),2)`. Thus, it is hard to say their age in average differ in the affected status because the age variations of the two groups are overlapped. This research has two conflicting characteristics at the population level. First, the participants are the elderly whose age in average is `r mean(all_data$age)%>%round(2)`, which indicates they are likely to develop dementia, an aging disease. Second, the data were collected from the longevity village where people live long and healthy lives and it is expected that where will be some protective factors against dementia. These two conflicting traits may have contributed to this unclear difference.

The glaring difference of age is also shown below. As you can see, the people with a negative status a bit younger than those with a positive one.
```{r}
#| code-fold: true
#| message: false
#| warning: false
#| fig-width: 10
#| fig-height: 15
plot<- ggarrange(
    getNumericSummary(data=all_data,group_variable="outcome",summary_variable="age")[[2]],
    getNumericSummary(data=all_data,group_variable="sex",summary_variable="age")[[2]],
    getNumericSummary(data=all_data,group_variable="country",summary_variable="age")[[2]],
    getNumericSummary(data=all_data,group_variable="treatment",summary_variable="age")[[2]],
    getNumericSummary(data=all_data,group_variable="genotype",summary_variable="age")[[2]],
    ncol=2, nrow=3,legend="bottom")
plot

```


### Metabolites vs Categorical Variable

#### Metabolites vs AD
t-test

```{r}
#F-test to test for homogeneity in variances
#| echo: false
#| eval: false
var.test
```

#### Metabolites vs Genotypes
One way Anova

#### Metabolites vs treatment
One way Anova

### Metabolites vs Genotypes

## AD vs Categorical Variable

### AD vs Sex

### AD vs Genotypes

Chisquare test

### AD vs Treatment

chisquare test

```{r}
#| echo: false
#| eval: false

for (i in 1:p) {
 form = paste("lm(", paste0(var[i], collapse="+"), "~ . , data=as.data.frame(data) ) ")
 fit = eval(parse(text=form)); fit
 lm_result[i] = list(summary(fit))
}

```

## Multivariate Analysis

##

### PCA (Principal Component Analysis)

```{r}
#| echo: false
#| eval: false


X<-all_data[,-c(1:6)]
result_pca<-mixOmics::pca(X)

plotIndiv(result_pca)  # plot the samples
plotVar(result_pca)    # plot the variables

# K means
km_fit = kmeans(all_data[,-c(1:6)],centers = 2,iter.max = 300 )

# "K-Means Clustering- Confusion matrix")
table(all_data[,1],km_fit$cluster)

mat_avgss = matrix(nrow = 20, ncol = 2)

# Average within the cluster sum of square
print(paste("Avg. Within sum of squares"))
for (i in (1:20)){
  km_fit = kmeans(all_data[,-c(1:6)],centers = i,iter.max = 300 )
  mean_km = mean(km_fit$withinss)
  print(paste("K-Value",i,",Avg.within sum of squares",round(mean_km,2)))
  mat_avgss[i,1] = i
  mat_avgss[i,2] = mean_km
}

plot(mat_avgss[,1],mat_avgss[,2],type = 'o',xlab = "K_Value",ylab = "Avg. within sum of square")
title("Avg. within sum of squares vs. K-value")


mat_varexp = matrix(nrow = 20, ncol = 2)
# Percentage of Variance explained
print(paste("Percent. variance explained"))
for (i in (1:20)){
  km_fit = kmeans(all_data[,-c(1:6)],centers = i,iter.max = 300 )
  var_exp = km_fit$betweenss/km_fit$totss
  print(paste("K-Value",i,",Percent var explained",round(var_exp,4)))
  mat_varexp[i,1]=i
  mat_varexp[i,2]=var_exp
}

plot(mat_varexp[,1],mat_varexp[,2],type = 'o',xlab = "K_Value",ylab = "Percent Var explained")
title("Avg. within sum of squares vs. K-value")


# PCA


x_data = all_data[,-c(1:6)]
y_data =all_data[,1]

# Normalizing the data
normalize <- function(x) {return((x - min(x)) / (max(x) - min(x)))}
data_norm <- as.data.frame(lapply(x_data, normalize))
data_norm <- replace(data_norm, is.na(data_norm), 0.0)


# Extracting Principal Components
pr_out =prcomp(data_norm)
pr_components_all = pr_out$x
str(pr_out)
dim(pr_out$x)
# 2- Dimensional PCA
K_prcomps = 2

pr_components = pr_components_all[,1:K_prcomps]

loadings <- as.data.frame(pr_out$rotation)


ggplot(data=all_data, aes(x=meta1, y=meta2)) +
geom_point(alpha=.3) +
stat_ellipse(type='norm', level=.99) +
geom_abline(intercept = 0, slope = loadings[2,1]/loadings[1,1]) +
geom_abline(intercept = 0, slope = loadings[2,2]/loadings[1,2])

pr_components_df = data.frame(pr_components)
pr_components_df = cbind(pr_components_df,digits_data$target)
names(pr_components_df)[K_prcomps+1] = "target"

out <- split( pr_components_df , f = pr_components_df$target )
zero_df = out$`0`;one_df = out$`1`;two_df = out$`2`; three_df = out$`3`; four_df = out$`4`
five_df = out$`5`;six_df = out$`6`;seven_df = out$`7`;eight_df = out$`8`;nine_df = out$`9`



# Plotting 2-dimensional PCA
ggplot(pr_components_df, aes(x = PC1, y = PC2, color = factor(target,labels = c("zero","one","two",
        "three","four","five","six","seven","eight","nine")))) + 
        geom_point()+ggtitle("2-D PCA on Digits Data") +
        labs(color = "Digtis")



# 3- Dimensional PCA
# Plotting 3-dimensional PCA
K_prcomps = 3

pr_components = pr_components_all[,1:K_prcomps]
pr_components_df = data.frame(pr_components)
pr_components_df = cbind(pr_components_df,digits_data$target)
names(pr_components_df)[K_prcomps+1] = "target"

pr_components_df$target = as.factor(pr_components_df$target)

out <- split( pr_components_df , f = pr_components_df$target )
zero_df = out$`0`;one_df = out$`1`;two_df = out$`2`; three_df = out$`3`; four_df = out$`4`
five_df = out$`5`;six_df = out$`6`;seven_df = out$`7`;eight_df = out$`8`;nine_df = out$`9`

library(scatterplot3d)

colors <- c("darkred", "darkseagreen4", "deeppink4", "greenyellow", "orange"
            , "navyblue", "red", "tan3", "steelblue1", "slateblue")
colors <- colors[as.numeric(pr_components_df$target)]
s3d = scatterplot3d(pr_components_df[,1:3], pch = 16, color=colors,
              xlab = "PC1",ylab = "PC2",zlab = "PC3",col.grid="lightblue",main = "3-D PCA on Digits Data")
legend(s3d$xyz.convert(3.1, 0.1, -3.5), pch = 16, yjust=0,
       legend = levels(pr_components_df$target),col =colors,cex = 1.1,xjust = 0)
       
# Chosing number of Principal Components
pr_var =pr_out$sdev ^2
pr_totvar = pr_var/sum(pr_var)
plot(cumsum(pr_totvar), xlab="Principal Component", ylab ="Cumilative Prop. of Var.",
     ylim=c(0,1),type="b",main = "PCAs vs. Cum prop of Var Explained")



#SVD 
library(svd)

digits_data = read.csv("digitsdata.csv")

remove_cols = c("target")
x_data = digits_data[,!(names(digits_data) %in% remove_cols)]
y_data = digits_data[,c("target")]



sv2 <- svd(x_data,nu=15)

sv_check = sv2$d

# Computing the square of the singular values, which can be thought of as the vector of matrix energy
# in order to pick top singular values which preserve at least 80% of variance explained
energy <- sv2$d ^ 2
tot_varexp = data.frame(cumsum(energy) / sum(energy))

names(tot_varexp) = "cum_var_explained"
tot_varexp$K_value = 1:nrow(tot_varexp)

plot(tot_varexp[,2],tot_varexp[,1],type = 'o',xlab = "K_Value",ylab = "Prop. of Var Explained")
title("SVD - Prop. of Var explained with K-value")


```

```{r}
#| echo: false
#| eval: false

for (i in 1:p) {
 form = paste("lm(", paste0(var[i], collapse="+"), "~ . , data=as.data.frame(data) ) ")
 fit = eval(parse(text=form)); fit
 lm_result[i] = list(summary(fit))
}

```
:::
