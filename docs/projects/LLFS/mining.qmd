---
title: "Data Mining"
subtitle: "Unsupervised Learning"
description: "Data mining was performed to observe patterns of data in macroscopic observations or in the level of large data."
author: Kwangmin Kim
date: 2023-02-25
execute:
  warning: false
  message: false
  freeze: true
format: 
  html:
    toc: true
    number-sections: true
    page-layout: full
    code-fold: true
    fig-width: 8
    fig-height: 8
---



<ul class="nav nav-pills" id="language-tab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" role="tab" aria-controls="Korean" aria-selected="true">Korean</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" role="tab" aria-controls="knitr" aria-selected="false">English</button>
  </li>

<div class="tab-content" id="language-tabcontent">

<div class="tab-pane fade  show active" id="Korean" role="tabpanel" aria-labelledby="Korean-tab">

::: {#Korean .tab-pane .fade .show .active role="tabpanel" aria-labelledby="Korean-tab"}


```{r}
#| echo: false

# clear objects
rm(list = ls())

# setting datapath
if (grepl("kkm", getwd())) {
    datapath <- "C:/Users/kkm/Desktop/projects/website/docs/"
} else {
    datapath <- "C:/Users/kmkim/Desktop/projects/website/docs/"
}

# load libraries
if (!require(janitor)) install.packages("janitor")
if (!require(tidyverse)) install.packages("tidyverse")
if (!require(tidymodels)) install.packages("tidymodels")
if (!require(glmnet)) install.packages("glmnet")
if (!require(MASS)) install.packages("MASS")
if (!require(ggpubr)) install.packages("ggpubr")
if (!require(car)) install.packages("car")
if (!require(caret)) install.packages("caret")
if (!require(plotly)) install.packages("plotly")
if (!require(mixOmics)) install.packages("mixOmics")
# if(!require(reticulate)) install.packages("reticulate")
library(janitor)
library(tidyverse)
library(tidymodels)
library(glmnet)
library(MASS)
library(ggpubr)
library(car)
library(caret)
library(mixOmics)
library(plotly)
# library(reticulate)

# set a seed number
set.seed(20230223)

# load functions
source(paste0(datapath, "functions/R/functions.r"))

knitr::opts_chunk$set(message = FALSE, warning = FALSE)

# load simulation data
simulated_data <- read_rds(paste0(datapath, "data/llfs_simulated_data.rds"))
significant_metabolites <- read_rds(paste0(datapath, "data/llfs_fake_significant_metabolites.rds"))
# simple data pre-processing
all_data <-
    simulated_data %>%
    mutate(
        outcome = factor(outcome, levels = c("negative", "positive")),
        sex = ifelse(sex == 0, "man", "woman"),
        sex = factor(sex, levels = c("man", "woman")),
        genotype = factor(genotype, levels = c("e3", "e2", "e4"))
    )

# rename metabolite variables
predictor_size <- 1000
names(all_data)[6:ncol(all_data)] <- paste0("meta", 1:predictor_size)


```

## Data Mining

### PCA (Principal Component Analysis)

```{r}
metabolite_data <- all_data[, -c(1:5)]
outcome_data <- all_data[, 2]

# normalize the metaoblites
normalized_metabolite_data <-
    as.data.frame(lapply(metabolite_data, function(x) scale_function(vector = x, method = "min-max")))
normalized_significant_metabolite_data<-
    normalized_metabolite_data%>%
    dplyr::select(all_of(significant_metabolites))

# extract the latent variables (PCs: Principal Components)
pc_metabolites <-
    prcomp(normalized_metabolite_data)
pc_significant_metabolites <-
    prcomp(normalized_significant_metabolite_data)

# calculate scores
scores <- 
    as.data.frame(pc_metabolites$x) %>%
    janitor::clean_names() %>%
    mutate(row_names = 1:n())
significant_scores <- 
    as.data.frame(pc_significant_metabolites$x) %>%
    janitor::clean_names() %>%
    mutate(row_names = 1:n())

temp <-
    as.data.frame(pc_metabolites$rotation) %>%
    janitor::clean_names()
loadings <- temp %>%
    mutate(
        metabolites = rownames(.),
        arrow_size_normalization = min(
            (max(scores[, "pc1"]) - min(scores[, "pc1"]) /
                (max(temp[, "pc1"]) - min(temp[, "pc1"]))),
            (max(scores[, "pc2"]) - min(scores[, "pc2"]) /
                (max(temp[, "pc2"]) - min(temp[, "pc2"]))),
            (max(scores[, "pc3"]) - min(scores[, "pc3"]) /
                (max(temp[, "pc3"]) - min(temp[, "pc3"])))
        ),
        arrow_pc1 = arrow_size_normalization * pc1,
        arrow_pc2 = arrow_size_normalization * pc2,
        arrow_pc3 = arrow_size_normalization * pc3
    )

temp <-
    as.data.frame(pc_significant_metabolites$rotation) %>%
    janitor::clean_names()
significant_loadings <- temp %>%
    mutate(
        metabolites = rownames(.),
        arrow_size_normalization = min(
            (max(scores[, "pc1"]) - min(scores[, "pc1"]) /
                (max(temp[, "pc1"]) - min(temp[, "pc1"]))),
            (max(scores[, "pc2"]) - min(scores[, "pc2"]) /
                (max(temp[, "pc2"]) - min(temp[, "pc2"]))),
            (max(scores[, "pc3"]) - min(scores[, "pc3"]) /
                (max(temp[, "pc3"]) - min(temp[, "pc3"])))
        ),
        arrow_pc1 = arrow_size_normalization * pc1,
        arrow_pc2 = arrow_size_normalization * pc2,
        arrow_pc3 = arrow_size_normalization * pc3
    )    
# arrow_size_normalization is a normalization factor that
# ensures the variable loading arrows are scaled appropriately relative to the data points.
# The min() function to find the smallest ratio between the range of the data points and
# the range of the variable loadings along each principal component axis (pc1, pc2, and pc3).
# The reason why I select the first 3 components is that
# '3' is the maximum dimension that can visualize the PCA results in 3d.

outcome_scores <-
    scores %>%
    mutate(
        outcome = outcome_data,
        row_names = 1:n()
    )
outcome_significant_scores <-
    significant_scores %>%
    mutate(
        outcome = outcome_data,
        row_names = 1:n()
    )


# total variance
total_variance <-
    data.frame(
        pc = 1:length(pc_metabolites$sdev),
        pc_variance_proportion=summary(pc_metabolites)[['importance']]['Proportion of Variance',],
        cumulative_proportion=summary(pc_metabolites)[['importance']]['Cumulative Proportion',]*100
    )
total_variance_significance <-
    data.frame(
        pc = 1:length(pc_significant_metabolites$sdev),
        pc_variance_proportion=summary(pc_significant_metabolites)[['importance']]['Proportion of Variance',],
        cumulative_proportion=summary(pc_significant_metabolites)[['importance']]['Cumulative Proportion',]*100
    )

scree_plot<-function(indata){
    scree_plot1<-ggplot(
        data = indata,
        aes(x = pc, y = pc_variance_proportion, group = 1)) +
        geom_point() +
        geom_line() +
        labs(title='',subtitle = paste0("Scree Plot, Total Variance(", 
                            round(tail(indata,1)['cumulative_proportion'],3) ,
                            "%)Explained by ", nrow(indata), " PCs")) +
        ylab("Total Variance Explained") +
        xlab("Principal Components")
    scree_plot2<-ggplot(
        data = indata%>%filter(pc<13),
        aes(x = pc, y = pc_variance_proportion, group = 1)) +
        geom_point() +
        geom_line() +
        labs(title='',subtitle = paste0("Scree Plot, Part of Variance(", 
                            round(tail(indata%>%filter(pc<13),1)['cumulative_proportion'],3) ,
                            "%)Explained by ", indata%>%filter(pc<13)%>%nrow ," PCs")) +
        ylab("Total Variance Explained") +
        xlab("Principal Components")    
    return(ggarrange(scree_plot1,scree_plot2,nrow=1))
}

ggarrange(scree_plot(total_variance),scree_plot(total_variance_significance),
            labels=c(paste0('All ',ncol(metabolite_data),' Metabolites'),
                    paste0(length(significant_metabolites),' Significant Metabolites')),nrow=2)


# 2D PCA Scatter Plots with PC1 and PC2

scatter_plot<-function(in_data){
   p<- ggplot(data = in_data,
    aes(x = pc1, y = pc2, color = outcome)) +
    geom_text(alpha = .5, size = 3, aes(label = row_names)) +
    stat_ellipse(type = "norm", level = .99) +
    geom_hline(aes(yintercept = 0), alpha = 0.5, size = .1) +
    geom_vline(aes(xintercept = 0), alpha = 0.5, size = .1) +
    scale_color_manual(values = color_function(length(unique(in_data$outcome)))) +
    labs(title = "2D Scatter Plot of the First 2 PCs Grouped by AD status",
    subtitle=paste0(ncol(in_data)-2,' Metabolites'))
    return(p)}

ggarrange(scatter_plot(outcome_scores),
    scatter_plot(outcome_significant_scores),nrow=2)


# biplot
bi_plot<-function(in_data){
    p<-
        ggplot(data = in_data, aes(x = pc1, y = pc2, color = outcome)) +
        geom_text(alpha = .75, size = 3, aes(label = row_names)) +
        geom_hline(aes(yintercept = 0), alpha = 0.5, size = .1) +
        geom_vline(aes(xintercept = 0), alpha = 0.5, size = .1) +
        coord_equal() +
        scale_color_manual(values = color_function(length(unique(in_data$outcome)))) +
        stat_ellipse(type = "norm", level = .99) +
        geom_text(
            data = loadings, aes(x = arrow_pc1, y = arrow_pc2, label = metabolites),
            alpha = 0.5, size = 5, vjust = 1, color = "red") +
        geom_segment(
            data = loadings, aes(x = 0, y = 0, xend = arrow_pc1, yend = arrow_pc2),
            arrow = arrow(length = unit(0.5, "cm")), alpha = 0.5, color = "red") +
        labs(title = "Biplot, the Effect of Metabolites on Samples with Disease Status",
        subtitle=paste0(ncol(in_data)-2,' Metabolites')) +
        ylab("PC2") + xlab("PC1")
    return(p)
}
ggarrange(bi_plot(outcome_scores),bi_plot(outcome_significant_scores),nrow=2)



plot_ly(data=outcome_scores,
    x = ~pc1, y = ~pc2, z = ~pc3, 
    type = "scatter3d", mode = "markers", color = ~ outcome_scores$outcome,
    colors = color_function(2),
    size = 2) %>%
    layout(
        title = "Effect of 500 Metabolites on Samples with Disease Status in 3d",
        scene = list(bgcolor = "#e5ecf6",
                     xaxis = list(title='PC1'),
                     yaxis = list(title = "PC2"),
                     zaxis = list(title = "PC3")),
        legend = list(title = list(text='Disease(AD) Status'))
    )

plot_ly(data=outcome_significant_scores,
    x = ~pc1, y = ~pc2, z = ~pc3, 
    type = "scatter3d", mode = "markers", color = ~ outcome_scores$outcome,
    colors = color_function(2),
    size = 2) %>%
    layout(
        title = "Effect of 201 Metabolites on Samples with Disease Status in 3d",
        scene = list(bgcolor = "#e5ecf6",
                     xaxis = list(title='PC1'),
                     yaxis = list(title = "PC2"),
                     zaxis = list(title = "PC3")),
        legend = list(title = list(text='Disease(AD) Status'))
    )

```

### K-means Clustering

```{r}

# K means
km_clustering <- kmeans(normalized_metabolite_data, centers = 2, iter.max = 300)
km_significant_clustering <- kmeans(normalized_significant_metabolite_data, centers = 2, iter.max = 300)

confusionMatrix(table(all_data[,2],ifelse(km_clustering$cluster==1,'negative','positive')))
confusionMatrix(table(all_data[,2],ifelse(km_significant_clustering$cluster==1,'negative','positive')))

outcome_pca_km<-outcome_scores%>%
    mutate(km_clusters=km_clustering$cluster,
         km_clusters=factor(km_clusters,levels=c(1,2)),
         km_significant_clusters=km_significant_clustering$cluster,
         km_significant_clusters=factor(km_significant_clusters,levels=c(1,2)))


ggplot(data = outcome_pca_km,
    aes(x = pc1, y = pc2, color = km_clusters)) +
    geom_text(alpha = .5, size = 3, aes(label = row_names)) +
    stat_ellipse(type = "norm", level = .99) +
    geom_hline(aes(yintercept = 0), alpha = 0.5, size = .1) +
    geom_vline(aes(xintercept = 0), alpha = 0.5, size = .1) +
    scale_color_manual(values = color_function(2)) +
    labs(title = "2D Scatter Plot of the First 2 PCs Grouped by K Mean Clusters, AD Status",
    subtitle=paste0(ncol(outcome_scores)-2,' Metabolites'))

ggplot(data = outcome_pca_km,
    aes(x = pc1, y = pc2, color = km_significant_clusters)) +
    geom_text(alpha = .5, size = 3, aes(label = row_names)) +
    stat_ellipse(type = "norm", level = .99) +
    geom_hline(aes(yintercept = 0), alpha = 0.5, size = .1) +
    geom_vline(aes(xintercept = 0), alpha = 0.5, size = .1) +
    scale_color_manual(values = color_function(2)) +
    labs(title = "2D Scatter Plot of the First 2 PCs Grouped by K Mean Clusters, AD Status",
    subtitle=paste0(ncol(outcome_significant_scores)-2,' Metabolites'))

mat_avgss <- matrix(nrow = 20, ncol = 2)

# Average within the cluster sum of square

for (i in (1:20)) {
    km_fit <- kmeans(normalized_metabolite_data, centers = i, iter.max = 300)
    mean_km <- mean(km_fit$withinss)
    print(paste("K-Value", i, ",Avg.within sum of squares", round(mean_km, 2)))
    mat_avgss[i, 1] <- i
    mat_avgss[i, 2] <- mean_km
}

plot(mat_avgss[, 1], mat_avgss[, 2], type = "o", xlab = "K_Value", ylab = "Avg. within sum of square")
title("Avg. within sum of squares vs. K-value")


mat_varexp <- matrix(nrow = 20, ncol = 2)
# Percentage of Variance explained
print(paste("Percent. variance explained"))
for (i in (1:20)) {
    km_fit <- kmeans(all_data[, -c(1:6)], centers = i, iter.max = 300)
    var_exp <- km_fit$betweenss / km_fit$totss
    print(paste("K-Value", i, ",Percent var explained", round(var_exp, 4)))
    mat_varexp[i, 1] <- i
    mat_varexp[i, 2] <- var_exp
}

plot(mat_varexp[, 1], mat_varexp[, 2], type = "o", xlab = "K_Value", ylab = "Percent Var explained")
title("Avg. within sum of squares vs. K-value")
```



```{r}
#| eval: false
#| echo: false

# SVD
library(svd)

digits_data <- read.csv("digitsdata.csv")

remove_cols <- c("target")
x_data <- digits_data[, !(names(digits_data) %in% remove_cols)]
y_data <- digits_data[, c("target")]



sv2 <- svd(x_data, nu = 15)

sv_check <- sv2$d

# Computing the square of the singular values, which can be thought of as the vector of matrix energy
# in order to pick top singular values which preserve at least 80% of variance explained
energy <- sv2$d^2
tot_varexp <- data.frame(cumsum(energy) / sum(energy))

names(tot_varexp) <- "cum_var_explained"
tot_varexp$K_value <- 1:nrow(tot_varexp)

plot(tot_varexp[, 2], tot_varexp[, 1], type = "o", xlab = "K_Value", ylab = "Prop. of Var Explained")
title("SVD - Prop. of Var explained with K-value")


```

```{r}
#| echo: false
#| eval: false

for (i in 1:p) {
    form <- paste("lm(", paste0(var[i], collapse = "+"), "~ . , data=as.data.frame(data) ) ")
    fit <- eval(parse(text = form))
    fit
    lm_result[i] <- list(summary(fit))
}

```


:::
</div>

<div class="tab-pane fade" id="English" role="tabpanel" aria-labelledby="English-tab">

::: {#English .tab-pane .fade role="tabpanel" aria-labelledby="English-tab"}

:::


</div>




