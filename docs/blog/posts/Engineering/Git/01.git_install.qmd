---
title: "Git Introduction"
subtitle: Git Introduction & Installation
description: |
  template
categories:
  - Engineering
author: Kwangmin Kim
date: 05/01/2023
format: 
  html:
    page-layout: full
    code-fold: true
    toc: true
    number-sections: true
comments: 
  utterances: 
    repo: ./docs/comments
draft: False
---

<ul class="nav nav-pills" id="language-tab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" role="tab" aria-controls="Korean" aria-selected="true">Korean</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" role="tab" aria-controls="knitr" aria-selected="false">English</button>
  </li>

<div class="tab-content" id="language-tabcontent">

<div class="tab-pane fade  show active" id="Korean" role="tabpanel" aria-labelledby="Korean-tab">

::: {#Korean .tab-pane .fade .show .active role="tabpanel" aria-labelledby="Korean-tab"}

# Git

* version 관리 솔루션
    * programming시 version관리 하기 위해 만들어진 시스템
    * 중앙형 솔루션
        * 다수의 user가 원격에 있는 repository에 commit 모든 update는 중앙 repository에 최신화 됨. 
        * 만약, 다수의 유저가 동일한 파일의 동일한 내용을 최신화시켜 commit하면 중앙 repository에 충돌이 발생
        * 대표적인 예로 SVN이 있음
    * 분산형 솔루현
        * 다수의 user가 본인들의 local repository에 commit 모든 update는 local repository에 최신화 됨. 
        * 만약, 다수의 유저가 동일한 파일의 동일한 내용을 최신화시켜 commit하면 local repository에 최신화시키기 떄문에 충돌이 발생하지 않음
        * 한 user가 코드 공유를 하기 위해 원격 repository에 commited updates를 push
        * 다른 user가 최신화된 원격 중앙 repository로부터 updates를 pull 받아 자신의 local repository를 최신화 시킴
        * 만약 다수의 user가 같은 file의 같은 부분을 최신화 시켰다고 해도 local repository에서 충돌이 발생했기 때문에 원격 repository는 온전함
        * 원격 repository는 코드 공유를 위한 저장소의 역할을 할 뿐이다.
        * 대표적인 예로 Git이 있음
* Github Repository 생성
    * Git vs Github
        - Git: 오픈소스 분산형 버전관리 solution, 시스템 또는 프로그램
        - Github: Git을 기반으로 소스를 공유할 수 있도록 만들어진 웹 서비스
    * Git 레파지토리: Github 에서 생성(https://github.com)
* Git Push & Pull

    ![Git Workflow](../../../../../images/airflow/git-docker.PNG)

* [Git 설치 링크](https://git-scm.com/downloads)
* Git Repository 생성
    * github에서 new repository 생성: remote 환경에 repository 생성
    * `git init`: local PC(환경)에 respository 생성. remote repository와 연동시킬 local folder를 만들고 command창에서 해당 위치로 이동후 실행
    * `git status`: local repository의 git status 확인
    * `touch .gitignore`: .gitignore파일이 생성되고 그 안에 commit되지 않기를 바라는 파일명 및 확장자 명을 기입한다.
    * `git add .gitignore`: stage .gitignore(git에 .gitignore가 최신화되었다는 것을 알려줌)
    * `git commit -m "message"`: local repository에 변경사항을 기록을 함 
        * 최초 commit 시 email과 user name을 등록시켜야할 수 있다.
        * `git config --global user.email "abd@sdfsd.com"` 입력
        * `git config --global user.name "name"` 입력
    * `git log`: commit을 하게 되면 log에 남음
    * `git branch -M main`: branch는 local repository의 version. branch를 여러개 둘 수 있는데 각 각 독립적으로 움직인다. 보통 운영용 branch와 개발용 branch를 나눠서 repository를 관리한다.
        * 개발용 branch로 개발 및 코드 공유를 하고 이상이 없다고 판단될 경우 운영용 branch에 merge를 한다.
        * local repository에 merge된 운영용 branch를 최종적으로 remote repository의 운영용 branch에 push한다. 
    * `git remote add origin https://github.com/kmink3225/airflow.git`: local repository와 remote repository를 연동 시켜 주는 것.
    * `git push -u origin master`
* WSL환경에서 remote git reposiotry pull 할 것
    * `git clone {repository address}`: remote git repository를 그대로 복제해서 내려 받음

:::
</div>

<div class="tab-pane fade" id="English" role="tabpanel" aria-labelledby="English-tab">

::: {#English .tab-pane .fade role="tabpanel" aria-labelledby="English-tab"}

:::


</div>


# Go to Blog Content List

[Blog Content List](../../content_list.qmd)