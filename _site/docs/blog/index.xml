<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Kwangmin Kim</title>
<link>kmink3225.netlify.app/docs/blog/index.html</link>
<atom:link href="kmink3225.netlify.app/docs/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>blog</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Tue, 31 Dec 2999 15:00:00 GMT</lastBuildDate>
<item>
  <title>Blog Content List</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/content_list.html</link>
  <description><![CDATA[ 



<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<ul>
<li>Scalars are denoted with a lower-case letter (ex a ) or a non-bolded lower-case Greek letter (ex <img src="https://latex.codecogs.com/png.latex?%5Calpha"> ).</li>
<li>Vectors are denoted using a bold-faced lower-case letter (ex <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20a">).</li>
<li>Matrices are denoted using a bold-faced upper-case letter (ex <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20%5Cphi">) or a bold-faced upper-case Greek letter (ex <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20%5CPhi">).</li>
<li>Tensors are denoted using a bold-faced upper-case letter with multiple subscripts or superscripts, indicating the number of indices and the dimensions of the tensor along each axis.
<ul>
<li>A second-order tensor (also known as a matrix) <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A"> with dimensions <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m"> can be represented as: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A_%7Bij%7D"> where <img src="https://latex.codecogs.com/png.latex?i%20=%201,%5Cdots,m"> and <img src="https://latex.codecogs.com/png.latex?j%20=%201,%5Cdots,n">, which are the indices that run over the rows and columns of the matrix, respectively.</li>
<li>A third-order tensor <img src="https://latex.codecogs.com/png.latex?T"> with dimensions <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20m%20%5Ctimes%20p"> can be represented as: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A_%7Bijk%7D"> where <img src="https://latex.codecogs.com/png.latex?i%20=%201,%5Cdots,m">, <img src="https://latex.codecogs.com/png.latex?j%20=%201,%5Cdots,n">, which are <img src="https://latex.codecogs.com/png.latex?i">, and <img src="https://latex.codecogs.com/png.latex?k%20=%201,%5Cdots,p"> <img src="https://latex.codecogs.com/png.latex?j">, and <img src="https://latex.codecogs.com/png.latex?k">, which are the indices that run over the three dimensions of the tensor.</li>
</ul></li>
</ul>
</div>
</div>
<section id="contents" class="level1">
<h1>Contents</h1>
<ul>
<li><a href="../../../docs/blog/posts/Mathmatics/guide_map/index.html">Mathematics</a></li>
<li><a href="../../../docs/blog/posts/statistics/guide_map/index.html">Statistics</a></li>
<li><a href="../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering</a></li>
<li><a href="../../../docs/blog/posts/ML/guide_map/index.html">Machine Learning</a></li>
<li><a href="../../../docs/blog/posts/DL/guide_map/index.html">Deep Learning</a></li>
<li><a href="../../../docs/blog/posts/Language/guide_map/index.html">Language</a></li>
<li><a href="../../../docs/blog/posts/Patent/guide_map/index.html">Patent</a></li>
<li><a href="../../../docs/blog/posts/Surveilance/guide_map/index.html">Surveilance</a></li>
</ul>
</section>
<section id="reference" class="level1">
<h1>Reference</h1>
<ul>
<li>Statistics
<ul>
<li>George Casella &amp; Rogeer L. Berger - Statistcal Inference, 2nd Edition</li>
<li>Dobson and Barnett (2008) An Introduction to Generalized Linear Model. 3rd Ed. Chapman &amp; Hall.</li>
<li>Fitzmaurice, Laird and Ware (2011) Applied Longitudinal Analysis. 2nd Ed. Wiley.</li>
<li>Hosmer, Lemeshow and May (2008) Applied Survival Analysis. 2nd Ed. Wiley.</li>
<li>슬기로운 통계생활 - https://www.youtube.com/<span class="citation" data-cites="statisticsplaybook">@statisticsplaybook</span></li>
<li>슬기로운 통계생활 - https://github.com/statisticsplaybook</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Mathematics
<ul>
<li>James Stewart - Calculus Early Transcedentals, 7th Eidition &amp; any James Stewart series</li>
<li>GILBERT STRANG - Introduction to Linear Algebra, 4th Edition.</li>
<li>임장환 - 머신러닝, 인공지능, 컴퓨터 비전 전공자를 위한 최적화 이론</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li><a href="https://www.youtube.com/playlist?list=PLaqQvlCBe8vIkIEb4GX2ZZ1A4tFYeXR5W">8일간의 선형대수학 기초(이상준 경희대 교수)</a></li>
<li><a href="https://ocw.mit.edu/courses/18-06-linear-algebra-spring-2010/">Linear Algebra(Prof.&nbsp;Gilbert Strang, MIT Open Courseware)</a></li>
<li><a href="https://github.com/fastai/numerical-linear-algebra/blob/master/README.md">Computational Linear Algebra for Coders</a></li>
<li><a href="http://immersivemath.com/ila/">Immersive linear Algebra</a></li>
<li><a href="https://www.3blue1brown.com/topics/linear-algebra">3blue1brown</a></li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Machine Learning
<ul>
<li>Gareth M. James, Daniela Witten, Trevor Hastie, Robert Tibshirani - An Introduction to Statistical Learning: With Applications in R 2nd Edition</li>
<li>Trevor Hastie, Robert Tibshirani, Jerome H. Friedman - The Elements of Statistical Learning 2nd Edition</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Deep Learning
<ul>
<li>Saito Koki - Deep Learning from Scratch 1,2,3 (밑바닥부터 시작하는 딥러닝 1,2,3)</li>
<li>조준우 - 머신러닝·딥러닝에 필요한 기초 수학 with 파이썬</li>
<li>조준우 - https://github.com/metamath1/noviceml</li>
<li>동빈나 - https://www.youtube.com/c/dongbinna</li>
<li>혁펜하임 - https://www.youtube.com/channel/UCcbPAIfCa4q0x7x8yFXmBag</li>
<li>Fast Campus, Coursera, Inflearn</li>
<li>다수의 Youtube, and Documents from Googling</li>
</ul></li>
<li>Engineering
<ul>
<li>Fast Campus, Coursera, Inflearn</li>
<li>그 외 다수의 Youtube, and Documents from Googling</li>
</ul></li>
</ul>


</section>

 ]]></description>
  <category>All List</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/content_list.html</guid>
  <pubDate>Tue, 31 Dec 2999 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Statistics</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/statistics/guide_map/index.html</link>
  <description><![CDATA[ 



<p><strong>(Draft)</strong></p>
<section id="contents-list" class="level1">
<h1>Contents List</h1>
<section id="basic" class="level2">
<h2 class="anchored" data-anchor-id="basic">Basic</h2>
<section id="probability-theory" class="level3">
<h3 class="anchored" data-anchor-id="probability-theory">Probability Theory</h3>
<ul>
<li>2023-02-05, Set Theory</li>
<li>2023-02-05, [Basics of Probability Theory - Axiomatic Foundations]</li>
<li>2023-02-05, [Basics of Probability Theory - Calculus of Probabilities]</li>
<li>2023-02-05, <a href="../../../../../docs/blog/posts/statistics/2023-02-05_probability/index.html">Basics of Probability Theory - Probability</a></li>
<li>2023-02-05, <a href="../../../../../docs/blog/posts/statistics/2023-02-05_conditional_probability/index.html">Conditional Probability</a></li>
<li>2023-02-05, [Independence]</li>
<li>2023-02-05, <a href="../../../../../docs/blog/posts/statistics/2023-02-05_bayes_rule/index.html">Bayes’ Rule</a></li>
<li>2023-02-05, Random Variable</li>
<li>1111-11-11, Probability Distribution</li>
</ul>
</section>
<section id="transformations-and-expectations" class="level3">
<h3 class="anchored" data-anchor-id="transformations-and-expectations">Transformations and Expectations</h3>
<ul>
<li>2023-02-21, <a href="../../../../../docs/blog/posts/statistics/2023-02-21_transformation/index.html">Transformation of Random Variables</a></li>
<li>1111-11-11, Expected Value vs Realizaed Value</li>
<li>1111-11-11, Variance</li>
<li>1111-11-11, Covariance and Correlation</li>
<li>2023-02-28, <a href="../../../../../docs/blog/posts/statistics/2023-02-28_mgf/index.html">Moment Generating Function, MGF</a></li>
</ul>
</section>
<section id="exponential-family-distributions" class="level3">
<h3 class="anchored" data-anchor-id="exponential-family-distributions">Exponential Family Distributions</h3>
<ul>
<li>Discrete Random Variable
<ul>
<li>2023-02-27,<a href="../../../../../docs/blog/posts/statistics/2023-02-27_exponential_family/discrete_bernoulli.html">Bernoulli Distribution</a></li>
<li>2023-02-28,<a href="../../../../../docs/blog/posts/statistics/2023-02-27_exponential_family/discrete_binomial.html">Binomial Distribution</a></li>
<li>2023-03-01,<a href="../../../../../docs/blog/posts/statistics/2023-02-27_exponential_family/discrete_poisson.html">Poisson Distribution</a></li>
<li>2023-03-01,<a href="../../../../../docs/blog/posts/statistics/2023-02-27_exponential_family/discrete_geometric.html">Geometric Distribution</a></li>
<li>1111-11-11, Hypergeometric Distribution</li>
</ul></li>
<li>Continuous Random Variable
<ul>
<li>1111-11-11, Normal Distribution</li>
<li>1111-11-11, Exponential Distribution</li>
<li>1111-11-11, Beta Distribution</li>
<li>1111-11-11, Chi-squared Distribution</li>
</ul></li>
<li>1111-11-11,</li>
</ul>
</section>
<section id="multiple-random-variables" class="level3">
<h3 class="anchored" data-anchor-id="multiple-random-variables">Multiple Random Variables</h3>
<ul>
<li>1111-11-11, Joint Distribution and Marginal Distribution</li>
</ul>
</section>
<section id="point-estimation" class="level3">
<h3 class="anchored" data-anchor-id="point-estimation">Point Estimation</h3>
<ul>
<li>1111-11-11, Estimation Methods - Method of Moments</li>
<li>2023-03-29, Estimation Methods - <a href="../../../../../docs/blog/posts/statistics/2023-03-25_MLE/index.html">Maximum Likelihood Estimation &amp; Statistical Bias</a></li>
<li>1111-11-11, Estimation Methods - Bayesian Estimation</li>
<li>1111-11-11, Estimation Methods - The EM Algorithm</li>
<li>1111-11-11, Evaluation Methods of Estimators - Mean Squared Error</li>
<li>1111-11-11, Evaluation Methods of Estimators - Best Unbiased Estimators</li>
<li>1111-11-11, Evaluation Methods of Estimators - Sufficiency and Unbiasedness</li>
<li>1111-11-11, Evaluation Methods of Estimators - Loss Function Optimality</li>
</ul>
</section>
</section>
<section id="hypothesis-testing" class="level2">
<h2 class="anchored" data-anchor-id="hypothesis-testing">Hypothesis Testing</h2>
<ul>
<li>1111-11-11, Hypothesis Testing</li>
<li>1111-11-11, Permutation Test</li>
</ul>
<section id="methods-of-finding-tests" class="level3">
<h3 class="anchored" data-anchor-id="methods-of-finding-tests">Methods of Finding Tests</h3>
<ul>
<li>1111-11-11, Likelihood Ratio Tests</li>
<li>1111-11-11, Bayesian Tests</li>
<li>1111-11-11, Union-Intersection and Intersection-Union Tets</li>
</ul>
</section>
<section id="methods-of-evaluating-tests" class="level3">
<h3 class="anchored" data-anchor-id="methods-of-evaluating-tests">Methods of Evaluating Tests</h3>
<ul>
<li>1111-11-11, Power</li>
<li>1111-11-11, Error Proabilities and the Power Function</li>
<li>1111-11-11, Most Powerful Tests</li>
<li>2022-12-28, <a href="../../../../../docs/blog/posts/statistics/2022-12-08-P-value/index.html">p-values</a></li>
<li>1111-11-11, Loss Function Optimality</li>
<li>1111-11-11, Multiple Testing</li>
<li>1111-11-11, Sample Size Calculation</li>
<li>1111-11-11, A/B Testing</li>
<li>2023-01-07, <a href="../../../../../docs/blog/posts/statistics/2023-01-07-anova/index.html">ANOVA</a>
<ul>
<li>2023-01-27, <a href="../2023-01-27_ANCOVA/">ANCOVA</a></li>
<li>2023-01-27, <a href="../2023-01-27_rmANOVA/">repeated measures ANOVA</a></li>
<li>2023-01-28, <a href="../2023-01-28_MANOVA/">MANOVA</a></li>
</ul></li>
</ul>
</section>
</section>
<section id="categorical-data-analysis" class="level2">
<h2 class="anchored" data-anchor-id="categorical-data-analysis">Categorical Data Analysis</h2>
<ul>
<li>1111-11-11, Introduction</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>2022-12-28,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>2023-01-07,</li>
<li>2023-01-27,</li>
<li>2023-01-27,</li>
<li>2023-01-28,</li>
</ul>
</section>
<section id="regression" class="level2">
<h2 class="anchored" data-anchor-id="regression">Regression</h2>
<ul>
<li>1111-11-11, Least Square and Simple Linear Regression</li>
<li>1111-11-11, Multiple Linear Regression</li>
</ul>
<section id="generalized-linear-models" class="level3">
<h3 class="anchored" data-anchor-id="generalized-linear-models">Generalized Linear Models</h3>
<ul>
<li>1111-11-11, Logistic Regression</li>
<li>1111-11-11, Multinomial Regression</li>
<li>1111-11-11, Poisson Regression</li>
<li>1111-11-11, Poisson Regression</li>
<li>1111-11-11, Poisson Regression</li>
</ul>
</section>
</section>
<section id="longitudinal-data-analysis" class="level2">
<h2 class="anchored" data-anchor-id="longitudinal-data-analysis">Longitudinal Data Analysis</h2>
<ul>
<li>2023-03-23, <a href="../../../../../docs/blog/posts/statistics/LDA/1_intro.html">LDA (1) - Intro</a></li>
<li>2023-03-23, <a href="../../../../../docs/blog/posts/statistics/LDA/2_covariance_model.html">LDA (2) - Concepts &amp; Covariance Models</a></li>
<li>2023-03-25, <a href="../LDA/intro.qmd">LDA (3) - WLS &amp; REML</a></li>
<li>2023-03-25, <a href="../LDA/intro.qmd">LDA (4) - Respiratory Infection Data Example</a></li>
<li>2023-03-28, <a href="../LDA/intro.qmd">LDA (5) - Epileptic Seizures Data Example</a></li>
</ul>
<section id="mixed-models" class="level3">
<h3 class="anchored" data-anchor-id="mixed-models">Mixed Models</h3>
<ul>
<li>1111-11-11, Linear Mixed Models</li>
</ul>
</section>
</section>
<section id="generalized-additive-models" class="level2">
<h2 class="anchored" data-anchor-id="generalized-additive-models">Generalized Additive Models</h2>
</section>
<section id="survival-analysis" class="level2">
<h2 class="anchored" data-anchor-id="survival-analysis">Survival Analysis</h2>
<ul>
<li>1111-11-11, Cox-Hazard Model</li>
</ul>


</section>
</section>

 ]]></description>
  <category>Statistics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/statistics/guide_map/index.html</guid>
  <pubDate>Fri, 30 Apr 2100 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Machine Learning</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/ML/guide_map/index.html</link>
  <description><![CDATA[ 



<p><strong>(Draft)</strong></p>
<section id="contents-list" class="level1">
<h1>Contents List</h1>
<section id="basic" class="level2">
<h2 class="anchored" data-anchor-id="basic">Basic</h2>
<section id="r" class="level3">
<h3 class="anchored" data-anchor-id="r">R</h3>
</section>
<section id="python" class="level3">
<h3 class="anchored" data-anchor-id="python">Python</h3>
<section id="tensor-flow-framework" class="level4">
<h4 class="anchored" data-anchor-id="tensor-flow-framework">Tensor Flow Framework</h4>
<ul>
<li>2023-02-03, <a href="../../../../../docs/blog/posts/ML/2023-02-03_tf_introduction/index.html">Tensor Flow Introduction</a></li>
</ul>
</section>
<section id="pytorch-framework" class="level4">
<h4 class="anchored" data-anchor-id="pytorch-framework">Pytorch Framework</h4>
<ul>
<li>2023-02-03, <a href="../../../../../docs/blog/posts/ML/2023-02-03_pytorch_introduction/index.html">Pytorch Introduction</a></li>
</ul>
</section>
</section>
</section>
<section id="machine-learning-methods" class="level2">
<h2 class="anchored" data-anchor-id="machine-learning-methods">Machine Learning Methods</h2>
<section id="supervised-learning" class="level3">
<h3 class="anchored" data-anchor-id="supervised-learning">Supervised Learning</h3>
<ul>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Logistic Regression]</li>
<li>0000-00=00, [Generative Models]
<ul>
<li>0000-00=00, [Linear Discriminant Analysis]</li>
<li>0000-00=00, [Quadratic Discriminant Analysis]</li>
<li>0000-00=00, [Naive Bayes]</li>
</ul></li>
<li>0000-00=00, [Resampling Methods]</li>
<li>0000-00=00, [Regularization]</li>
<li>0000-00=00, [Smoothing]</li>
<li>0000-00=00, [Tree Based Methods]</li>
<li>0000-00=00, [Support Vector Machine]</li>
<li>0000-00=00, [PCR]</li>
<li>0000-00=00, [PLS]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
</ul>
</section>
<section id="unupervised-learning" class="level3">
<h3 class="anchored" data-anchor-id="unupervised-learning">Unupervised Learning</h3>
<ul>
<li>0000-00=00, [PCA]</li>
<li>0000-00=00, [K means clustering]</li>
<li>0000-00=00, [Hierarchical Clustering]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
<li>0000-00=00, [Linear Regression]</li>
</ul>


</section>
</section>
</section>

 ]]></description>
  <category>ML</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/ML/guide_map/index.html</guid>
  <pubDate>Wed, 31 Mar 2100 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Mathematics</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Mathmatics/guide_map/index.html</link>
  <description><![CDATA[ 



<section id="contents" class="level1">
<h1>Contents</h1>
<section id="basic" class="level2">
<h2 class="anchored" data-anchor-id="basic">Basic</h2>
<ul>
<li>2023-03-24, <a href="../../../../../docs/blog/posts/Mathmatics/variables/index.html">Variable types</a></li>
<li>1111-11-11, <a href="../../../../../docs/blog/posts/Mathmatics/function/index.html">Function</a>
<ul>
<li>2023-01-31, <a href="../../../../../docs/blog/posts/Mathmatics/function/univariable_scalar_function.html">Function (1) - Univariable Scalar Function (One to One)</a></li>
<li>2023-01-31, <a href="../../../../../docs/blog/posts/Mathmatics/function/multivariable_scalar_function.html">Function (2) - Multi-variable Scalar Function (Many to One)</a></li>
<li>2023-01-31, <a href="../../../../../docs/blog/posts/Mathmatics/function/univariable_vector_function.html">Function (3) - Univariable Vector Function (One to Many)</a></li>
<li>2023-01-31, <a href="../../../../../docs/blog/posts/Mathmatics/function/mutivariable_vector_function.html">Function (4) - Multi-variable Vector Function (Many to Many)</a></li>
<li>2023-02-18, <a href="../../../../../docs/blog/posts/Mathmatics/function/composite_function.html">Function (5) - Composite Function</a></li>
</ul></li>
<li>2023-02-18, <a href="../../../../../docs/blog/posts/Mathmatics/transformation/index.html">Transformations of Functions</a></li>
<li>1111-11-11, Vector &amp; Matrix</li>
<li>2023-03-15, <a href="../epsilon_delta/">Limit, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon-%5Cdelta"> Method</a></li>
<li>Differentiation
<ul>
<li>2023-02-04, <a href="../../../../../docs/blog/posts/Mathmatics/differentiation/2023-02-04_uni_derivative.html">Derivative (1) - Univariable Scalar Funtion</a></li>
<li>1111-11-11, <a href="../../../../../docs/blog/posts/Mathmatics/differentiation/2023-02-10_composite_partial_derivative.html">Derivative (2) - Chain Rule &amp; Partial Derivative</a></li>
<li>1111-11-11, Derivative (3) - Higher Order Derivative</li>
<li>1111-11-11, Derivative (4) - Mean Value Theorem</li>
<li>1111-11-11, Derivative (5) - Gradient</li>
</ul></li>
<li>2023-03-15, <a href="../../../../../docs/blog/posts/Mathmatics/taylor_series/index.html">Talyer’s Series</a></li>
<li>1111-11-11, Gradient Direction</li>
<li>1111-11-11, Random Variable</li>
<li>1111-11-11, Probability Distribution</li>
<li>1111-11-11, Information Theory - Entropy</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
</ul>
</section>
<section id="linear-algebra" class="level2">
<h2 class="anchored" data-anchor-id="linear-algebra">Linear Algebra</h2>
<ul>
<li>2023-03-30, <a href="../../../../../docs/blog/posts/Mathmatics/linear_algebra/01.basic_vector.html">Basic Vector(1) - Vector Operations</a></li>
<li>2023-03-30, <a href="../../../../../docs/blog/posts/Mathmatics/linear_algebra/02.norm_dot-product.html">Basic Vector(2) - Vector Norm and Dot Product”</a></li>
<li>2023-03-30, <a href="../../../../../docs/blog/posts/Mathmatics/linear_algebra/03.vector_equation.html">Basic Vector(3) - Vector Equation</a></li>
<li>2023-03-30, <a href="../../../../../docs/blog/posts/Mathmatics/linear_algebra/04.matrix_operations.html">Basic Matrix(1) - Matrix Operation</a></li>
<li>2023-03-30, <a href="../../../../../docs/blog/posts/Mathmatics/linear_algebra/05.matrix_multiplication.html">Basic Matrix(2) - Matrix Multiplication</a></li>
<li>2023-03-30, <a href="../../../../../docs/blog/posts/Mathmatics/linear_algebra/06.system_of_lineqr_equations.html">Basic Matrix(3) - System of Linear Equations</a></li>
<li>2023-03-30, <a href="../../../../../docs/blog/posts/Mathmatics/linear_algebra/09.special_matrix.html">Basic Matrix(4) - Special Matrix</a></li>
<li>2023-04-14, [Lineqr Equations]</li>
<li>2023-04-14, [Vector Space and Subspaces]</li>
<li>2023-04-21, [Orthogonality]</li>
<li>1111-11-11, [Determinants]</li>
<li>1111-11-11, [Eigen Value &amp; Eigen Vector]</li>
<li>1111-11-11, [Linear Transformations]</li>
<li>1111-11-11, Basis, Dimension, &amp; Rank</li>
<li>1111-11-11,</li>
<li>1111-11-11, Eigen Decomposition</li>
<li>1111-11-11, Singular Value Decomposition (SVD)</li>
<li>1111-11-11, Group</li>
<li>1111-11-11, Rotation &amp; Group</li>
<li>2023-04-02, <a href="../linear_algebra/quadratic_form.qmd">Matrix Transformation (5) - Quadratic Form</a></li>
<li>2023-04-02, <a href="../../../../../docs/blog/posts/Mathmatics/linear_algebra/derivative_matrix_vector.html">Matrix Calculus (1) - Quadratic Form</a></li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
</ul>
</section>
<section id="optimization" class="level2">
<h2 class="anchored" data-anchor-id="optimization">Optimization</h2>
<ul>
<li>2023-03-23, <a href="../../../../../docs/blog/posts/Mathmatics/optimization/minimizer.html">Minimizer &amp; Minimum</a></li>
<li>1111-11-11, Convex Set</li>
<li>1111-11-11, Convex Function</li>
<li>1111-11-11, Unconstrained Optimization</li>
<li>1111-11-11, Non-linear Least Square</li>
<li>1111-11-11, Largrange Multiplier Method
<ul>
<li>1111-11-11, Largrange Primal Function</li>
<li>1111-11-11, Largrange Dual Function</li>
<li>1111-11-11, KKT conditions</li>
</ul></li>
<li>1111-11-11, Gradient Descent Optimizers</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
</ul>


</section>
</section>

 ]]></description>
  <category>Mathematics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Mathmatics/guide_map/index.html</guid>
  <pubDate>Sun, 28 Feb 2100 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Deep Learning</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/DL/guide_map/index.html</link>
  <description><![CDATA[ 



<p><strong>(Draft)</strong></p>
<section id="contents-list" class="level1">
<h1>Contents List</h1>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<ul>
<li>1111-11-11, Artificial Intelligence</li>
<li>1111-11-11, Perceptron</li>
<li>1111-11-11, Artificial Neural Netwroks (ANN)
<ul>
<li>1111-11-11, activation functions</li>
<li>1111-11-11, output layer design</li>
</ul></li>
<li>1111-11-11, loss function</li>
<li>1111-11-11, numerical differentiation</li>
<li>1111-11-11, gradient descent</li>
<li>1111-11-11, backpropagation</li>
<li>1111-11-11, optimizer
<ul>
<li>1111-11-11, stochastic gradient descent</li>
<li>1111-11-11, momentum</li>
<li>1111-11-11, adaGrad</li>
<li>1111-11-11, adam</li>
<li>1111-11-11, weight initalization</li>
</ul></li>
<li>1111-11-11, batch normalization</li>
<li>1111-11-11, dropout</li>
<li>1111-11-11, tuning parameter</li>
<li>1111-11-11, auto-encoder</li>
<li>1111-11-11, stacked auto-encoder</li>
<li>1111-11-11, denoising auto-encoder(DAE)</li>
</ul>
<section id="convolutional-neural-network-cnn" class="level3">
<h3 class="anchored" data-anchor-id="convolutional-neural-network-cnn">Convolutional Neural Network (CNN)</h3>
<ul>
<li>2023-03-10, <a href="../../../../../docs/blog/posts/DL/2023-03-10_cnn/index.html">CNN (1) - Concept</a></li>
<li>2023-03-10, <a href="">CNN (2) - Practice</a></li>
</ul>
</section>
<section id="natural-language-process-nlp" class="level3">
<h3 class="anchored" data-anchor-id="natural-language-process-nlp">Natural Language Process (NLP)</h3>
<ul>
<li>1111-11-11, word2vec</li>
<li>1111-11-11, improved word2vec</li>
</ul>
</section>
<section id="recurrent-neural-network-rnn" class="level3">
<h3 class="anchored" data-anchor-id="recurrent-neural-network-rnn">Recurrent Neural Network (RNN)</h3>
</section>
<section id="gate-recurrent-unit-gru" class="level3">
<h3 class="anchored" data-anchor-id="gate-recurrent-unit-gru">Gate Recurrent Unit (GRU)</h3>
</section>
<section id="long-short-term-memory-lstm" class="level3">
<h3 class="anchored" data-anchor-id="long-short-term-memory-lstm">Long Short-Term Memory (LSTM)</h3>
</section>
<section id="attention-transformer" class="level3">
<h3 class="anchored" data-anchor-id="attention-transformer">Attention (Transformer)</h3>
</section>
<section id="bidirectional-encoder-representations-from-transformers-bert" class="level3">
<h3 class="anchored" data-anchor-id="bidirectional-encoder-representations-from-transformers-bert">Bidirectional Encoder Representations from Transformers (BERT)</h3>
</section>
<section id="generative-pre-training-transformer-gpt" class="level3">
<h3 class="anchored" data-anchor-id="generative-pre-training-transformer-gpt">Generative Pre-training Transformer (GPT)</h3>


</section>
</section>
</section>

 ]]></description>
  <category>DL</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/DL/guide_map/index.html</guid>
  <pubDate>Thu, 31 Dec 2099 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Engineering</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/guide_map/index.html</link>
  <description><![CDATA[ 



<section id="it-terminology" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="it-terminology"><span class="header-section-number">1</span> IT Terminology</h2>
<ul>
<li>0000-00-00, Terminology</li>
</ul>
</section>
<section id="data-structure" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="data-structure"><span class="header-section-number">2</span> Data Structure</h2>
<ul>
<li>2023-01-17, <a href="../2023-01-17_data_structure_overview/">Overview</a></li>
<li>2023-01-18, <a href="../2023-01-18_array/">Array</a></li>
<li>2023-01-18, <a href="../2023-01-18_linked_list/">Linked List</a></li>
<li>2023-01-18, <a href="../2023-01-18_python_list/">Python List</a></li>
<li>2023-01-19, <a href="../2023-01-19_stack/">Stack</a></li>
<li>2023-01-19, <a href="../2023-01-19_queue/">Queue</a></li>
<li>2023-01-26, <a href="../2023-01-19_deque/">Deque</a></li>
<li>2023-01-26, <a href="../2023-01-20_binary_search_tree/">Binary Search Tree</a></li>
<li>2023-01-20, <a href="../2023-01-20_priority_queue/">Priority Queue</a></li>
<li>2023-01-20, <a href="../2023-01-20_graph/">Graph</a></li>
</ul>
</section>
<section id="development-environment-setting" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="development-environment-setting"><span class="header-section-number">3</span> Development Environment Setting</h2>
<section id="wsl2" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="wsl2"><span class="header-section-number">3.1</span> WSL2</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/WSL/01.wsl-install.html">Introduction &amp; Installation</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Linux/01.linux_comands.html">Frequently Used Linux Command</a></li>
</ul>
</section>
<section id="docker" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="docker"><span class="header-section-number">3.2</span> Docker</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Docker/01.docker_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
<section id="vs-code" class="level3" data-number="3.3">
<h3 data-number="3.3" class="anchored" data-anchor-id="vs-code"><span class="header-section-number">3.3</span> VS code</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/VScode/01.vscode_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
<section id="conda" class="level3" data-number="3.4">
<h3 data-number="3.4" class="anchored" data-anchor-id="conda"><span class="header-section-number">3.4</span> Conda</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Conda/01.conda_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
<section id="git" class="level3" data-number="3.5">
<h3 data-number="3.5" class="anchored" data-anchor-id="git"><span class="header-section-number">3.5</span> Git</h3>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/Git/01.git_install.html">Introduction &amp; Installation</a></li>
</ul>
</section>
</section>
<section id="documentation" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="documentation"><span class="header-section-number">4</span> Documentation</h2>
<section id="dynamic-documentation" class="level3" data-number="4.1">
<h3 data-number="4.1" class="anchored" data-anchor-id="dynamic-documentation"><span class="header-section-number">4.1</span> Dynamic Documentation</h3>
<ul>
<li>2023-01-19, <a href="https://quarto.org/docs/get-started/">Quarto</a></li>
<li>2023-01-19, <a href="https://github.com/yihui/xaringan">xaringan[R]</a></li>
<li>2023-01-19, <a href="https://bookdown.org/yihui/bookdown/get-started.html">Bookdown[R]</a></li>
<li>2023-01-19, <a href="https://decile-team-distil.readthedocs.io/en/latest/index.html">DISTL</a></li>
<li>2023-01-26, <a href="https://www.sphinx-doc.org/en/master/">Sphinx[Python]</a></li>
</ul>
</section>
<section id="diagrams" class="level3" data-number="4.2">
<h3 data-number="4.2" class="anchored" data-anchor-id="diagrams"><span class="header-section-number">4.2</span> Diagrams</h3>
<ul>
<li>2023-05-01, <a href="https://quarto.org/docs/authoring/diagrams.html">Quarto &amp; Diagrams</a></li>
<li>2023-05-01, <a href="https://graphviz.org/gallery/">Graphiz Gallery</a></li>
<li>2023-05-01, <a href="https://mermaid.js.org/#/">Mermaid Gallery</a></li>
</ul>
</section>
</section>
<section id="aws-cloud" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="aws-cloud"><span class="header-section-number">5</span> AWS Cloud</h2>
<p>Coursera Course: AWS Fundamentals</p>
<ul>
<li>2023-03-09, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/computing_networking.html">Computing and Networking</a></li>
<li>2023-03-12, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/storage_database.html">Storage and Database</a></li>
<li>2023-03-26, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/monitoring_sharedresponsibility.html">Monitoring and SharedResponsibility</a></li>
<li>2023-04-05, <a href="../../../../../docs/blog/posts/Engineering/2023-03-02_aws/infra_security.html">Infrastructure Security</a></li>
</ul>
</section>
<section id="azure-cloud" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="azure-cloud"><span class="header-section-number">6</span> Azure Cloud</h2>
</section>
<section id="gcp" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="gcp"><span class="header-section-number">7</span> GCP</h2>
</section>
<section id="apache-airflow" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="apache-airflow"><span class="header-section-number">8</span> Apache Airflow</h2>
<ul>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/01.intro.html">Introduction</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/02.env_setting.html">Airflow Environment Setting</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/03.operator_basic.html">Operator Basics</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/04.python_operator.html">Python Operators</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/05.template_variable.html">Template Variable</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/06.data_share.html">Data Share</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/07.task_handling.html">Task Handling - Advanced</a></li>
<li>2023-05-01, <a href="../../../../../docs/blog/posts/Engineering/airflow/08.more_operators.html">More Operators</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/09.connection_hook.html">Connection &amp; Hook</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/10.sensor.html">Sensor</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/11.airflow_functions.html">More Airflow Functions</a></li>
<li>2023-05-10, <a href="../../../../../docs/blog/posts/Engineering/airflow/11.airflow_functions.html">Operate WebApp Using Rshiny</a></li>
</ul>
</section>
<section id="apache-spark" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="apache-spark"><span class="header-section-number">9</span> Apache Spark</h2>
</section>
<section id="data-modeling" class="level2" data-number="10">
<h2 data-number="10" class="anchored" data-anchor-id="data-modeling"><span class="header-section-number">10</span> Data Modeling</h2>
</section>
<section id="front-end" class="level2" data-number="11">
<h2 data-number="11" class="anchored" data-anchor-id="front-end"><span class="header-section-number">11</span> Front End</h2>
</section>
<section id="back-end" class="level2" data-number="12">
<h2 data-number="12" class="anchored" data-anchor-id="back-end"><span class="header-section-number">12</span> Back End</h2>


</section>

 ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/guide_map/index.html</guid>
  <pubDate>Thu, 31 Dec 2099 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Language</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Language/guide_map/index.html</link>
  <description><![CDATA[ 



<p><strong>(Draft)</strong></p>
<section id="contents-list" class="level1">
<h1>Contents List</h1>
<section id="r" class="level2">
<h2 class="anchored" data-anchor-id="r">R</h2>
<ul>
<li>1111-11-11, tidyverse
<ul>
<li>1111-11-11, dplyr</li>
<li>1111-11-11, ggplot2</li>
<li>1111-11-11, tidyr</li>
<li>1111-11-11, readr</li>
<li>1111-11-11, purrr</li>
<li>1111-11-11, tibble</li>
<li>1111-11-11, stringr</li>
<li>1111-11-11, forcats</li>
</ul></li>
<li>1111-11-11, tidymodels</li>
<li>1111-11-11, R shiny</li>
<li>1111-11-11, mosaic</li>
</ul>
</section>
<section id="python" class="level2">
<h2 class="anchored" data-anchor-id="python">Python</h2>
<ul>
<li>1111-11-11, numpy</li>
<li>1111-11-11, pandas</li>
<li>1111-11-11, matplotlib</li>
<li>1111-11-11, seaborn</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
</ul>
</section>
<section id="sql" class="level2">
<h2 class="anchored" data-anchor-id="sql">SQL</h2>
<section id="sqlite" class="level3">
<h3 class="anchored" data-anchor-id="sqlite">SQLite</h3>
</section>
<section id="oracle-sql" class="level3">
<h3 class="anchored" data-anchor-id="oracle-sql">Oracle SQL</h3>
</section>
<section id="ms-sql" class="level3">
<h3 class="anchored" data-anchor-id="ms-sql">MS-SQL</h3>
</section>
<section id="postgre-sql" class="level3">
<h3 class="anchored" data-anchor-id="postgre-sql">Postgre SQL</h3>
</section>
</section>
<section id="linux" class="level2">
<h2 class="anchored" data-anchor-id="linux">Linux</h2>
</section>
<section id="powershell" class="level2">
<h2 class="anchored" data-anchor-id="powershell">Powershell</h2>
</section>
<section id="c" class="level2">
<h2 class="anchored" data-anchor-id="c">C++</h2>
</section>
<section id="javascript" class="level2">
<h2 class="anchored" data-anchor-id="javascript">Javascript</h2>


</section>
</section>

 ]]></description>
  <category>Language</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Language/guide_map/index.html</guid>
  <pubDate>Thu, 31 Dec 2099 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Patent</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Patent/guide_map/index.html</link>
  <description><![CDATA[ 



<p><strong>(Draft)</strong></p>
<section id="contents-list" class="level1">
<h1>Contents List</h1>
<section id="basic" class="level2">
<h2 class="anchored" data-anchor-id="basic">Basic</h2>


</section>
</section>

 ]]></description>
  <category>Patent</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Patent/guide_map/index.html</guid>
  <pubDate>Thu, 31 Dec 2099 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Content List, Validation</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Surveilance/guide_map/index.html</link>
  <description><![CDATA[ 



<section id="sgs" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="sgs"><span class="header-section-number">1</span> SGS</h2>
<ul>
<li>0000-00-00, EN62304</li>
</ul>
</section>
<section id="fda" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="fda"><span class="header-section-number">2</span> FDA</h2>
<ul>
<li>2023-01-27, <a href="../../../../../docs/blog/posts/Surveilance/2022-12-10_FDA_sw_general_guidance/index.html">General Principles of SW Validation</a></li>
<li>2023-01-27, <a href="../../../../../docs/blog/posts/Surveilance/2023-01-27_FDA_sw_general_guidance_presentation/index.html">General Principles of SW Validation - Diagram Summary</a></li>
<li>1111-11-11, Guidance for the Content of Premarket Submissions for Software Contained in Medical Devices</li>
</ul>
</section>
<section id="dhf" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="dhf"><span class="header-section-number">3</span> DHF</h2>
</section>
<section id="public-health" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="public-health"><span class="header-section-number">4</span> Public Health</h2>
</section>
<section id="wet-lab" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="wet-lab"><span class="header-section-number">5</span> Wet Lab</h2>
<ul>
<li>0000-00-00, PCR (Polymerase Chain Reaction) Experiment</li>
</ul>


</section>

 ]]></description>
  <category>Surveilance</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Surveilance/guide_map/index.html</guid>
  <pubDate>Sat, 31 Dec 2089 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Variables</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/statistics/2023-11-07-variable/index.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="variable" class="level1">
<h1>Variable</h1>
<section id="concept" class="level2">
<h2 class="anchored" data-anchor-id="concept">Concept</h2>
<ul>
<li>어떤 현상이나 사물의 의미를 추상적인 용어를 사용하여 관념적으로 구성한 것</li>
<li>ex) 성 (gender)</li>
</ul>
</section>
<section id="concept-of-variable" class="level2">
<h2 class="anchored" data-anchor-id="concept-of-variable">Concept of Variable</h2>
<ul>
<li>한 연속선상에서 둘 이상의 값을 가지는 개념</li>
<li>ex) 성별(sex)</li>
</ul>
</section>
<section id="constant" class="level2">
<h2 class="anchored" data-anchor-id="constant">Constant</h2>
<ul>
<li>결코 변하지 않는 단 하나의 값</li>
<li>ex) 남자, 여자</li>
</ul>
</section>
</section>
<section id="variable-types" class="level1">
<h1>Variable Types</h1>
<section id="독립변수" class="level2">
<h2 class="anchored" data-anchor-id="독립변수">독립변수</h2>
<ul>
<li>독립변수 (independent variable) 는 조사하고자 하는 사건이나 상황을 독립적으로 발생시키는 원인이 되는 변수로서 <em>원인변수</em>, <em>설명변수</em>, <em>예측변수</em> 라고도 부름</li>
<li>if s + v, s + v 에서 if s + v 에서 독립 변수의 정보를 추출해낼 수 있다.</li>
<li>예를 들어, 사람이 운동을 하면 근육량이 늘어 난다.</li>
<li>여기서 <em>사람이 운동을 하면</em> 부분에서 독립 변수를 뽑아낸다면 운동의 유무가 독립변수가 될 수 있다. 근육량의 변화는 운동의 유무에 따라 결정되는 원인 부분이기 때문이다.</li>
<li>즉, 운동 (독립변수) <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 근육량 (종속변수)</li>
</ul>
</section>
<section id="종속변수" class="level2">
<h2 class="anchored" data-anchor-id="종속변수">종속변수</h2>
<ul>
<li>종속변수 (dependent variable) 는 다른 변수에 영향을 받는 변수</li>
<li>다른 변수에 영향을 미칠 수 없는 변수</li>
<li>인과 관계에서 결과(effect)를 나타냄</li>
<li>결과변수, 피설명변서, 피예측변수, 반응변수, 가설적 변수라고도 부른다.</li>
<li>if s + v, s + v 에서 s + v 에서 독립 변수의 정보를 추출해낼 수 있다.</li>
<li>예를 들어, 사람이 운동을 하면 근육량이 늘어난다.</li>
<li>여기서 <em>근육량이 늘어난다.</em> 부분에서 종속 변수가 뽑힌다. 근육량이 종속변수가 될 수 있다. 근육량은 운동의 유무에 따라 그 효과가 영향을 받는 결과 부분이기 때문이다.</li>
<li>즉, 운동 (독립변수) <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 근육량 (종속변수)</li>
</ul>
</section>
<section id="매개변수" class="level2">
<h2 class="anchored" data-anchor-id="매개변수">매개변수</h2>
<ul>
<li>매개변수 (intervening or mediating variable)는 두 변수는 서로 직접적인 관계가 없는데 두 변수가 간접적으로 관계를 갖는 것처럼 보이도록 하는 변수</li>
<li>독립변수와 종속변수 사이에 개입하여 두 변수를 연결하는 변수</li>
<li>매개변수는 독립변수의 결과변수인 동시에 종속변수의 원인이 되는 변수</li>
<li>독립변수 <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 매개변수 <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 종속변수
<ul>
<li>여기서 독립변수와 종속변수는 직접적인 관계가 없지만, 매개 변수에 의해 마치 관계를 갖는 것처럼 보임</li>
</ul></li>
<li>예를 들어, 매개 변수의 효과가 선행연구가 뒷받침 되거나 자명한 관계가 보여야 한다.
<ul>
<li>여가 문화 요인의 매개효과를 고려한 장애인의 경제상태가 삶의 만족도에 미치는 영향</li>
<li>독립변수: 경제 상태</li>
<li>종속변수: 삶의 만족도</li>
<li>매개변수: 여가 문화</li>
<li>경제 상태는 여가 문화의 독립 변수로서 돈이 많으면 여가 문화를 즐길 수 있는 비용을 지불할 수 있는 원인이 된다.</li>
<li>여가 문화는 삶의 만족도의 독립 변수로서 여가 문화를 즐김으로 인해 본인이 원하는 취미 활동을 향유함으로써 삶의 만족도가 증가하는 원인이 된다.</li>
</ul></li>
<li>예를 들어, 학업 집중도의 매개 효과를 고려한 수면의 질이 학업 성취도에 미치는 영향
<ul>
<li>독립변수: 수면의 질</li>
<li>종속변수: 학업 성취도</li>
<li>매개변수: 학업 집중도</li>
<li>수면의 질은 학업 집중도에 대한 독립 변수로서 수면의 질이 높으면 졸지 않고 집중도가 올라가는 경향의 원인이 된다.</li>
<li>학업 집중도는 학업성취도의 독립 변수로서 학업 집중도가 올라가면 학업 성취도가 올라감으로써 학업 성취도 상승에 대한 원인된다.</li>
<li>하지만, 수면의 질이 학업 성취도에 대한 연관성은 반드시 보장되진 않는다.</li>
</ul></li>
<li>데이터 분석에서 다음과 같은 증거가 있어야 한다.
<ol type="1">
<li>데이터 분석에서 경제 상태 (독립 변수)와 삶의 만족도 (종속 변수)가 강한 상관관계가 나타나야 한다</li>
<li>회귀 모형에 경제 상태 (독립 변수)와 여가 문화(매개 변수)를 넣었을 때 사람의 만족도 (종속 변수)에 대한 경제 상태 (독립 변수)의 유의성이 낮아야 하고 여가 문화 (매개 변수)의 유의성이 높으면 여가 문화는 매개 변수로 간주될 수 있다.</li>
</ol></li>
<li>한계점
<ul>
<li>매개 변수는 종종 성격, 지능, 태도, 문화와 같은 가상의 구성물일 수 있다.</li>
<li>그래서, 정량화 시키기 힘들 수 있다.</li>
</ul></li>
</ul>
</section>
<section id="조절변수" class="level2">
<h2 class="anchored" data-anchor-id="조절변수">조절변수</h2>
<ul>
<li>조절변수 (moderating variable) 는 독립변수가 종속변수에 원인이 되며 영향을 미치는 영향력의 강도, 세기 , 방향을 조절하는 변수</li>
<li>독립변수 <img src="https://latex.codecogs.com/png.latex?%5Cxrightarrow%7B%5Ctext%7B%EC%A1%B0%EC%A0%88%EB%B3%80%EC%88%98%7D%7D"> 종속변수</li>
<li>예를 들어, 따돌림 피해자 학생에 대한 교사의 지지도에 따라 집단따돌림이 자존감에 미치는 영향
<ul>
<li>독립변수: 집단 따돌림</li>
<li>종속변수: 학생의 자존감</li>
<li>매개변수: 교사의 지지도</li>
<li>집단 따돌림은 학생의 자존감에 악영향을 미친다는 선행 연구나 자명한 관계가 있다고 가정</li>
<li>교사가 피해자 학생에게 무관심하다면 피해자 학생에 대한 학교폭력이 가중되면서 자존감이 더 하락할 것.</li>
<li>교사가 피해자 학생에게 칭찬과 응원을 한다면 피해자 학생은 자존감이 올라갈 것.</li>
</ul></li>
<li>예를 들어, 자녀유무에 따라 부부간 의사소통이 이혼에 미치는 영향
<ul>
<li>부부간 의사소통이 없다면 이혼가능성이 올라간다는 전제가 있고 자녀가 있다면 이혼 가능성이 낮아 질 수 있음</li>
</ul></li>
</ul>
</section>
<section id="외생변수" class="level2">
<h2 class="anchored" data-anchor-id="외생변수">외생변수</h2>
<ul>
<li>외생변수 (extraneous variable)는 독립변수 외에 종속변수에 영향을 주는 변수로서 원래 관계가 없는 변수를 관계가 있는 것처럼 만들어 종속 변수에 대한 가짜 독립변수가 만들어진다 (가식적 관계 또는 허위관계)</li>
<li>외생변수를 통제하면 관계가 있는 것으로 나타났던 독립변수와 종속변수의 관계가 사라짐</li>
<li>외새변수는 반드시 통제해줘야 함</li>
<li>구조 방정식에서 독립 변수의 개념, 다른 변수에 영향을 주는 변수. 즉 기존에 원인인 것처럼 보이던 가짜 독립 변수가 아니라 실제 원인인 외생변수가 종속변수에 대한 진짜 독립변수.</li>
<li>독립변수 <img src="https://latex.codecogs.com/png.latex?%5Cxleftarrow%7B%5Ctext%7B+%7D%7D"> 외생변수 <img src="https://latex.codecogs.com/png.latex?%5Cxrightarrow%7B%5Ctext%7B+%7D%7D"> 종속변수</li>
<li>예를 들어, 무릎이 쑤시면 비가 온다.
<ul>
<li>기압이 낮으면 무릎의 통증을 유발하고 동시에 비가 내리는 원인이 된다. 기압의 존재를 찾아내지 못하면 마치 무릎의 통증이 비를 내리게 하는 원인인 것 처럼 인식한다.</li>
<li>대기압이 낮으면 비구름이 고기압에서 저기압으로 이동하면서 비를 내리게 하고 동시에 대기압이 낮을때 상대적으로 체내의 내부 기압이 높아져 팽창하여 관절이 부딪히게 된다.</li>
</ul></li>
</ul>
</section>
<section id="내생변수" class="level2">
<h2 class="anchored" data-anchor-id="내생변수">내생변수</h2>
<ul>
<li>내생변수 (intraneous variable)는 구조 방정식에서 사용되는 용어로 다른 변수로부터 영향을 받는 변수로서 모형 안에서 그 값이 결정되는 변수</li>
<li>구조 방정식에서 종속변수에 해당.</li>
<li>구조 방정식은 수많은 변수들을 한번에 고려하는 모형으로 네트 워크 분석이 요구된다. 구조 방정식 안에서는
<ul>
<li>외생변수 (원인) <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 내생변수 (결과) 의 관계를 갖는다.</li>
<li>이때, 외생 변수와 내생 변수에 많은 변수들이 관계를 맺는다.</li>
</ul></li>
</ul>
</section>
<section id="억압변수" class="level2">
<h2 class="anchored" data-anchor-id="억압변수">억압변수</h2>
<ul>
<li>억압변수 (suppressor variable)은 원래 관계가 있는데 관계가 없는 것처럼 보이게 하는 변수</li>
<li>독립변수와 종속변수 중 하나의 변수와는 양의 상관관계가 있고 다른 하나의 변수와는 음의 상관관계가 있어 독립변수와 종속변수 간에 마치 아무런 관계가 없는 것처럼 보이게 만드는 변수</li>
<li>두 변수 간에 실제 존재하는 관계를 드러나지 못하게 억누른다는 의미에서 억밥 변수라고 부름</li>
<li>억압 변수를 통제하면 독립변수와 종속 변수의 참된 관계가 드러남</li>
<li>외생 변수와 마찬가지로 억압변수는 반드시 통제되어야한다.</li>
<li>독립변수 (+) <img src="https://latex.codecogs.com/png.latex?%5Cleftarrow"> 억압변수 <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> (-) 종속변수</li>
<li>예를 들어, 교육 수준이 높으면 소득수준이 낮을 것이다.
<ul>
<li>위의 명제는 마치 거짓인 것처럼 보이지만 고령자란 변수를 억압변수로 설정하면 교육 수준이 높은 고령자의 경우 젊었을 때 돈을 많이 벌어놨기 때문에 은퇴후 돈을 벌지 않아도 된다. 그러므로 소득 수준이 낮기 때문에 위의 명제가 참이 될 수 있다.</li>
</ul></li>
</ul>
</section>
<section id="통제변수" class="level2">
<h2 class="anchored" data-anchor-id="통제변수">통제변수</h2>
<ul>
<li>통제변수 (control variable)는 독립변수와 종속변수의 관계에 영향을 미칠만한 제 3의 변수로서 외생변수, 매개변수, 조절변수, 억제변수들 중 연구자가 중점적으로 보고자 하는 변수들의 실제적 관계를 검증하기 위해 조사과정에 영향을 미치지 않도록 실제로 통제하는 변수</li>
<li>즉, 통제변수란 독립변수와 종속변수의 인과관계에 영향을 주는 제 3의 변수 중 조사설계에서 조사자가 통제하려는 변수</li>
<li>일반적으로 하나의 종속변수에 수많은 독립변수가 있지만 분석가가 관심있어하는 독립 변수의 종속변수에 대한 순수한 효과를 관찰하기 위해 제 3의 변수들 (통제 변수)을 통제하거나 일정하게 유지해줘야 관찰이 가능하다.</li>
</ul>
</section>
</section>
<section id="variable-classification-by-attribute" class="level1">
<h1>Variable Classification by Attribute</h1>
<section id="이산변수-비연속변수-불연속변수" class="level2">
<h2 class="anchored" data-anchor-id="이산변수-비연속변수-불연속변수">이산변수 (비연속변수, 불연속변수)</h2>
<ul>
<li>이산변수는 명목척도 (nominal scale), 서열척도(ordinal scale)로 측정되는 변수</li>
<li>이산이란 각 값의 사이가 떨어져 있어 그 사이의 값은 아무런 의미가 없다는 뜻</li>
<li>성별, 종교 등</li>
<li>예를 들어, 남성을 1, 여성을 2라고 값을 부여했을 때 1과 2사이의 값은 존재할 수 없음</li>
</ul>
</section>
<section id="연속-변수" class="level2">
<h2 class="anchored" data-anchor-id="연속-변수">연속 변수</h2>
<ul>
<li>연속변수는 등간척도 (interval scale)와 비율척도 (ratio scale)로 측정된 변수</li>
<li>키, 연령, 무게 등</li>
</ul>
</section>
<section id="질적-변수" class="level2">
<h2 class="anchored" data-anchor-id="질적-변수">질적 변수</h2>
<ul>
<li>양이 아닌 해석 또는 의미가 중요한 변수. 성별 종교 등 (성별 1,2가 양을 의미하는 것이 아님)</li>
</ul>
</section>
<section id="양적변수" class="level2">
<h2 class="anchored" data-anchor-id="양적변수">양적변수</h2>
<ul>
<li>키 연령 무게 등 - 측정값이 양을 의미함</li>
</ul>
</section>
</section>
</div>
<section id="blog-guide-map-link" class="level2">
<h2 class="anchored" data-anchor-id="blog-guide-map-link">Blog Guide Map Link</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/statistics/guide_map/index.html">Statistics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Blog</a></li>
<li><a href="../../../../../docs/blog/posts/DL/guide_map/index.html">Deep Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/ML/guide_map/index.html">Machine Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Mathematics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Patent/guide_map/index.html">Patent Blog</a></li>
<li><a href="../../Validation/guide_map/index.qmd">Validation Blog</a></li>
</ul>


</section>

</div></ul> ]]></description>
  <category>Statistics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/statistics/2023-11-07-variable/index.html</guid>
  <pubDate>Mon, 06 Nov 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Multivariate Normal Distribution &amp; Cholesky Decomposition</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Mathmatics/linear_algebra/09.cholesky_decomposition.html</link>
  <description><![CDATA[ 



<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mosaic)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mvtnorm)</span></code></pre></div>
</details>
</div>
<section id="sampling-from-multivariate-normal-distribution" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Sampling from Multivariate Normal Distribution</h1>
<p>mvtnorm packcage의 rmvnnorm() 이용하는데 rmvnnorm()는 mean vector와 covariance matrix를 arguments로 받는다</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmu%20=%5Cbegin%7Bbmatrix%7D%201%20//%203//%203%20%5Cend%7Bbmatrix%7D%20%5Cquadd%20%5CSigma%20=%5Cbegin%7Bbmatrix%7D%204%20&amp;%20-2%20&amp;%201%20%5C%5C%20-2%20&amp;%203%20&amp;%20-1%20%5C%5C%201%20&amp;%20-1%20&amp;%202%20%5Cend%7Bbmatrix%7D%0A"></p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">mean_vector <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-2">cov_matrix <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow=</span><span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-3">mvt_samples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rmvnorm</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">n=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span>mean_vector, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sigma=</span> cov_matrix)</span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(mvt_samples)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>           [,1]       [,2]       [,3]
[1,]  1.3617570  3.3109952 1.35687867
[2,] -2.3879586  3.8573164 1.77917435
[3,] -0.3131387  3.9923402 0.08153954
[4,]  1.2302435  4.9643451 1.21651513
[5,]  0.5685441  5.4067268 1.50455133
[6,]  3.6084111 -0.6648595 2.94373530</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean vector와 variance vector 확인하는 시각화</span></span>
<span id="cb4-2">mvt_samples[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/Mathmatics/linear_algebra/09.cholesky_decomposition_files/figure-html/unnamed-chunk-2-1.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1">mvt_samples[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/Mathmatics/linear_algebra/09.cholesky_decomposition_files/figure-html/unnamed-chunk-2-2.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">mvt_samples[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/Mathmatics/linear_algebra/09.cholesky_decomposition_files/figure-html/unnamed-chunk-2-3.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ecdf</span>(mvt_samples[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">plot</span>() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#empirical cdf</span></span>
<span id="cb7-2">y<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">pnorm</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sd=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># get cdf  points</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">points</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">seq</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">by=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.01</span>),y,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">col=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># marginal cdf</span></span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/Mathmatics/linear_algebra/09.cholesky_decomposition_files/figure-html/unnamed-chunk-2-4.png" class="img-fluid" width="672"></p>
</div>
</div>
<section id="첫째로-표본-공분산-행렬-covmvt_samples-추정" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="첫째로-표본-공분산-행렬-covmvt_samples-추정"><span class="header-section-number">1.1</span> 첫째로 표본 공분산 행렬, cov(mvt_samples) 추정</h2>
<p><img src="https://latex.codecogs.com/png.latex?%0AS=%5Cfrac%7B1%7D%7Bn-1%7D%20%5Ctilde%7BX%7D%5ET%5Ctilde%7BX%7D%0A"></p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># covariance matrix 확인하는 시각화</span></span>
<span id="cb8-2"><span class="do" style="color: #5E5E5E;
background-color: null;
font-style: italic;">## 첫째로 표본 공분산 행렬, cov(mvt_samples) 추정</span></span>
<span id="cb8-3">centered_X <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(mvt_samples, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">center =</span>T, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale =</span>F)</span>
<span id="cb8-4"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000-1</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(centered_X) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> centered_X</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]      [,2]      [,3]
[1,]  4.317760 -2.087839  1.148754
[2,] -2.087839  2.931684 -1.094703
[3,]  1.148754 -1.094703  2.022416</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cov</span>(mvt_samples)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]      [,2]      [,3]
[1,]  4.317760 -2.087839  1.148754
[2,] -2.087839  2.931684 -1.094703
[3,]  1.148754 -1.094703  2.022416</code></pre>
</div>
</div>
</section>
<section id="난수-발생-원리" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="난수-발생-원리"><span class="header-section-number">1.2</span> 난수 발생 원리</h2>
<section id="cholesky-decomposition" class="level3" data-number="1.2.1">
<h3 data-number="1.2.1" class="anchored" data-anchor-id="cholesky-decomposition"><span class="header-section-number">1.2.1</span> Cholesky Decomposition</h3>
<p>cholesky decomposition 또는 촐레스키 인수분해는 선형대수학에서 사용되는 중요한 알고리즘 중 하나로 이는 양의 정부호 행렬을 lower triangular matrix와 그 행렬의 전치 행렬의 곱으로 분해하는 방법이다. 양의 정부호 대칭 행렬 <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> 에 대하여 촐레스키 분해는 다음과 같이 정의 된다. 수의 제곱근을 구하는 개념에 대응시켜서 이해하면 편하다.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%20=%20LL%5ET%0A"></p>
<p>여기서 L은 하삼각행렬을 나타낸다. 촐레스키 분해는 행렬 A가 양의 정부호 임을 전제로 한다. 촐레스키 분해로 A를 하삼각행렬의 곱으로 정보를 압축할 수 있다. 촐레스키 분해는 통계학, 수치해석학, 머신러닝 등에서 사용되는데 가장 대표적인 예가 다변수 정규분포의 표본을 생성하는 것이다. system of linear equation의 해를 구할 때도 사용된다.</p>
</section>
<section id="촐레스키-분해-구현" class="level3" data-number="1.2.2">
<h3 data-number="1.2.2" class="anchored" data-anchor-id="촐레스키-분해-구현"><span class="header-section-number">1.2.2</span> 촐레스키 분해 구현</h3>
<p><code>chol()</code> 함수를 이용해 촐레스키 분해를 수행할 수 있다.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># define a positive matrix</span></span>
<span id="cb12-2">cov_matrix</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    4   -2    1
[2,]   -2    3   -1
[3,]    1   -1    2</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1">upper_triangular_matrix<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chol</span>(cov_matrix)</span>
<span id="cb14-2">lower_triangular_matrix<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(upper_triangular_matrix)</span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># verify the decomposition</span></span>
<span id="cb14-5">lower_triangular_matrix<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(lower_triangular_matrix)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>     [,1] [,2] [,3]
[1,]    4   -2    1
[2,]   -2    3   -1
[3,]    1   -1    2</code></pre>
</div>
</div>
<p>모든 공분산 행렬은 positive semi definite인데 <code>cov_matrix</code>의 모든 대각원소가 양수이기 때문에 positive definite matrix가 된다.</p>
<p>촐레스키 분해는 multivariate normal distribution에서 sampling하여 난수를 발생시키는 원리를 이해하는데 도움이 된다.</p>
</section>
<section id="촐레스키-분해를-사용한-표본-생성" class="level3" data-number="1.2.3">
<h3 data-number="1.2.3" class="anchored" data-anchor-id="촐레스키-분해를-사용한-표본-생성"><span class="header-section-number">1.2.3</span> 촐레스키 분해를 사용한 표본 생성</h3>
<p>목표로 하는 다변수 정규분포의 공분산 행렬에 대해 촐레스키 분해를 수행하고, 표준 정규분포로부터 뽑은 표본에 분해된 행렬을 사용하여 선형변환을 하는 방식이다. random vector가 <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> 가 iid이고 표준 정규 분포를 따른 다고 했을 때 random vector, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D%20%5Csim%20N(%5Cbegin%7Bbmatrix%7D1//3//2%5Cend%7Bbmatrix%7D,%5Cbegin%7Bbmatrix%7D4&amp;-2&amp;1//-2&amp;3&amp;-1//1&amp;-1&amp;2%5Cend%7Bbmatrix%7D)"> 라고 한다면</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balinged%7D%0A%20%20%5Cmathbf%7By%7D&amp;=%5Cmathbf%7BL%7D%5Cmathbf%7Bx%7D+%5Cmathbf%7B%5Cmu%7D%20%5C%5C%0A%20%20E(%5Cmathbf%7By%7D)&amp;=%20%5Cmathbf%7BL%7DE(%5Cmathbf%7Bx%7D)+%5Cmathbf%7B%5Cmu%7D%20%5C%5C%0A%20%20Var(%5Cmathbf%7By%7D)&amp;=%20%5Cmathbf%7BL%7DVar(%5Cmathbf(x))%20%5Cmathbf%7BL%7D%5ET=%20%5Cmathbf%7BL%7DVar(%5Cmathbf(I))%20%5Cmathbf%7BL%7D%5ET=%5Cmathbf%7BL%7D%20%5Cmathbf%7BL%7D%5ET%20=%5CSigma%0A%5Cend%7Baligned%7D%0A"></p>
<p>이 성립한다.</p>
<p>더 쉬운 예제를 들면, <img src="https://latex.codecogs.com/png.latex?X%20%5Csim%20N(0,1)%20%5Cquadd%20Y%20%5Csim%20N(4,9)"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY=3X+4%0A"></p>
<p>의 선형식이 성립한다.</p>
<p>그러므로 data의 표본을 토대로 simulation을 할 때는 data의 표본 공분산 행렬을 구해 촐레스키 분해를 하여 L을 구한뒤 rnorm()을 변수의 갯 수 만큼 사용하고 데이터의 변수의 표본 벡터를 구해서 더해 주면 데이터의 분포에 기반한 시뮬래이션이 가능해진다.</p>
<div class="callout-tips">
<p><img src="https://latex.codecogs.com/png.latex?%0AY=A%5Cbegin%7Bbmatrix%7Drnorm(X_1)%20//rnorm(X_2)//rnorm(X_3)%5Cend%7Bbmatrix%7D%20+B%0A"></p>
<p>정규 분포를 따르는 random vectors에 어떤 행렬을 곱하거나 더해도 그 변환된 Y역시 다변수 정규분포를 따른다는 것이 알려져 있다.</p>
</div>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">set.seed</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">00</span>)</span>
<span id="cb16-2"></span>
<span id="cb16-3">random_samples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lower_triangular_matrix <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3000</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mean_vector</span>
<span id="cb16-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#위와 같은 식</span></span>
<span id="cb16-5">random_samples <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> lower_triangular_matrix <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>),<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rnorm</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>)),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">nrow=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mean_vector</span>
<span id="cb16-6"></span>
<span id="cb16-7">random_samples<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(random_samples)</span></code></pre></div>
</details>
</div>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BL%7D_%7B3%20%5Ctimes%203%7D%20%5Ctext%7Brandom_samples%7D_%7B3%20%5Ctimes%201000%7D%20+%20%5Ctext%7Bmean_vector%7D_%7B3%5Ctimes%201%7D%0A"></p>
<p><code>mean_vector</code>는 브로드캐스팅되어 앞의 두행렬의 연산결과의 각 열에 더해지게 됨.</p>
<p>sample은 아래와 같이 뽑히게 된다.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb17-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(random_samples)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>            [,1]       [,2]       [,3]
[1,] -0.07612761  4.2403547 -0.2827580
[2,] -1.22520465  2.6778132  2.5256458
[3,]  0.57189770  2.5652002  4.5131124
[4,]  3.71812120  2.2683683  0.9224851
[5,]  1.03533835 -0.4098458  2.7877527
[6,]  3.72684756  1.1950652  2.2052107</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb19-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#표본 공분산 행렬 추정</span></span>
<span id="cb19-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">cov</span>(random_samples)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]      [,2]      [,3]
[1,]  3.849209 -1.820943  1.031505
[2,] -1.820943  2.958023 -1.014896
[3,]  1.031505 -1.014896  2.030114</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb21-1">centered_X<span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">scale</span>(random_samples,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">center=</span>T,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">scale=</span>F)</span>
<span id="cb21-2"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000-1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">t</span>(centered_X)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%*%</span> centered_X</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>          [,1]      [,2]      [,3]
[1,]  3.849209 -1.820943  1.031505
[2,] -1.820943  2.958023 -1.014896
[3,]  1.031505 -1.014896  2.030114</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb23-1">random_samples[,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">hist</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/Mathmatics/linear_algebra/09.cholesky_decomposition_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
</div>


</section>
</section>
</section>

 ]]></description>
  <category>Mathematics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Mathmatics/linear_algebra/09.cholesky_decomposition.html</guid>
  <pubDate>Thu, 01 Jun 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Eigenvalue</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Mathmatics/linear_algebra/09.eigenvalues.html</link>
  <description><![CDATA[ 



<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mosaic)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(mvtnorm)</span></code></pre></div>
</details>
</div>
<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<p>Eigenvalues could be used for understanding characteristics or properties of a square matrix and determining what type of a quadratic form the matrix belongs to.</p>
<section id="definition" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="definition"><span class="header-section-number">1.1</span> Definition</h2>
<div id="def-eigenvalue" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 1 (Eigenvalues and Eigenvectors) </strong></span>Let <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> be an <img src="https://latex.codecogs.com/png.latex?n%20%C3%97%20n"> square matrix. A scalar <img src="https://latex.codecogs.com/png.latex?%5Clambda"> is called an eigenvalue of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> if there exists a non-zero vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv%7D"> such that <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BAv%7D=%5Clambda%5Cmathbf%7Bv%7D%0A"></p>
<p>Such a vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv%7D"> is called an eigenvector corresponding to <img src="https://latex.codecogs.com/png.latex?%5Clambda">.</p>
</div>
</section>
<section id="properties" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="properties"><span class="header-section-number">1.2</span> Properties</h2>
<ul>
<li>Eigenvalues are scalar values: Eigenvalues are scalars and represent the scaling factor by which the corresponding eigenvectors are stretched or shrunk when multiplied by a matrix.</li>
<li>When a matrix is ​​expressed in quadratic form, there exists a symmetric matrix that satisfies the uniqueness of the quadratic form and all eigenvalues ​​corresponding to the symmetric matrix having real numbers as elements are real numbers. Depending on the signs of the eigenvalues, a quadratic form can be classified into 5 types:
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is said to be a positive definite (PD) matrix if the eigenvalues of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> are all positive. <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%20%3E%200%20%5Ctext%7B%20iff%20%7D%20%5Clambda_%7B%5Ctext%7Bmin%7D%7D(%5Cmathbf%7BA%7D)%20%3E%200%0A"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is said to be a positive semi-definite (PSD) matrix if the eigenvalues of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> are not negative. <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%20%5Cge%200%20%5Ctext%7B%20iff%20%7D%20%5Clambda_%7B%5Ctext%7Bmin%7D%7D(%5Cmathbf%7BA%7D)%20%5Cge%200%0A"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is said to be a negative definite (ND) matrix if the eigenvalues of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> are all negative. <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%20%3C%200%20%5Ctext%7B%20iff%20%7D%20%5Clambda_%7B%5Ctext%7Bmax%7D%7D(%5Cmathbf%7BA%7D)%20%3C%200%0A"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is said to be a negative semi-definite (NSD) matrix if the eigenvalues of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> are not positive. <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%20%5Cle%200%20%5Ctext%7B%20iff%20%7D%20%5Clambda_%7B%5Ctext%7Bmax%7D%7D(%5Cmathbf%7BA%7D)%20%5Cle%200%0A"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is said to be a indefinite (NSD) matrix if the eigenvalues of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> have both signs. <img src="https://latex.codecogs.com/png.latex?%0A%5Cmathbf%7BA%7D%20%5Clessgtr%200%20%5Ctext%7B%20iff%20%7D%20%5Clambda_%7B%5Ctext%7Bmax%7D%7D(%5Cmathbf%7BA%7D)%20%5Clessgtr%200%0A"></li>
</ul></li>
<li>Sum of eigenvalues: The sum of the eigenvalues of a matrix is equal to the trace of the matrix, where the trace is the sum of the diagonal elements. <img src="https://latex.codecogs.com/png.latex?%0A%5Csum_%7Bi=1%7D%5En%20%5Clambda_i%20=%20%5Ctext%7Btr%7D(%5Cmathbf%7BA%7D)%0A">.</li>
<li>Product of eigenvalues: The product of the eigenvalues of a matrix is equal to the determinant of the matrix. <img src="https://latex.codecogs.com/png.latex?%0A%5Cprod_%7Bi=1%7D%5En%20%5Clambda_i%20=%20%5Cdet(%5Cmathbf%7BA%7D)=%7C%5Cmathbf%7BA%7D%7C%0A">.<br>
</li>
<li>Eigenvalues are solutions to the characteristic equation: For a square matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> of size <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n">, the eigenvalues <img src="https://latex.codecogs.com/png.latex?%5Clambda"> satisfy the characteristic equation <img src="https://latex.codecogs.com/png.latex?%5Cdet(%5Cmathbf%7BA%7D%20-%20%5Clambda%5Cmathbf%7BI%7D)%20=%200">, where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BI%7D"> is the identity matrix of size <img src="https://latex.codecogs.com/png.latex?n%5Ctimes%20n">.
<ul>
<li>The characteristic equation is an equation associated with a square matrix that helps determine its eigenvalues, which are crucial for understanding the behavior and properties of the matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D">. <img src="https://latex.codecogs.com/png.latex?%0A%5Cdet(%5Cmathbf%7BA%7D%20-%20%5Clambda%5Cmathbf%7BI%7D)%20=%200%0A"> The equation indicates that the matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%20-%20%5Clambda%5Cmathbf%7BI%7D"> does not have full rank and has a nontrivial null space.</li>
</ul></li>
<li>Eigenvalues of similar matrices: Similar matrices have the same eigenvalues. If two matrices <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BB%7D"> are similar (i.e., <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BPBP%7D%5E%7B-1%7D"> for some invertible matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BP%7D">), then they have the same eigenvalues.</li>
<li>Eigenvalues of triangular matrices: The eigenvalues of a triangular matrix are equal to its diagonal entries. In other words, for an upper triangular matrix, the eigenvalues are the elements on its main diagonal.</li>
</ul>
</section>
<section id="example" class="level2" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="example"><span class="header-section-number">1.3</span> Example</h2>
<p>Let <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> be the matrix</p>
<p>To find the eigenvalues of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A">, we solve the characteristic equation <img src="https://latex.codecogs.com/png.latex?%5Ctext%7Bdet%7D(%5Cmathbf%20A%20-%20%5Clambda%20%5Cmathbf%20I%20)%20=%200">, where I is the n × n identity matrix.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%20%20%5Ctext%7Bdet%7D(%5Cmathbf%20A%20-%20%5Clambda%20%5Cmathbf%20I%20)%0A%20%20&amp;=%0A%20%20%20%20%5Cbegin%7Bvmatrix%7D%0A%20%20%20%203%20-%20%5Clambda%20&amp;%201%20%5C%5C%0A%20%20%20%201%20&amp;%203%20-%20%5Clambda%0A%20%20%20%20%5Cend%7Bvmatrix%7D%20%5C%5C%0A%20%20&amp;=%0A%20%20(3%20-%20%5Clambda)(3%20-%20%5Clambda)%20-%201%20%5C%5C%0A%20%20&amp;=%20%5Clambda%5E2%20-%206%5Clambda%20+%208%20=%200%0A%5Cend%7Balign*%7D%0A"></p>
<p>Solving this quadratic equation gives us the eigenvalues of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20A">: <img src="https://latex.codecogs.com/png.latex?%5Clambda_1%20=%202"> and <img src="https://latex.codecogs.com/png.latex?%5Clambda_2%20=%204">.</p>
<p>To find the eigenvectors corresponding to <img src="https://latex.codecogs.com/png.latex?%5Clambda_1%20=%202">, we solve the equation <img src="https://latex.codecogs.com/png.latex?(%5Cmathbf%20A%20-%202%20%5Cmathbf%20I)%5Cmathbf%7Bv%7D%20=%20%5Cmathbf%7B0%7D">, where <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20I"> is the <img src="https://latex.codecogs.com/png.latex?2%20%5Ctimes%202"> identity matrix.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Balign*%7D%0A%20%20(%5Cmathbf%20A%20-%202%20%5Cmathbf%20I)%5Cmathbf%7Bv%7D%20=%0A%20%20%20%20%5Cbegin%7Bbmatrix%7D%0A%20%20%20%20%20%201%20&amp;%201%20%5C%5C%0A%20%20%20%20%20%201%20&amp;%201%0A%20%20%20%20%5Cend%7Bbmatrix%7D%0A%20%20%5Cbegin%7Bbmatrix%7D%0A%20%20%20%20x%20%5C%5C%0A%20%20%20%20y%0A%20%20%5Cend%7Bbmatrix%7D%20=%0A%20%20%5Cbegin%7Bbmatrix%7D%0A%20%20%20%200%20%5C%5C%0A%20%20%20%200%0A%20%20%5Cend%7Bbmatrix%7D%0A%5Cend%7Balign*%7D%0A"></p>
<p>Solving this system of equations gives us the eigenvectors corresponding to <img src="https://latex.codecogs.com/png.latex?%5Clambda_1%20=%202">: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv_1%7D%20=%20%5Cbegin%7Bbmatrix%7D%20-1%20%5C%5C%201%20%5Cend%7Bbmatrix%7D"></p>
<p>Similarly, for <img src="https://latex.codecogs.com/png.latex?%5Clambda_2%20=%204">, we solve the equation <img src="https://latex.codecogs.com/png.latex?(%5Cmathbf%20A%20-%204%5Cmathbf%20I)%5Cmathbf%7Bv%7D"> = <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7B0%7D"> to get the eigenvectors corresponding to <img src="https://latex.codecogs.com/png.latex?%5Clambda_2%20=%204">: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bv_2%7D%20=%20%5Cbegin%7Bbmatrix%7D%201%20%5C%5C%201%20%5Cend%7Bbmatrix%7D"></p>
<div class="panel-tabset">
<ul class="nav nav-tabs"><li class="nav-item"><a class="nav-link active" id="tabset-1-1-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-1" aria-controls="tabset-1-1" aria-selected="true">R</a></li><li class="nav-item"><a class="nav-link" id="tabset-1-2-tab" data-bs-toggle="tab" data-bs-target="#tabset-1-2" aria-controls="tabset-1-2" aria-selected="false">Python</a></li></ul>
<div class="tab-content">
<div id="tabset-1-1" class="tab-pane active" aria-labelledby="tabset-1-1-tab">
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1">PD <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-2">PSD <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-3">ND <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-4">NSD <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-5">Ind <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-6"></span>
<span id="cb2-7">sym_mat <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">matrix</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">c</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">12</span>,<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">ncol=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">byrow =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eigen</span>(sym_mat)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 18.138954  4.556363 -7.695317</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># trace</span></span>
<span id="cb4-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">diag</span>(sym_mat)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 15</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eigen</span>(sym_mat)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 15</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># product of eigenvalues : more convenient than using a for loop</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">exp</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sum</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">eigen</span>(sym_mat)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>values)))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] NaN</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">det</span>(sym_mat)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] -636</code></pre>
</div>
</div>
</div>
<div id="tabset-1-2" class="tab-pane" aria-labelledby="tabset-1-2-tab">
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define the matrix A</span></span>
<span id="cb12-4">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]])</span>
<span id="cb12-5"></span>
<span id="cb12-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate the eigenvalues and eigenvectors</span></span>
<span id="cb12-7">eigenvalues, eigenvectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linalg.eig(A)</span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Print the eigenvalues</span></span>
<span id="cb12-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Eigenvalues:"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Eigenvalues:</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> eigenvalue <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> eigenvalues:</span>
<span id="cb14-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(eigenvalue)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>1.381966011250105
3.618033988749895</code></pre>
</div>
</div>
</div>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>Mathematics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Mathmatics/linear_algebra/09.eigenvalues.html</guid>
  <pubDate>Fri, 26 May 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Measures of Risk: Relative Risk &amp; Odds Ratio</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Epidemilogy/relative_risk_odds_ratio.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<p>Knowing the relative risk and odds ratio provides important insights beyond just looking at the counts in a contingency table.</p>
<section id="motivation" class="level2" data-number="0.1">
<h2 data-number="0.1" class="anchored" data-anchor-id="motivation"><span class="header-section-number">0.1</span> Motivation</h2>
<p>Relative Risk (RR) and Odds Ratio (OR) provides a more comprehensive understanding of the relationship between an exposure and an outcome by quantifying the association between the exposure and the outcome.</p>
<p><strong>Relative Risk(RR)</strong></p>
<ul>
<li>Measures the strength of association between an exposure and an outcome.</li>
<li>Indicates the ratio of the risk of developing the outcome in the exposed group compared to the unexposed group.</li>
<li>Helps determine the magnitude of the effect of an exposure on the outcome.</li>
<li>Enables comparison of the risk between different groups or populations.</li>
<li>Allows for assessing the impact of interventions or treatments on the risk of the outcome.</li>
</ul>
<p><strong>Relative Risk(OR)</strong></p>
<ul>
<li>Estimates the odds of an event occurring in one group compared to another group.</li>
<li>Widely used in case-control studies and logistic regression.</li>
<li>Useful when the outcome is rare, as it approximates the relative risk.</li>
<li>Can be used to assess the strength of association between an exposure and an outcome.</li>
<li>Enables comparison of the odds between different groups or populations.</li>
</ul>
</section>
<section id="relative-risk" class="level2" data-number="0.2">
<h2 data-number="0.2" class="anchored" data-anchor-id="relative-risk"><span class="header-section-number">0.2</span> Relative Risk</h2>
<div id="def-risk" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 1 (Risk) </strong></span>The risk can be represented as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7Cc%7Cc%7D%0A&amp;%20%5Ctext%7BEvent%7D%20&amp;%20%5Ctext%7BNon-Event%7D%20%5C%5C%20%5Chline%0A%5Ctext%7BExposed%7D%20&amp;%20a%20&amp;%20b%20%5C%5C%0A%5Ctext%7BUnexposed%7D%20&amp;%20c%20&amp;%20d%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>The risk of the event occurring in the exposed group is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BRisk%7D_%5Ctext%7Bexposed%7D%20=%20%5Cfrac%7Ba%7D%7Ba%20+%20b%7D%0A"></p>
<p>Similarly, the risk of the event occurring in the unexposed group is given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BRisk%7D_%5Ctext%7Bunexposed%7D%20=%20%5Cfrac%7Bc%7D%7Bc%20+%20d%7D%0A"></p>
</div>
<section id="properties" class="level3" data-number="0.2.1">
<h3 data-number="0.2.1" class="anchored" data-anchor-id="properties"><span class="header-section-number">0.2.1</span> Properties</h3>
<ul>
<li>Probability: Risk is a measure of the probability or likelihood of an event or outcome occurring. It quantifies the chance that an undesired event will happen.</li>
<li>Magnitude: Risk can vary in terms of its magnitude, reflecting the potential impact or severity of the event. High-risk situations involve events with significant consequences, while low-risk situations involve events with minor consequences.</li>
<li>Contextual Dependence: Risk is influenced by the specific context or domain under consideration. The same event may be perceived as higher or lower risk depending on the circumstances, individuals involved, and external factors.</li>
<li>Subjectivity: Risk perception can be subjective, varying from person to person. Individuals may perceive and assess risk differently based on their experiences, knowledge, beliefs, and personal characteristics.</li>
<li>Uncertainty: Risk assessment often involves dealing with uncertainties, as it is challenging to predict outcomes with absolute certainty. Uncertainty arises from limited information, variability, and potential unknown factors.</li>
<li>Trade-offs: Risk often involves trade-offs, where accepting or managing one risk may introduce or mitigate another. Decision-makers may need to consider and weigh different risks against each other to make informed choices.</li>
<li>Time Dependency: Risk can change over time. It may evolve due to external factors, interventions, or natural processes. Long-term risks may require considering trends, projections, and potential future scenarios.</li>
</ul>
</section>
<section id="interpretation" class="level3" data-number="0.2.2">
<h3 data-number="0.2.2" class="anchored" data-anchor-id="interpretation"><span class="header-section-number">0.2.2</span> Interpretation</h3>
<section id="risk-in-exposed-group" class="level4" data-number="0.2.2.1">
<h4 data-number="0.2.2.1" class="anchored" data-anchor-id="risk-in-exposed-group"><span class="header-section-number">0.2.2.1</span> Risk in Exposed Group</h4>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BRisk%7D_%5Ctext%7Bexposed%7D%20=%20%5Cfrac%7Ba%7D%7Ba%20+%20b%7D%0A"></p>
<p>This represents the proportion of individuals in the exposed group who experience the event.</p>
<ul>
<li>If the risk is low (close to 0), it indicates a lower likelihood of the event occurring in the exposed group.</li>
<li>If the risk is high (close to 1), it suggests a higher likelihood of the event occurring in the exposed group.</li>
</ul>
</section>
<section id="risk-in-unexposed-group" class="level4" data-number="0.2.2.2">
<h4 data-number="0.2.2.2" class="anchored" data-anchor-id="risk-in-unexposed-group"><span class="header-section-number">0.2.2.2</span> Risk in Unexposed Group</h4>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BRisk%7D_%5Ctext%7Bexposed%7D%20=%20%5Cfrac%7Ba%7D%7Ba%20+%20b%7D%0A"></p>
<p>This represents the proportion of individuals in the unexposed group who experience the event.</p>
<ul>
<li>If the risk is low (close to 0), it indicates a lower likelihood of the event occurring in the unexposed group.</li>
<li>If the risk is high (close to 1), it suggests a higher likelihood of the event occurring in the unexposed group.</li>
</ul>
</section>
<section id="comparing-risks" class="level4" data-number="0.2.2.3">
<h4 data-number="0.2.2.3" class="anchored" data-anchor-id="comparing-risks"><span class="header-section-number">0.2.2.3</span> Comparing Risks</h4>
<p>Compare the risks between the exposed and unexposed groups to assess the association between the exposure and the event.</p>
<ul>
<li>If the risk in the exposed group is significantly higher than the risk in the unexposed group, it suggests a positive association. The exposure may be a risk factor for the event.</li>
<li>If the risk in the exposed group is significantly lower than the risk in the unexposed group, it suggests a negative association. The exposure may be protective against the event.</li>
<li>If the risks are similar between the exposed and unexposed groups, it suggests no significant association between the exposure and the event.</li>
</ul>
<div class="callout-note callout callout-style-default callout-captioned">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-caption-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Interpreting risk requires considering other factors such as study design, sample size, confidence intervals, and potential confounders. Additionally, the specific context and domain of the study should be taken into account when interpreting risk.</p>
<p>Remember to interpret risk in conjunction with other measures such as relative risk, odds ratio, and confidence intervals to gain a comprehensive understanding of the relationship between exposure and event occurrence.</p>
</div>
</div>
<div id="def-relative_risk" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 2 (Relative Risk) </strong></span>the relative risk (RR) is calculated by dividing the risk in the exposed group by the risk in the unexposed group.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BRelative%20Risk%20(RR)%7D%20=%20%5Cfrac%7B%7B%5Ctext%7BRisk%20in%20exposed%20group%7D%7D%7D%7B%7B%5Ctext%7BRisk%20in%20unexposed%20group%7D%7D%7D%0A"></p>
<p>The relative risk (RR) can be calculated as the formula: <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BRR%7D%20=%20%5Cfrac%7B%7B%5Cfrac%7Ba%7D%7B%7Ba+b%7D%7D%7D%7D%7B%7B%5Cfrac%7Bc%7D%7B%7Bc+d%7D%7D%7D%7D%0A"></p>
</div>
</section>
</section>
<section id="properties-1" class="level3" data-number="0.2.3">
<h3 data-number="0.2.3" class="anchored" data-anchor-id="properties-1"><span class="header-section-number">0.2.3</span> Properties</h3>
<ul>
<li>Comparison of Risks: Relative risk compares the risk of an outcome between two groups exposed to different levels of a factor or intervention. It provides a quantitative measure of the association between exposure and outcome.</li>
<li>Interpretability: Relative risk is easily interpretable as a ratio of risks. An RR of 1 indicates no difference in risk between the exposed and unexposed groups. An RR greater than 1 suggests an increased risk associated with exposure, while an RR less than 1 indicates a decreased risk.</li>
<li>Contextual Interpretation: The interpretation of relative risk depends on the specific context, exposure, outcome, and population under study.</li>
<li>Causality: Relative risk is a useful measure for assessing causal relationships between exposures and outcomes, although it does not establish causality alone. Additional evidence from other study designs and criteria for causality should be considered.</li>
<li>Directionality: Relative risk indicates the direction of the association between exposure and outcome. An RR greater than 1 signifies a positive association, indicating that exposure increases the risk of the outcome. An RR less than 1 indicates a negative association, suggesting a decreased risk with exposure.</li>
<li>Strength of Association: The magnitude of the relative risk reflects the strength of the association between exposure and outcome.</li>
<li>Confidence Interval: Relative risk is often reported with a confidence interval (CI) to quantify the uncertainty around the point estimate.</li>
<li>Temporality: Relative risk is typically measured in prospective or retrospective cohort studies, where exposure is assessed before the outcome occurrence. This temporal relationship supports the assessment of causality between exposure and outcome.</li>
<li>Effect Modification: Relative risk can be used to evaluate effect modification, where the strength of the association between exposure and outcome varies based on the levels of another factor. Stratified analyses can help identify effect modifiers.</li>
<li>Generalizability: The generalizability of relative risk depends on the study population, exposure assessment methods, outcome measurement, and other characteristics of the study. Generalizability should be considered when interpreting and applying relative risk estimates to other populations or settings.</li>
</ul>
</section>
<section id="interpretation-1" class="level3" data-number="0.2.4">
<h3 data-number="0.2.4" class="anchored" data-anchor-id="interpretation-1"><span class="header-section-number">0.2.4</span> Interpretation</h3>
<ul>
<li>RR = 1: If the relative risk is equal to 1, it indicates no difference in risk between the exposed and unexposed groups. In other words, the exposure does not have an impact on the outcome.</li>
<li>RR &gt; 1: A relative risk greater than 1 signifies an increased risk associated with exposure. This suggests that the exposed group has a higher risk of experiencing the outcome compared to the unexposed group.</li>
<li>RR &lt; 1: A relative risk less than 1 indicates a decreased risk associated with exposure. This suggests that the exposed group has a lower risk of experiencing the outcome compared to the unexposed group.</li>
<li>Magnitude: The higher the RR value, the stronger the association.
<ul>
<li>risk effect: an RR of 1.5 indicates a 50% higher risk in the exposed group compared to the unexposed group.</li>
<li>protective effect: an RR of 0.5 indicates a 50% lower risk in the exposed group compared to the unexposed group.</li>
</ul></li>
<li>Direction
<ul>
<li>An RR &gt; 1 indicates a positive association, suggesting that the exposure is a risk factor for the outcome.</li>
<li>An RR &lt; 1 indicates a negative association, suggesting that the exposure is protective against the outcome.</li>
</ul></li>
<li>Confidence Interval (CI): The relative risk is often reported with a confidence interval, which indicates the range of plausible values for the true relative risk. If the CI includes 1, it suggests that the observed association is not statistically significant, and the risk difference between the groups may be due to chance.</li>
<li>Clinical and Public Health Significance: When interpreting relative risk, consider the clinical or public health significance of the observed association. A small or modest relative risk may have limited practical importance, whereas a large relative risk may have substantial implications for intervention or preventive measures.</li>
</ul>
</section>
<section id="example" class="level3" data-number="0.2.5">
<h3 data-number="0.2.5" class="anchored" data-anchor-id="example"><span class="header-section-number">0.2.5</span> Example</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7Cc%7Cc%7Cc%7D%0A&amp;%20&amp;%20%5Ctext%7BOutcome%7D%20&amp;%20%5C%5C%0A&amp;%20&amp;%20%5Ctext%7BYes%7D%20&amp;%20%5Ctext%7BNo%7D%20%5C%5C%0A%5Chline%0A%5Ctext%7BExposure%7D%20&amp;%20%5Ctext%7BExposed%7D%20&amp;%2050%20&amp;%20100%20%5C%5C%0A&amp;%20%5Ctext%7BUnexposed%7D%20&amp;%2030%20&amp;%20120%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>The contingency table above represents the relationship between exposure and outcome. <img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BRR%7D%20=%20%5Cfrac%7B%7B%5Cfrac%7B%7B50%7D%7D%7B%7B50+100%7D%7D%7D%7D%7B%7B%5Cfrac%7B%7B30%7D%7D%7B%7B30+120%7D%7D%7D%7D%20=%20%5Cfrac%7B%7B50%20%5Ctimes%20(30+120)%7D%7D%7B%7B30%20%5Ctimes%20(50+100)%7D%7D%0A"></p>
<p>To interpret the relative risk:</p>
<ul>
<li>If RR = 1, there is no difference in risk between the exposed and unexposed groups.</li>
<li>If RR &gt; 1, the exposed group has a higher risk of the outcome compared to the unexposed group.</li>
<li>If RR &lt; 1, the exposed group has a lower risk of the outcome compared to the unexposed group.</li>
</ul>
<p>Let’s calculate the relative risk using the given values:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BRR%7D%20=%20%5Cfrac%7B%7B50%20%5Ctimes%20(30+120)%7D%7D%7B%7B30%20%5Ctimes%20(50+100)%7D%7D%20=%20%5Cfrac%7B%7B50%20%5Ctimes%20150%7D%7D%7B%7B30%20%5Ctimes%20150%7D%7D%20=%20%5Cfrac%7B%7B7500%7D%7D%7B%7B4500%7D%7D%20=%201.67%0A"></p>
<p>Based on the calculated RR of 1.67, we can conclude that the exposed group has a 1.67 times higher risk of the outcome compared to the unexposed group.</p>
</section>
</section>
<section id="odds-ratio" class="level2" data-number="0.3">
<h2 data-number="0.3" class="anchored" data-anchor-id="odds-ratio"><span class="header-section-number">0.3</span> Odds Ratio</h2>
<div id="def-odds" class="theorem definition">
<p><span class="theorem-title"><strong>Definition 3 (Odds) </strong></span>The odds are defined as the probability that the event will occur divided by the probability that the event will not occur a.k.a <img src="https://latex.codecogs.com/png.latex?%5Cfrac%7B%5Ctext%7BP%7D(%5Ctext%7BSucess%7D)%7D%7B%5Ctext%7BP%7D(%5Ctext%7BFailure%7D)%7D">. The odds can be denoted as:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cfrac%7B%5Ctext%7BP%7D(X=%5Ctext%7Bthe%20event%20will%20occur%7D)%7D%7B%5Ctext%7BP%7D(%5Coverline%7BX%7D=%5Ctext%7Bthe%20event%20will%20not%20occur%7D)%7D%20=%20%5Cfrac%7B%5Ctext%7BP%7D(X)%7D%7B1-%5Ctext%7BP%7D(X)%7D%0A">.</p>
<p>In other words, odds is a ratio of probabilities.</p>
<p>The odds can be calcuated as the formula:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Barray%7D%7Bc%7Cc%7Cc%7D%0A&amp;%20%5Ctext%7BEvent%7D%20&amp;%20%5Ctext%7BNon-Event%7D%20%5C%5C%20%5Chline%0A%5Ctext%7BExposed%7D%20&amp;%20a%20&amp;%20b%20%5C%5C%0A%5Ctext%7BUnexposed%7D%20&amp;%20c%20&amp;%20d%20%5C%5C%0A%5Cend%7Barray%7D%0A"></p>
<p>The odds of the event occurring in the exposed group are given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BOdds%7D_%5Ctext%7Bexposed%7D%20=%20%5Cfrac%7Ba%7D%7Bb%7D%0A"></p>
<p>Similarly, the odds of the event occurring in the unexposed group are given by:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BOdds%7D_%5Ctext%7Bunexposed%7D%20=%20%5Cfrac%7Bc%7D%7Bd%7D%0A"></p>
</div>
<section id="properties-2" class="level3" data-number="0.3.1">
<h3 data-number="0.3.1" class="anchored" data-anchor-id="properties-2"><span class="header-section-number">0.3.1</span> Properties</h3>
<ul>
<li>Ratio of Probabilities: Odds represent the ratio of the probability of an event occurring to the probability of the event not occurring. Mathematically, odds are defined as the probability of an event divided by the probability of its complement.</li>
<li>Range: Odds <img src="https://latex.codecogs.com/png.latex?%5Cin%20%5B0,%5Cinfty)">. An event with a probability of 0 corresponds to odds of 0, while an event with a probability of 1 corresponds to odds of infinity. Values between 0 and 1 represent odds less than 1, indicating the event is less likely to occur than not.</li>
<li>Interpretability: Odds are often interpreted as the number of times an event is likely to occur compared to the number of times it is unlikely to occur. For example, odds of 2:1 indicate that the event is twice as likely to occur as not to occur.</li>
<li>Non-symmetry: Odds are not symmetric around 1. For example, odds of 2:1 and 1:2 represent different scenarios, with the former indicating a higher likelihood of the event and the latter indicating a higher likelihood of the complement.</li>
<li>Independence: When events are independent, the odds of their joint occurrence can be calculated by multiplying the individual odds. In contrast, probabilities cannot be directly multiplied for independent events.</li>
</ul>
<p>Odds Ratios: The ratio of two odds is called an odds ratio. Odds ratios are commonly used to measure the association between exposure and outcome in case-control studies and logistic regression analysis.</p>
<p>Logarithmic Transformation: Odds are often transformed using logarithms for ease of analysis. The log-odds, also known as the logit, is commonly used in logistic regression models.</p>
<p>Probability-Odds Conversion: Odds can be converted back to probabilities using the formula: probability = odds / (1 + odds). This conversion allows for the interpretation of odds in terms of probabilities.</p>
<p>Common Use in Gambling: Odds have widespread use in the gambling industry to represent the likelihood of specific outcomes in games of chance, such as sports betting and casino games.</p>
<p>Interpretation Challenges: Odds are not as intuitively interpretable as probabilities, particularly when the odds deviate significantly from 1. Care must be taken when interpreting odds to avoid miscommunication or misunderstanding.</p>
<p>Understanding these properties of odds is essential for their proper application and interpretation in various fields of study. It is crucial to consider the specific context, statistical methods, and other measures of association when working with odds.</p>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-project-content-list" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Go to Project Content List</h1>
<p><a href="./docs/projects/index.qmd">Project Content List</a></p>
</section>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../content_list.qmd">Blog Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Epidemiology</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Epidemilogy/relative_risk_odds_ratio.html</guid>
  <pubDate>Mon, 22 May 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Airflow Introduction</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/01.intro.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="introduction" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Introduction</h1>
<ul>
<li>파이썬을 이용해 워크플로우를 만들고 관리할 수 있는 오픈소스 기반 워크플로우 관리 도구</li>
<li>2014년 에어비앤비에서 만든 워크플로우 관리 솔루션으로 현재는 Apache Open Source 재단에서 관리되고 있는 프로젝트</li>
<li>Airflow는 워크플로우를 DAG을 사용하여 정의하고, 관리하는 프로그램
<ul>
<li>자유도가 크고, 확장성이 좋은 워크플로우 관리 프로그램</li>
</ul></li>
</ul>
<section id="characteristics" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="characteristics"><span class="header-section-number">1.1</span> Characteristics</h2>
<div class="cell">
<div class="cell-output-display">
<div id="fig-workflow" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<div>
<svg width="672" height="480" viewbox="0.00 0.00 343.92 169.48" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 165.48)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-165.48 339.92,-165.48 339.92,4 -4,4"></polygon> <!-- REST API를 사용한 데이터를 받아 전처리 --> <g id="node1" class="node">
<title>
REST API를 사용한 데이터를 받아 전처리
</title>
<ellipse fill="none" stroke="black" cx="156.43" cy="-143.48" rx="156.37" ry="18"></ellipse> <text text-anchor="middle" x="156.43" y="-139.28" font-family="Times,serif" font-size="14.00">REST API를 사용한 데이터를 받아 전처리</text> </g> <!-- 기존 DB의 데이터 삭제 (중복 제거) --> <g id="node2" class="node">
<title>
기존 DB의 데이터 삭제 (중복 제거)
</title>
<ellipse fill="none" stroke="black" cx="200.45" cy="-86.15" rx="129.73" ry="18"></ellipse> <text text-anchor="middle" x="200.45" y="-81.95" font-family="Times,serif" font-size="14.00">기존 DB의 데이터 삭제 (중복 제거)</text> </g> <!-- REST API를 사용한 데이터를 받아 전처리&#45;&#45;기존 DB의 데이터 삭제 (중복 제거) --> <g id="edge1" class="edge">
<title>
REST API를 사용한 데이터를 받아 전처리–기존 DB의 데이터 삭제 (중복 제거)
</title>
<path fill="none" stroke="black" d="M170.36,-125.34C175.5,-118.65 181.32,-111.07 186.46,-104.37"></path> </g> <!-- 전처리한 데이터를 DB에 삽입 --> <g id="node3" class="node">
<title>
전처리한 데이터를 DB에 삽입
</title>
<ellipse fill="none" stroke="black" cx="224.56" cy="-18" rx="111.23" ry="18"></ellipse> <text text-anchor="middle" x="224.56" y="-13.8" font-family="Times,serif" font-size="14.00">전처리한 데이터를 DB에 삽입</text> </g> <!-- 기존 DB의 데이터 삭제 (중복 제거)&#45;&#45;전처리한 데이터를 DB에 삽입 --> <g id="edge2" class="edge">
<title>
기존 DB의 데이터 삭제 (중복 제거)–전처리한 데이터를 DB에 삽입
</title>
<path fill="none" stroke="black" d="M206.91,-67.89C210.37,-58.11 214.62,-46.1 218.08,-36.31"></path> </g> </g>
</svg>
</div>
<figcaption class="figure-caption">Figure&nbsp;1: Airflow Workflow Simple Example</figcaption>
</figure>
</div>
</div>
</div>
<ul>
<li>파이썬으로 제작된 도구이며 이용자가 워크플로우 생성시에도 파이썬으로 구현해야 함</li>
<li>하나의 워크플로우는 DAG(Directed Acyclic Graph) 이라 부르며 DAG 안에는 1개 이상의 Task가 존재
<ul>
<li>예를 들어, REST API로부터 데이터를 내려 받아 DB에 insert하려는 과제를 수행하기 위해 Figure&nbsp;1 와 같은 단계들이 필요하다.</li>
<li>각 각의 단계를 task라 하고 각 각 선/후행 단계가 있다. (1번 task <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 2번 task <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 3번 task)</li>
<li>이 tasks의 집합을 DAG이라고 한다.</li>
<li>Task간 선후행 연결이 가능하되 순환되지 않고 방향성을 가짐(=DAG)</li>
</ul></li>
<li>Cron 기반의 스케줄링
<ul>
<li>Linux에서 사용되는 스케쥴링으로 task들이 시작되어야 하는 시작 시간이나 주기를 설정</li>
</ul></li>
<li>모니터링 및 실패 작업에 대한 재실행 기능이 간편</li>
</ul>
<div id="fig-DAG_example" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/intro_dag-example.PNG" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Figure&nbsp;2: DAG Simple Example</figcaption>
</figure>
</div>
<ul>
<li>In Figure&nbsp;2, 초록색 테두리의 node는 성공한 task를 의미하고 분홍색 테두리의 node는 실패한 task를 의미한다. 위의 그림에는 없지만 회색 테두리는 queue (준비) 상태를 의미한다. Airflow에는 DAG이 일련의 task로 구성되어 있기 때문에 실행 상태도 성공, 실패 및 준비 상태같은 여러 종류가 있다. 나머지 상태는 뒷 부분에서 차차 다뤄보기로 한다.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/task-status.PNG" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Task Status</figcaption>
</figure>
</div>
</section>
<section id="motivation" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="motivation"><span class="header-section-number">1.2</span> Motivation</h2>
<section id="why-to-learn-airflow" class="level3" data-number="1.2.1">
<h3 data-number="1.2.1" class="anchored" data-anchor-id="why-to-learn-airflow"><span class="header-section-number">1.2.1</span> Why to Learn Airflow?</h3>
<div id="fig-comparison" class="quarto-layout-panel">
<figure class="figure">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell quarto-layout-cell-subref" style="flex-basis: 100.0%;justify-content: center;">
<div id="fig-workflowDemand" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/intro_airflow-demand.PNG" class="img-fluid figure-img" data-ref-parent="fig-comparison"></p>
<figcaption class="figure-caption">(a) Orchestrating Task Tools (a.k.a Data Workflows) Demand Comparison</figcaption>
</figure>
</div>
</div>
</div>
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell quarto-layout-cell-subref" style="flex-basis: 100.0%;justify-content: center;">
<div id="fig-workflowComputation" class="quarto-figure quarto-figure-center anchored">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/intro_airflow-comparison.PNG" class="img-fluid figure-img" data-ref-parent="fig-comparison"></p>
<figcaption class="figure-caption">(b) Orchestrating Task Tools Computation Comparison</figcaption>
</figure>
</div>
</div>
</div>
<p></p><figcaption class="figure-caption">Figure&nbsp;3: <a href="https://towardsdatascience.com/airflow-vs-luigi-vs-argo-vs-mlflow-vs-kubeflow-b3785dd1ed0c">Airflow Figure Reference: Airflow vs.&nbsp;Luigi vs.&nbsp;Argo vs.&nbsp;MLFlow vs.&nbsp;KubeFlow by Markus Schmitt</a></figcaption><p></p>
</figure>
</div>
<ul>
<li>Maturity: 성숙도로서 github에서 얼마나 많은 사람들이 관리하고 있는지 즉 community의 활성도를 나타내는 지표. 유료 서비스의 경우 user 가 제작사에게 패치를 요청할 수 있지만 open source에 경우 제작사가 없어 community의 활성도가 중요하다.</li>
<li>Popularity: github starts의 개수</li>
<li>Simplicity: workflow를 얼마나 쉽게 사용할 수 있는지에 대한 난이도로 airflow는 사용하기에 어려운 난이도를 보여준다.</li>
<li>Breadth: 확장성. 즉 얼마나 customizing할 수 있는지 보여주는 척도</li>
</ul>
<p>Figure&nbsp;3 을 보면, Figure&nbsp;3 (a) 에서 볼수 있듯이 최근 들어 airflow의 인기가 급증하는 것을 볼 수 있다. Figure&nbsp;3 (b) 에서 그 이유를 짐작할 수 있는데 airflow가 simplicity가 C 사용하기는 어렵지만 구현할 수 있는 폭 breadth가 높다 (Breadth: A). 즉, 다른 workflows에 비해 복잡한 코딩을 요구하는 만큼 그 자유도가 높다는 것을 짐작할 수 있다.</p>
</section>
</section>
<section id="strength" class="level2" data-number="1.3">
<h2 data-number="1.3" class="anchored" data-anchor-id="strength"><span class="header-section-number">1.3</span> Strength</h2>
<ul>
<li>파이썬에 익숙하다면 러닝 커브 빠르게 극복 가능</li>
<li>대규모 워크플로우 환경에서 부하 증가시 수평적 확장 가능한 Kubenetes 등 아키텍처 지원</li>
<li>파이썬에서 지원되는 라이브러리 활용하여 다양한 도구 컨트롤 가능 (GCP, AWS등 대다수 클라우드에서 제공하는 서비스)
<ul>
<li>GCP: Google Cloud Platform</li>
<li>AWS: Amazon Web Services</li>
</ul></li>
<li>Airflow에서 제공하는 파이썬 소스 기반으로 원하는 작업을 위한 커스터마이징이 가능 (오퍼레이터, Hook, 센서 등)</li>
</ul>
</section>
<section id="weakness" class="level2" data-number="1.4">
<h2 data-number="1.4" class="anchored" data-anchor-id="weakness"><span class="header-section-number">1.4</span> Weakness</h2>
<ul>
<li>실시간 워크플로우 관리에 적합치 않음 (최소 분 단위 실행)</li>
<li>워크플로우(DAG) 개수가 많아질 경우 모니터링이 쉽지 않음</li>
<li>워크플로우를 GUI환경에서 만들지 않기에 파이썬에 익숙하지 않다면 다루기 쉽지 않음 협업 환경에서 프로그래밍 표준이 없으면 유지관리가 쉽지 않음</li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/01.intro.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Environment Setting for Airflow</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/02.env_setting.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="wsl-installation" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> WSL Installation</h1>
<ul>
<li><a href="../../../../../docs/blog/posts/Engineering/WSL/01.wsl-install.html">WSL Installation</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/Linux/01.linux_comands.html">Frequently Used Linux Commands</a></li>
</ul>
</section>
<section id="docker-installation" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Docker Installation</h1>
<ul>
<li><a href="../../../../../docs/blog/posts/Engineering/Docker/01.docker_install.html">Docker Installation</a></li>
</ul>
</section>
<section id="airflow-installation" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Airflow Installation</h1>
<ul>
<li>Airflow 설치 방법은 여러가지가 존재하며 그 중 하나가 도커 설치임</li>
<li>도커 컴포즈 (docker compose)를 이용하여 한번에 쉽게 설치 가능
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html">Docker Compose를 이용하여 Airflow 설치 링크</a></li>
<li>docker compose: 여러 개의 도커 컨테이너 설정을 한방에 관리하기 위한 도커 확장 기술로 에어플로우를 설치하기 위한 도커 컨테이너 세팅 내용이 들어있음
<ul>
<li>airflow 자체도 여러개의 docker containers로 구성됨</li>
</ul></li>
<li>Docker Compose를 이용하여 Airflow 설치 링크의 <em>Fetching docker-compose.yaml</em> 부터 시작
<ul>
<li><code>curl -LfO 'https://airflow.apache.org/docs/apache-airflow/2.6.1/docker-compose.yaml'</code></li>
<li><code>ls</code>로 <code>docker-compose.yaml</code> 다운로드됐는지 확인</li>
<li><code>vi *</code> 로 <code>docker-compose.yaml</code> 열어보면 주석처리와 airflow의 설정내용들을 확인할 수 있다.</li>
</ul></li>
<li>Setting the right Airflow user
<ul>
<li>directories 만들기: <code>mkdir -p ./dags ./logs ./plugins ./config</code></li>
<li>.env 파일 만들기: <code>echo -e "AIRFLOW_UID=$(id -u)" &gt; .env</code></li>
<li><code>vi .env</code>: <code>AIRFLOW_UID=1000</code> 인 이유는 OS 계정의 uid가 1000이라는 뜻</li>
</ul></li>
<li>Initialize the database
<ul>
<li><code>sudo docker compose up airflow-init</code>: <code>sudo</code> 반드시 앞에 붙여야함. <code>exited with code 0</code>가 떠야 정상적으로 설치 된 것임 # Running Airflow</li>
</ul></li>
</ul></li>
<li>service 띄우기: <code>sudo docker compose up</code> 실행. <code>sudo</code> 반드시 앞에 붙여야함.</li>
<li>http 상태가 계속해서 업데이트 되야 airflow가 돌아가고 있는 것임. 계속해서 update되는 http command 닫으면 airflow멈춤. 두번째 터미널 열어서 작업해야함</li>
<li>두 번째 터미널 열고 <code>sudo docker ps</code> 실행하여 container list 상태 확인. 총 6개 올라와야 정상
<ul>
<li>airflow-airflow-worker-1</li>
<li>airflow-airflow-triggerer-1</li>
<li>airflow-airflow-webserver-1</li>
<li>airflow-airflow-scheduler-1</li>
<li>airflow-postgres-1</li>
<li>airflow-redis-1</li>
</ul></li>
<li>웹 브라우저 창에 <code>localhost:8080</code> 입력하여 airflow service창에 접속
<ul>
<li>default ID/PW: airflow/airflow</li>
<li>웹 브라우저에서 local로 airflow service 접속 원리
<ul>
<li>웹 브라우저는 local PC에 있음</li>
<li>airflow는 WSL안에 docker container로 실행되고 있음</li>
<li>이렇게 2개의 다른 공간이 연결될 수 있는 이유는 WSL은 기본적으로 local PC의 local host IP와 연결이 되어 있음</li>
<li>그래서 웹 브라우저에서 local로 <code>localhost:8080</code> 라고 입력하면 WSL에서 8080 port를 입력하는 것과 같은 효과가 있기 때문에 local 웹브라우저에서 WSL container로 들어갈 수 있는 것임.</li>
<li>sample DAGs이 만들어져 있는 것을 확인 할 수 있음</li>
</ul></li>
</ul></li>
<li>example_bash_operator DAG을 들어가 보면
<ul>
<li>Grid: 수행 이력을 보여주는 tab
<ul>
<li>DAG 이름 example_bash_operator 옆에 pause toggle를 활성화 시키면 unpaused 됨</li>
<li>Auto-regresh toggle 활성화 시키면 DAG이 한번 돌아감</li>
</ul></li>
<li>Graph: DAG을 구성하고 있는 tasks를 보여주는 tab. 각 각의 task가 색 별로 상태를 보여주고 있음</li>
<li>Calendar: 참고할 것</li>
<li>Task Duration: 참고할 것</li>
<li>Task Tries: 참고할 것</li>
<li>Landing Times: 참고할 것</li>
<li>Gantt: 참고할 것</li>
<li>Details: 참고할 것</li>
<li>Code: DAG을 구성하고 있는 python code를 볼 수 있음</li>
<li>Audit Log: 참고할 것</li>
</ul></li>
</ul>
</section>
<section id="airflow-development-environment-setting" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Airflow Development Environment Setting</h1>
<section id="개발-환경-권장-사양" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="개발-환경-권장-사양"><span class="header-section-number">4.1</span> 개발 환경 권장 사양</h2>
<ul>
<li>CPU: 4Core 이상</li>
<li>Memory: 16GB (권장-문제없음) / 8GB (최소-약간 버벅 거림)</li>
<li>WSL에서 다수의 컨테이너 실행시 메모리 점유율 상승할 수 있음
<ul>
<li>airflow service창과 WSL 창 닫고 다시 키면 어느 정도 메로리 점유율 낮아짐</li>
</ul></li>
</ul>
</section>
<section id="개발-환경-workflow" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="개발-환경-workflow"><span class="header-section-number">4.2</span> 개발 환경 workflow</h2>
<ul>
<li>user가 만든 DAG이 airflow까지 전달되는 workflow가 아래와 같이 묘사되어 있다.</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/development-workflow.PNG" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">개발 환경 workflow</figcaption>
</figure>
</div>
<ul>
<li>위의 그림에서 보면 6 containers가 있고 airflow setting 할때 <code>dags</code>, <code>logs</code>, <code>plugins</code>, <code>config</code> directories를 만들었는데 모두 airflow containers에 연결되어 있음
<ul>
<li>mount 의미: directory안에 file을 넣으면 containers가 file을 인식할 수 있음</li>
<li><strong>user가 만든 dag을 dags directory에 넣으면 airflow container가 dags안에 있는 dag을 인식하여 서비스에 띄어줌</strong></li>
</ul></li>
<li>개발환경 세팅의 목표
<ul>
<li>로컬 환경에서 만든 dag을 dags directory에 배포하여 containers가 user가 만든 dag을 인식하여 airflow서비스까지 띄우는 것이 목표</li>
<li><strong>다시 말해서, 그냥 로컬 환경에서 만든 dag을 dags directory에 배포하면 됨</strong></li>
</ul></li>
<li>Actions
<ol type="1">
<li>로컬 컴퓨터에 python interpreter 설치
<ul>
<li><strong>아무 python version을 설치하면 안되고 airflow containers가 쓰고있는 python version과 일치시켜야 함!</strong></li>
</ul></li>
<li>IDE Tool(VScode) 개발환경 설정</li>
<li>Github 레파지토리 생성</li>
<li>로컬 컴퓨터에 Python Airflow Libraries 설치</li>
<li>WSL에 Git 설치 및 git pull이 가능한 환경구성
<ul>
<li>git repository에 DAG을 만들어 push하여 dags directory에 pull이 되어 dag이 들어가게 하면 됨.</li>
</ul></li>
</ol></li>
</ul>
</section>
<section id="python-interpreter-installation" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="python-interpreter-installation"><span class="header-section-number">4.3</span> Python Interpreter Installation</h2>
<ul>
<li>Actions
<ol type="1">
<li>컨테이너에서 사용하는 파이썬 버전 확인
<ul>
<li>container안에 들어가기: <code>sudo docker exec -it {container-name or container-id} 명령어</code> <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> <code>sudo docker exec -it airflow-airflow-worker-1 bash</code>: <code>-it</code>는 session이 안 끊어지도록 유지해주는 옵션</li>
<li><code>python -V</code> 실행하여 python version 확인 : 현재 나의 python version은 <code>Python 3.7.16</code></li>
<li><code>ctrl D</code>로 exit</li>
</ul></li>
<li><a href="https://www.python.org/downloads/">파이썬 인터프리터 다운로드</a>
<ul>
<li>보안상의 업데이트 말곤 기능이 같기 때문에 <code>Python 3.7.16</code>대신 <code>Python 3.7.9</code> 설치하면 됨</li>
</ul></li>
<li>로컬 컴퓨터에 파이썬 설치
<ul>
<li>conda에 설치하고 싶으면 <code>conda create -n airflow python=3.7.9</code> or</li>
<li>global 환경에 설치하고 싶으면 <a href="https://www.python.org/downloads/release/python-379/">Windows x86-64 executable installer</a> 다운로드 및 설치</li>
</ul></li>
</ol></li>
</ul>
</section>
<section id="vscode-installation" class="level2" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="vscode-installation"><span class="header-section-number">4.4</span> VScode Installation</h2>
<ul>
<li>VScode란?
<ul>
<li>Microsoft사에서 2015년에 제작, 다양한 언어 개발을 돕는 IDE tool</li>
<li>Visual Studio 라는 IDE 툴과는 엄연히 다른 툴</li>
</ul></li>
<li>Actions
<ol type="1">
<li><a href="https://code.visualstudio.com/download">VScode 다운로드</a>
<ul>
<li>설치 마법사에서 추가 작업 선택란에 code로 열기 작업을 windows탐색기 파일의 상황에 맞는 메뉴에 추가 선택할 것. programming file을 열때 VScode가 디폴트가 되도록함</li>
</ul></li>
<li>VScode 설치, 파이썬 확장팩 설치</li>
<li>프로젝트 생성, 파이썬 가상환경 설정
<ul>
<li>VScode가 file이나 directory단위로 관리하는 IDE tool이라 프로젝트 생성 개념이 없음</li>
<li>windows에 프로젝트 directory하나 만들고 VScode에서 open folder로 열면 그 folder를 최상위 folder로 인식 (project 생성됨)</li>
</ul></li>
<li>python interpreter 설정
<ul>
<li>VScode &gt; Terminal &gt; New Terminal &gt; python version 확인</li>
</ul></li>
</ol></li>
<li>파이썬 가상환경
<ul>
<li>라이브러리 버전 충돌 방지를 위해 설치/사용되는 파이썬 인터프리터 환경을 격리시키는 기술</li>
<li>파이썬은 라이브러리 설치 시점에 따라서도 설치되는 버전이 상이한 경우가 많음</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/images/airflow/virtual-environment.PNG" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">가상 환경의 필요성</figcaption>
</figure>
</div>
<ul>
<li>python을 global 환경에 설치할 경우 위의 그림처럼 C,D프로젝트가 동시에 진행될 때 둘 중하나의 library version이 차이가 나면 old version의 library 로 진행되는 프로젝트는 에러가 발생함
<ul>
<li>2개의 다른 프로젝트가 같은 python interpreter를 바라보고 library를 설치하기 때문에 종속성 문제가 생김 (library 충돌 발생)</li>
<li>그래서 다른 가상환경 venv안에 다른 프로젝트를 할당해서 독립적으로 프로젝트를 진행하는게 일반적임</li>
</ul></li>
<li>python 가상환경 만들기
<ul>
<li>conda로 만들 경우 conda 설치 후 만들면 됨. <a href="https://github.com/conda-forge/miniforge">설치 링크</a></li>
<li>python에 있는 가상환경 생성 기능으로 만들 경우 <code>python -m airflow ./venv</code> 실행
<ul>
<li><code>./venv</code> directory에 python 설치하고 version 관리하겠다는 의미</li>
</ul></li>
</ul></li>
<li>VScode가 python 가상환경 참조하도록 설정
<ul>
<li>help&gt;show all commands or <code>ctrl+shift+p</code> 누른후 <code>interpreter</code> 입력하여 가상환경에 있는 python 클릭</li>
</ul></li>
<li>terminal 에서 가상환경 잘 잡혔는지 확인</li>
</ul></li>
</ul>
</section>
<section id="git-environment-setting" class="level2" data-number="4.5">
<h2 data-number="4.5" class="anchored" data-anchor-id="git-environment-setting"><span class="header-section-number">4.5</span> Git Environment Setting</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/Engineering/Git/01.git_install.html">Git Installation &amp; Environment Setting</a></li>
</ul>
</section>
<section id="airflow-library-installation" class="level2" data-number="4.6">
<h2 data-number="4.6" class="anchored" data-anchor-id="airflow-library-installation"><span class="header-section-number">4.6</span> Airflow Library Installation</h2>
<ul>
<li>Airflow 라이브러리 설치 대상과 설치 이유
<ul>
<li>설치 대상: 로컬 컴퓨터의 파이썬 가상환경(본인의 경우: airflow)</li>
<li>Why? Airflow DAG 개발을 위해 Airflow의 python class files 및 라이브러리들이 많기 때문에 필요</li>
</ul></li>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/Installation/installing-from-pypi.html">Airflow 라이브러리 설치 가이드</a>
<ul>
<li><code>conda activate airflow</code> 가상환경으로 들어감</li>
<li><code>pip install "apache-airflow[celery]==2.6.1" --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-2.6.1/constraints-3.7.txt"</code></li>
</ul></li>
<li>리눅스에서 파이썬 Airflow 라이브러리 설치시 그 자체로 Airflow 서비스 사용 가능
<ul>
<li>하지만 WSL에서 pip install 명령으로 Airflow를 설치하지 않는 이유?</li>
<li>pip install 로 Airflow 설치시 저사양의 아키텍처로 설치되며 여러 제약이 존재함 (Task를 한번에 1개씩만 실행 가능 등)</li>
<li>그러므로 docker로 설치해야 제약이 없음</li>
</ul></li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/02.env_setting.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Operator Baisc (Bash Operator)</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/03.operator_basic.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="dag-basic" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> DAG Basic</h1>
<section id="airflow-dag-생성" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="airflow-dag-생성"><span class="header-section-number">1.1</span> Airflow DAG 생성</h2>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 241.70 263.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 259)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-259 237.7,-259 237.7,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-247 136.43,-247 136.43,-8 8,-8"></polygon> <text text-anchor="middle" x="72.21" y="-230.4" font-family="Times,serif" font-size="14.00">DAG</text> </g> <!-- Bash_Operator --> <g id="node1" class="node">
<title>
Bash_Operator
</title>
<polygon fill="none" stroke="black" points="122.47,-214 21.96,-214 21.96,-178 122.47,-178 122.47,-214"></polygon> <text text-anchor="middle" x="72.21" y="-191.8" font-family="Times,serif" font-size="14.00">Bash_Operator</text> </g> <!-- Task1 --> <g id="node5" class="node">
<title>
Task1
</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-196" rx="34.77" ry="18"></ellipse> <text text-anchor="middle" x="199.06" y="-191.8" font-family="Times,serif" font-size="14.00">Task1</text> </g> <!-- Bash_Operator&#45;&gt;Task1 --> <g id="edge1" class="edge">
<title>
Bash_Operator-&gt;Task1
</title>
<path fill="none" stroke="black" d="M122.56,-196C132.88,-196 143.7,-196 153.82,-196"></path> <polygon fill="black" stroke="black" points="154.06,-199.5 164.06,-196 154.06,-192.5 154.06,-199.5"></polygon> </g> <!-- Python_Operator --> <g id="node2" class="node">
<title>
Python_Operator
</title>
<polygon fill="none" stroke="black" points="128.64,-160 15.79,-160 15.79,-124 128.64,-124 128.64,-160"></polygon> <text text-anchor="middle" x="72.21" y="-137.8" font-family="Times,serif" font-size="14.00">Python_Operator</text> </g> <!-- Task2 --> <g id="node6" class="node">
<title>
Task2
</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-142" rx="34.77" ry="18"></ellipse> <text text-anchor="middle" x="199.06" y="-137.8" font-family="Times,serif" font-size="14.00">Task2</text> </g> <!-- Python_Operator&#45;&gt;Task2 --> <g id="edge2" class="edge">
<title>
Python_Operator-&gt;Task2
</title>
<path fill="none" stroke="black" d="M128.7,-142C137.22,-142 145.91,-142 154.13,-142"></path> <polygon fill="black" stroke="black" points="154.25,-145.5 164.25,-142 154.25,-138.5 154.25,-145.5"></polygon> </g> <!-- S3_Operator --> <g id="node3" class="node">
<title>
S3_Operator
</title>
<polygon fill="none" stroke="black" points="115.75,-106 28.67,-106 28.67,-70 115.75,-70 115.75,-106"></polygon> <text text-anchor="middle" x="72.21" y="-83.8" font-family="Times,serif" font-size="14.00">S3_Operator</text> </g> <!-- Task3 --> <g id="node7" class="node">
<title>
Task3
</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-88" rx="34.77" ry="18"></ellipse> <text text-anchor="middle" x="199.06" y="-83.8" font-family="Times,serif" font-size="14.00">Task3</text> </g> <!-- S3_Operator&#45;&gt;Task3 --> <g id="edge3" class="edge">
<title>
S3_Operator-&gt;Task3
</title>
<path fill="none" stroke="black" d="M115.83,-88C128.19,-88 141.71,-88 154.15,-88"></path> <polygon fill="black" stroke="black" points="154.3,-91.5 164.3,-88 154.3,-84.5 154.3,-91.5"></polygon> </g> <!-- GCS_Operator --> <g id="node4" class="node">
<title>
GCS_Operator
</title>
<polygon fill="none" stroke="black" points="122.2,-52 22.23,-52 22.23,-16 122.2,-16 122.2,-52"></polygon> <text text-anchor="middle" x="72.21" y="-29.8" font-family="Times,serif" font-size="14.00">GCS_Operator</text> </g> <!-- Task4 --> <g id="node8" class="node">
<title>
Task4
</title>
<ellipse fill="none" stroke="black" cx="199.06" cy="-34" rx="34.77" ry="18"></ellipse> <text text-anchor="middle" x="199.06" y="-29.8" font-family="Times,serif" font-size="14.00">Task4</text> </g> <!-- GCS_Operator&#45;&gt;Task4 --> <g id="edge4" class="edge">
<title>
GCS_Operator-&gt;Task4
</title>
<path fill="none" stroke="black" d="M122.56,-34C132.88,-34 143.7,-34 153.82,-34"></path> <polygon fill="black" stroke="black" points="154.06,-37.5 164.06,-34 154.06,-30.5 154.06,-37.5"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li><p>workflow = DAG</p></li>
<li><p>Opeartor</p>
<ul>
<li>특정 행위를 할 수 있는 기능을 모아 놓은 클래스 또는 설계도</li>
</ul></li>
<li><p>Task</p>
<ul>
<li>operator 객체화(instantiation)되어 DAG에서 실행 가능한 object</li>
<li>방향성을 갖고 순환되지 않음 (DAG)</li>
</ul></li>
<li><p>Bash Operator</p>
<ul>
<li>Linux에서 shell script 명령을 수행하는 operator</li>
</ul></li>
<li><p>Python Operator</p>
<ul>
<li>python 함수를 실행하는 operator</li>
</ul></li>
<li><p>S3 Operator</p>
<ul>
<li>AWS의 S3 solution (object storage)을 control할 수 있는 operator</li>
</ul></li>
<li><p>GCS Operator</p>
<ul>
<li>GCP의 GCS solution (object storage)을 control할 수 있는 operator</li>
</ul></li>
<li><p>operators을 사용하여 dags을 작성하여 git을 통해 배포한다.</p></li>
<li><p>dag 작성 및 배포</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">  from __future__ import annotations</span>
<span id="cb1-2"></span>
<span id="cb1-3">  import datetime # python에는 datatime이라는 data type이 있음</span>
<span id="cb1-4">  import pendulum # datetime data type을 처리하는 library</span>
<span id="cb1-5"></span>
<span id="cb1-6">  from airflow import DAG</span>
<span id="cb1-7">  from airflow.operators.bash import BashOperator</span>
<span id="cb1-8">  from airflow.operators.empty import EmptyOperator</span>
<span id="cb1-9"></span>
<span id="cb1-10">  with DAG(</span>
<span id="cb1-11">      dag_id="dags_bash_operator", </span>
<span id="cb1-12">      # airflow service web 상에서 보여지는 이름, python file명과는 무관하지만 </span>
<span id="cb1-13">      # 실무에서는 일반적으로 python 파일명과 dag_id는 일치시키는 것이 다수의 dags 관리에 편리하다.</span>
<span id="cb1-14">      schedule="0 0 * * *", # "분 시 일 월 요일", cron schedule</span>
<span id="cb1-15">      start_date=pendulum.datetime(2023, 6, 9, tz="Asia/Seoul"), #dags이 언제 실행될지 설정</span>
<span id="cb1-16">      # UTC: 세계 표준시로 한국 보다 9시간이 느림. Asia/Seoul로 변경</span>
<span id="cb1-17">      catchup=False, # start_date를 현재보다 과거로 설정하게 될 경우 </span>
<span id="cb1-18">      # catchup=True면 과거 부터 현재까지 소급해서 실행. </span>
<span id="cb1-19">      # 시간 순서대로 실행하는게 아니라 병렬로 한번에 실행하기 때문에 메모리를 많이 잡아먹을 수 있음. </span>
<span id="cb1-20">      # 그래서 보통 False로 처리. catchup=False면 현재부터만 실행</span>
<span id="cb1-21">      # dagrun_timeout=datetime.timedelta(minutes=60), # dag이 60분 이상 구동시 실패가 되도록 설정</span>
<span id="cb1-22">      # tags=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"example", "example2"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, #airflow service web browser상 dag의 tag를 의미</span>
<span id="cb1-23">      ## dags 이 수 백개가 될 때 tag로 filtering 하면 용이함 </span>
<span id="cb1-24">      # params={"example_key": "example_value"}, # as dag: 이하 tasks를 정의할 때, </span>
<span id="cb1-25">      ## tasks에 공통 passing parameters가 있을 때 씀</span>
<span id="cb1-26">  ) as dag:</span>
<span id="cb1-27">      # <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">START howto_operator_bash</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-28">      bash_task1 = BashOperator(</span>
<span id="cb1-29">          task_id="bash_task1", # airflow web service의 dag graph에 표시될 task명</span>
<span id="cb1-30">          # task역시 task object name과 task_id를 일치시키는 것이 좋음</span>
<span id="cb1-31">          bash_command="echo this task works well!",</span>
<span id="cb1-32">      )</span>
<span id="cb1-33">      # <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">END howto_operator_bash</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-34">      bash_task2 = BashOperator(</span>
<span id="cb1-35">          task_id="bash_task2", </span>
<span id="cb1-36">          bash_command="echo $HOSTNAME", #$HOSTNAME: HOSTNAME 환경변수 호출</span>
<span id="cb1-37">          # WSL terminal 이름이 출력된다.</span>
<span id="cb1-38">      )</span>
<span id="cb1-39">      bash_task1 &gt;&gt; bash_task2 # 수행될 tasks의 관계 설정</span></code></pre></div></li>
<li><p>배포된 dags을 airflow containers과 연결 시키기 위해 <code>docker-compose.yaml</code> 실행</p>
<ul>
<li><code>vi docker-compose.yaml</code> 실행 후 <code>docker-compose.yaml</code> 안에서 <code>Volumns</code> 항목이 wsl의 directory와 container directory를 연결(mount)해주는 요소</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">Volumes</span>
<span id="cb2-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags</span>
<span id="cb2-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs</span>
<span id="cb2-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config</span>
<span id="cb2-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins</span></code></pre></div>
<ul>
<li><p>위와 같이 Volumns 항목이 뜨는데 <code>:</code>을 기준으로 왼쪽이 WSL directories(volumns), 오른쪽이 Docker container directories(volumns)</p></li>
<li><p>다른 WSL창을 열어 <code>echo ${AIRFLOW_PROJ_DIR:-.}</code> 실행하면 <code>AIRFLOW_PROJ_DIR</code>에 값이 없기 때문에 <code>.</code> 출력됨</p>
<ul>
<li><code>AIRFLOW_PROJ_DIR:-.</code> : shell script문법으로 <code>AIRFLOW_PROJ_DIR</code>에 값이 있으면 출력하고 없으면 <code>.</code>을 출력하라는 의미</li>
<li><code>echo AIRFLOW_PROJ_DIR</code>: 아무것도 출력 안됨</li>
</ul></li>
<li><p><code>${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags</code>는 <code>./dags</code>를 <code>/opt/airflow/dags</code>에 연결시키라는 의미</p>
<ul>
<li><code>./</code>: <code>docker-compose.yaml</code>이 위치하고있는 현재 directory를 의미</li>
</ul></li>
<li><p>배포된 dags를 자동으로 docker container에 연동시키기 위해 <code>Volumns</code>을 다음과 같이 편집</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">  volumes:</span>
<span id="cb3-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags</span>
<span id="cb3-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs</span>
<span id="cb3-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config</span>
<span id="cb3-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    - </span>${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins</span></code></pre></div></li>
<li><p>새로운 dags 배포할 때마다 airflow service 껐다가 켜야 한다.</p></li>
</ul></li>
<li><p>airflow service 껐다 켜서 잘 반영됐는지 확인</p>
<ul>
<li>docker가 설치된 wsl directory이동 먼저 할 것</li>
<li>airflow service 끄기: <code>sudo docker compose down</code></li>
<li>airflow service 켜기: <code>sudo docker compose up</code></li>
</ul></li>
<li><p>airflow web service상에서 dags이 잘 mount 되었는지 확인</p>
<ul>
<li>기존적으로 dags은 airflow web service상에 올라올 때 unpaused 상태로 올라옴</li>
<li>하지만 schedule이 걸려있는 dags은 unpaused상태에서 한번 돌고 올라옴</li>
<li>dag을 클릭하면 긴 녹색 막대기를 누르면 수행된 schedule내용이 나오고</li>
<li>각 각의 task에 대응되는 녹색 네모 박스를 누르면 결과들을 조회할 수 있다.
<ul>
<li>네모 박스를 누르고 log를 누르면 결과가 자세히 조회된다.</li>
<li><code>bash_task2</code> 의 <code>bash_command="echo $HOSTNAME"</code> 의 결과값으로 조회된 값은 docker worker container id 를 의미한다.
<ul>
<li>하지만 본인의 경우, airflow web service에서 <code>794f3b56824a</code>가 출력된 것을 확인했고</li>
<li><code>sudo docker ps</code>로 container ID를 확인한 결과 <code>airflow-airflow-worker-1</code> 의 <code>32092b201878</code> 로 달랐다.</li>
</ul></li>
<li>실제 worker container로 들어가 <code>echo $HOSTNAME</code> 실행하면 worker container id 출력되어야 함
<ul>
<li>worker container로 들어가기: <code>sudo docker exec -it container-name bash</code> <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> 본인의 경우: <code>sudo docker exec -it airflow-airflow-worker-1 bash</code> 이 과정이 dag을 돌린과정과 같은 mechanism임</li>
<li><code>echo $HOSTNAME</code> 실행 : <code>32092b201878</code> 출력됨 (어쨌든 airflow web service상의 <code>794f3b56824a</code>와 달랐음)</li>
<li><code>sudo docker exec -it 794f3b56824a bash</code> 결과 Error response from daemon: No such container: 794f3b56824a 라는 에러메세지 뜸</li>
</ul></li>
<li>즉, worker container가 실제 <code>task</code>를 처리하는 것을 볼 수 있었다.</li>
</ul></li>
</ul></li>
</ul>
</section>
<section id="subject-of-task-performance" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="subject-of-task-performance"><span class="header-section-number">1.2</span> Subject of Task Performance</h2>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 453.00 367.20" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 363.2)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-363.2 449,-363.2 449,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-351.2 437,-351.2 437,-8 8,-8"></polygon> <text text-anchor="middle" x="222.5" y="-334.6" font-family="Times,serif" font-size="14.00">Task Process</text> </g> <!-- Scheduler --> <g id="node1" class="node">
<title>
Scheduler
</title>
<polygon fill="none" stroke="black" points="238.98,-318.4 167.02,-318.4 167.02,-282.4 238.98,-282.4 238.98,-318.4"></polygon> <text text-anchor="middle" x="203" y="-296.2" font-family="Times,serif" font-size="14.00">Scheduler</text> </g> <!-- Scheduler&#45;&gt;Scheduler --> <g id="edge3" class="edge">
<title>
Scheduler-&gt;Scheduler
</title>
<path fill="none" stroke="black" d="M239.08,-308.61C249.21,-308.25 256.99,-305.51 256.99,-300.4 256.99,-297.2 253.95,-294.94 249.2,-293.6"></path> <polygon fill="black" stroke="black" points="249.47,-290.1 239.08,-292.19 248.5,-297.03 249.47,-290.1"></polygon> <text text-anchor="middle" x="306.55" y="-296.2" font-family="Times,serif" font-size="14.00">3.check start time</text> </g> <!-- DAG_file --> <g id="node2" class="node">
<title>
DAG_file
</title>
<polygon fill="none" stroke="black" points="122.99,-229.6 51.01,-229.6 51.01,-193.6 122.99,-193.6 122.99,-229.6"></polygon> <text text-anchor="middle" x="87" y="-207.4" font-family="Times,serif" font-size="14.00">DAG_file</text> </g> <!-- Scheduler&#45;&gt;DAG_file --> <g id="edge1" class="edge">
<title>
Scheduler-&gt;DAG_file
</title>
<path fill="none" stroke="black" d="M174.11,-282.39C165.32,-276.91 155.74,-270.64 147.29,-264.4 135.6,-255.79 123.34,-245.51 112.95,-236.38"></path> <polygon fill="black" stroke="black" points="115.21,-233.71 105.41,-229.68 110.56,-238.94 115.21,-233.71"></polygon> <text text-anchor="middle" x="172.86" y="-251.8" font-family="Times,serif" font-size="14.00">1.parsing</text> </g> <!-- Queue --> <g id="node4" class="node">
<title>
Queue
</title>
<polygon fill="none" stroke="black" points="230,-229.6 176,-229.6 176,-193.6 230,-193.6 230,-229.6"></polygon> <text text-anchor="middle" x="203" y="-207.4" font-family="Times,serif" font-size="14.00">Queue</text> </g> <!-- Scheduler&#45;&gt;Queue --> <g id="edge4" class="edge">
<title>
Scheduler-&gt;Queue
</title>
<path fill="none" stroke="black" d="M203,-282.25C203,-270.12 203,-253.62 203,-239.72"></path> <polygon fill="black" stroke="black" points="206.5,-239.71 203,-229.71 199.5,-239.71 206.5,-239.71"></polygon> </g> <!-- Meta_DB --> <g id="node5" class="node">
<title>
Meta_DB
</title>
<polygon fill="none" stroke="black" points="309.71,-52 238.29,-52 238.29,-16 309.71,-16 309.71,-52"></polygon> <text text-anchor="middle" x="274" y="-29.8" font-family="Times,serif" font-size="14.00">Meta_DB</text> </g> <!-- Scheduler&#45;&gt;Meta_DB --> <g id="edge2" class="edge">
<title>
Scheduler-&gt;Meta_DB
</title>
<path fill="none" stroke="black" d="M221.58,-282.05C244.31,-259.7 282.19,-218.59 302,-175.6 321.9,-132.43 339.89,-112.7 319,-70 317.09,-66.1 314.52,-62.51 311.56,-59.23"></path> <polygon fill="black" stroke="black" points="313.76,-56.5 304.09,-52.17 308.95,-61.59 313.76,-56.5"></polygon> <text text-anchor="middle" x="362.49" y="-163" font-family="Times,serif" font-size="14.00">2.save information</text> </g> <!-- Worker --> <g id="node3" class="node">
<title>
Worker
</title>
<polygon fill="yellow" stroke="black" points="232.25,-140.8 173.75,-140.8 173.75,-104.8 232.25,-104.8 232.25,-140.8"></polygon> <text text-anchor="middle" x="203" y="-118.6" font-family="Times,serif" font-size="14.00">Worker</text> </g> <!-- DAG_file&#45;&gt;Worker --> <g id="edge6" class="edge">
<title>
DAG_file-&gt;Worker
</title>
<path fill="none" stroke="black" d="M64.45,-193.49C53.53,-183.12 44.48,-169.82 53.22,-158.8 66.74,-141.76 123.73,-132.23 163.37,-127.56"></path> <polygon fill="black" stroke="black" points="163.99,-131.01 173.54,-126.42 163.21,-124.05 163.99,-131.01"></polygon> <text text-anchor="middle" x="125.89" y="-163" font-family="Times,serif" font-size="14.00">5.Processing after reading</text> </g> <!-- Worker&#45;&gt;Meta_DB --> <g id="edge7" class="edge">
<title>
Worker-&gt;Meta_DB
</title>
<path fill="none" stroke="black" d="M208.23,-104.72C212.09,-93.99 218.13,-80.28 226.46,-70 229.76,-65.92 233.64,-62.08 237.74,-58.53"></path> <polygon fill="black" stroke="black" points="240.16,-61.08 245.79,-52.11 235.79,-55.61 240.16,-61.08"></polygon> <text text-anchor="middle" x="272.27" y="-74.2" font-family="Times,serif" font-size="14.00">6.Results update</text> </g> <!-- Queue&#45;&gt;Worker --> <g id="edge5" class="edge">
<title>
Queue-&gt;Worker
</title>
<path fill="none" stroke="black" d="M203,-193.45C203,-181.32 203,-164.82 203,-150.92"></path> <polygon fill="black" stroke="black" points="206.5,-150.91 203,-140.91 199.5,-150.91 206.5,-150.91"></polygon> <text text-anchor="middle" x="251.99" y="-163" font-family="Times,serif" font-size="14.00">4.start instruction</text> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li>scheduler
<ul>
<li>airflow에서 brain역할
<ol type="1">
<li>parsing: a user가 만든 dag 파일을 읽어들여 문법적 오류 여부와 tasks 간의 관계를 분석</li>
<li>save information: DAG Parsing 후 DB에 정보저장 (tasks, task relations, schedule, etc.)</li>
<li>check start time: DAG 시작 실행 시간 확인</li>
<li>start instruction: DAG 시작 실행 시간마다 worker에 실행 지시</li>
</ol>
<ul>
<li>scheduler와 workder 사이에 queue 상태가 있을 수 있음</li>
</ul></li>
</ul></li>
<li>worker (Worker Container)
<ul>
<li>airflow 처리 주체 (subject)
<ol start="5" type="1">
<li>Processing after reading: scheduler가 시킨 DAG 파일을 찾아 읽고 처리</li>
<li>Results update: 처리가 되기 전/후를 Meta DB에 update함</li>
</ol></li>
</ul></li>
</ul>
</section>
</section>
<section id="cron-schedule" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Cron Schedule</h1>
<section id="cron-scheduling" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="cron-scheduling"><span class="header-section-number">2.1</span> Cron Scheduling</h2>
<ul>
<li>task가 실행되어야 하는 시간(주기)을 정하기 위한 다섯개의 필드로 구성된 문자열</li>
<li>Cron을 이용하면 왠만한 scheduling 모두 가능</li>
</ul>
<p><code>{minutes} {hour} {day} {month} {weekday}</code></p>
<table class="table">
<colgroup>
<col style="width: 13%">
<col style="width: 27%">
<col style="width: 59%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Number</th>
<th style="text-align: center;">Special Characters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">1</td>
<td style="text-align: center;">*</td>
<td>모든 값</td>
</tr>
<tr class="even">
<td style="text-align: center;">2</td>
<td style="text-align: center;">-</td>
<td>범위 지정</td>
</tr>
<tr class="odd">
<td style="text-align: center;">3</td>
<td style="text-align: center;">,</td>
<td>여러 값 지정</td>
</tr>
<tr class="even">
<td style="text-align: center;">4</td>
<td style="text-align: center;">/</td>
<td>증가값 지정. staring-value/ending-value</td>
</tr>
<tr class="odd">
<td style="text-align: center;">5</td>
<td style="text-align: center;">L</td>
<td>마지막 값 (일, 요일에만 설정 가능) <br> * 일에 L 입력시 해당 월의 마지막 일 의미 <br> ※ 요일에 L 입력시 토요일 의미</td>
</tr>
<tr class="even">
<td style="text-align: center;">6</td>
<td style="text-align: center;">#</td>
<td>몇 번째 요일인지 지정</td>
</tr>
</tbody>
</table>
<table class="table">
<colgroup>
<col style="width: 20%">
<col style="width: 33%">
<col style="width: 46%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Cron schedule</th>
<th>Description</th>
<th>Note</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">15 2 * * *</td>
<td>매일 02시 15분에 도는 daily batch</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">0 * * * *</td>
<td>매시 정각에 도는 시간 단위 batch</td>
<td></td>
</tr>
<tr class="odd">
<td style="text-align: left;">0 0 1 * *</td>
<td>매월 1일 0시 0분 도는 monthly batch</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">10 1 * * 1</td>
<td>매주 월요일 1시 10분에 도는 weekly batch</td>
<td>0: 일요일, 1: 월요일, 2: 화요일, 3:수요일, 4: 목요일, 5: 금요일, 6: 토요일</td>
</tr>
<tr class="odd">
<td style="text-align: left;">0 9-18 * * *</td>
<td>매일 9시부터 18시까지 정각마다 도는 daily batch</td>
<td>보통 이렇게 scheduling하지는 않음. 하지만 구현할 수 있음</td>
</tr>
<tr class="even">
<td style="text-align: left;">0 1 1,2,3 * *</td>
<td>매월 1일, 2일 3일만 1시에 도는 monthly batch</td>
<td>보통 이렇게 scheduling하지는 않음. 하지만 구현할 수 있음</td>
</tr>
<tr class="odd">
<td style="text-align: left;">*/30 * * *</td>
<td>삼십분마다 (0분, 30분)</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">10-59/30 * * * *</td>
<td>10분부터 삼십분마다 (10분, 40분에 도는 작업)</td>
<td></td>
</tr>
<tr class="odd">
<td style="text-align: left;">10 1 * * 1-5</td>
<td>평일만 01시 10분</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">0 */2 * * *</td>
<td>2시간 마다 (0시, 02시, 04시 …)</td>
<td>1-23/2: 1시부터 2시간 마다</td>
</tr>
<tr class="odd">
<td style="text-align: left;">0 0 */2 * *</td>
<td>짝수일 0시 0분</td>
<td></td>
</tr>
<tr class="even">
<td style="text-align: left;">10 1 L * *</td>
<td>매월 마지막 일 01시 10분에 도는 montly batch</td>
<td>빈번하게 사용되는 schedule</td>
</tr>
<tr class="odd">
<td style="text-align: left;">10 1 * * 6#3</td>
<td>매월 세 번째 토요일 01시 10분 도는 montly batch</td>
<td></td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="task-dependenciesconnection" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Task Dependencies(Connection)</h1>
<section id="task-connection-methods" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="task-connection-methods"><span class="header-section-number">3.1</span> Task Connection Methods</h2>
<ul>
<li>Task 연결 방법 종류
<ul>
<li>&gt;&gt;, &lt;&lt; 사용하기 (Airflow 공식 추천방식)</li>
<li>함수 사용하기</li>
</ul></li>
<li>복잡한 Task 는 어떻게 연결하는가?</li>
</ul>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 454.00 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 450,-205 450,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 438,-193 438,-8 8,-8"></polygon> <text text-anchor="middle" x="223" y="-176.4" font-family="Times,serif" font-size="14.00">Task Connection</text> </g> <!-- task1 --> <g id="node1" class="node">
<title>
task1
</title>
<polygon fill="none" stroke="black" points="70,-133 16,-133 16,-97 70,-97 70,-133"></polygon> <text text-anchor="middle" x="43" y="-110.8" font-family="Times,serif" font-size="14.00">task1</text> </g> <!-- task2 --> <g id="node2" class="node">
<title>
task2
</title>
<polygon fill="none" stroke="black" points="160,-106 106,-106 106,-70 160,-70 160,-106"></polygon> <text text-anchor="middle" x="133" y="-83.8" font-family="Times,serif" font-size="14.00">task2</text> </g> <!-- task1&#45;&gt;task2 --> <g id="edge2" class="edge">
<title>
task1-&gt;task2
</title>
<path fill="none" stroke="black" d="M70.4,-106.9C78.48,-104.42 87.51,-101.65 96.1,-99.01"></path> <polygon fill="black" stroke="black" points="97.39,-102.28 105.92,-96 95.33,-95.59 97.39,-102.28"></polygon> </g> <!-- task3 --> <g id="node3" class="node">
<title>
task3
</title>
<polygon fill="none" stroke="black" points="160,-160 106,-160 106,-124 160,-124 160,-160"></polygon> <text text-anchor="middle" x="133" y="-137.8" font-family="Times,serif" font-size="14.00">task3</text> </g> <!-- task1&#45;&gt;task3 --> <g id="edge1" class="edge">
<title>
task1-&gt;task3
</title>
<path fill="none" stroke="black" d="M70.4,-123.1C78.48,-125.58 87.51,-128.35 96.1,-130.99"></path> <polygon fill="black" stroke="black" points="95.33,-134.41 105.92,-134 97.39,-127.72 95.33,-134.41"></polygon> </g> <!-- task4 --> <g id="node4" class="node">
<title>
task4
</title>
<polygon fill="none" stroke="black" points="250,-106 196,-106 196,-70 250,-70 250,-106"></polygon> <text text-anchor="middle" x="223" y="-83.8" font-family="Times,serif" font-size="14.00">task4</text> </g> <!-- task2&#45;&gt;task4 --> <g id="edge3" class="edge">
<title>
task2-&gt;task4
</title>
<path fill="none" stroke="black" d="M160.4,-88C168.39,-88 177.31,-88 185.82,-88"></path> <polygon fill="black" stroke="black" points="185.92,-91.5 195.92,-88 185.92,-84.5 185.92,-91.5"></polygon> </g> <!-- task3&#45;&gt;task4 --> <g id="edge4" class="edge">
<title>
task3-&gt;task4
</title>
<path fill="none" stroke="black" d="M160.4,-125.8C168.83,-120.63 178.29,-114.82 187.22,-109.34"></path> <polygon fill="black" stroke="black" points="189.23,-112.22 195.92,-104 185.57,-106.25 189.23,-112.22"></polygon> </g> <!-- task6 --> <g id="node6" class="node">
<title>
task6
</title>
<polygon fill="none" stroke="black" points="340,-79 286,-79 286,-43 340,-43 340,-79"></polygon> <text text-anchor="middle" x="313" y="-56.8" font-family="Times,serif" font-size="14.00">task6</text> </g> <!-- task4&#45;&gt;task6 --> <g id="edge6" class="edge">
<title>
task4-&gt;task6
</title>
<path fill="none" stroke="black" d="M250.4,-79.9C258.48,-77.42 267.51,-74.65 276.1,-72.01"></path> <polygon fill="black" stroke="black" points="277.39,-75.28 285.92,-69 275.33,-68.59 277.39,-75.28"></polygon> </g> <!-- task5 --> <g id="node5" class="node">
<title>
task5
</title>
<polygon fill="none" stroke="black" points="160,-52 106,-52 106,-16 160,-16 160,-52"></polygon> <text text-anchor="middle" x="133" y="-29.8" font-family="Times,serif" font-size="14.00">task5</text> </g> <!-- task5&#45;&gt;task4 --> <g id="edge5" class="edge">
<title>
task5-&gt;task4
</title>
<path fill="none" stroke="black" d="M160.4,-50.2C168.83,-55.37 178.29,-61.18 187.22,-66.66"></path> <polygon fill="black" stroke="black" points="185.57,-69.75 195.92,-72 189.23,-63.78 185.57,-69.75"></polygon> </g> <!-- task8 --> <g id="node8" class="node">
<title>
task8
</title>
<polygon fill="none" stroke="black" points="430,-79 376,-79 376,-43 430,-43 430,-79"></polygon> <text text-anchor="middle" x="403" y="-56.8" font-family="Times,serif" font-size="14.00">task8</text> </g> <!-- task6&#45;&gt;task8 --> <g id="edge8" class="edge">
<title>
task6-&gt;task8
</title>
<path fill="none" stroke="black" d="M340.4,-61C348.39,-61 357.31,-61 365.82,-61"></path> <polygon fill="black" stroke="black" points="365.92,-64.5 375.92,-61 365.92,-57.5 365.92,-64.5"></polygon> </g> <!-- task7 --> <g id="node7" class="node">
<title>
task7
</title>
<polygon fill="none" stroke="black" points="250,-52 196,-52 196,-16 250,-16 250,-52"></polygon> <text text-anchor="middle" x="223" y="-29.8" font-family="Times,serif" font-size="14.00">task7</text> </g> <!-- task7&#45;&gt;task6 --> <g id="edge7" class="edge">
<title>
task7-&gt;task6
</title>
<path fill="none" stroke="black" d="M250.4,-42.1C258.48,-44.58 267.51,-47.35 276.1,-49.99"></path> <polygon fill="black" stroke="black" points="275.33,-53.41 285.92,-53 277.39,-46.72 275.33,-53.41"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<section id="사용하기-airflow-공식-추천방식" class="level3" data-number="3.1.1">
<h3 data-number="3.1.1" class="anchored" data-anchor-id="사용하기-airflow-공식-추천방식"><span class="header-section-number">3.1.1</span> &gt;&gt;, &lt;&lt; 사용하기 (Airflow 공식 추천방식)</h3>
<ul>
<li>방법1 : 모든 경우의 수에 대해서 연결 가능하지만 가독성 떨어짐</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">task1 &gt;&gt; task2</span>
<span id="cb4-2">task1 &gt;&gt; task3</span>
<span id="cb4-3">task2 &gt;&gt; task4</span>
<span id="cb4-4">task3 &gt;&gt; task4</span>
<span id="cb4-5">task5 &gt;&gt; task4</span>
<span id="cb4-6">task4 &gt;&gt; task6</span>
<span id="cb4-7">task7 &gt;&gt; task6</span>
<span id="cb4-8">task6 &gt;&gt; task8</span></code></pre></div>
<ul>
<li>방법2: 같은 레벨의 tasks는 list로 묶어 준다. 가독성이 높지만 구현이 안되는 경우 있을 수 있음</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1">task1 &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task2, task3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task4</span>
<span id="cb5-2">task5 &gt;&gt; task4</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task4, task7</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task6 &gt;&gt; task8</span></code></pre></div>
<ul>
<li>방법3: 역방향은 &lt;&lt;를 이용 (권장 하지 않음)</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">task1 &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task2, task3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task4 &lt;&lt; task5</span>
<span id="cb6-2">task4 &gt;&gt; task 6 &lt;&lt; task7</span>
<span id="cb6-3">task6 &gt;&gt; task8</span></code></pre></div>
<section id="example" class="level4" data-number="3.1.1.1">
<h4 data-number="3.1.1.1" class="anchored" data-anchor-id="example"><span class="header-section-number">3.1.1.1</span> Example</h4>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1"></span>
<span id="cb7-2">from airflow import DAG</span>
<span id="cb7-3">import pendulum</span>
<span id="cb7-4">import datetime</span>
<span id="cb7-5">from airflow.operators.empty import EmptyOperator</span>
<span id="cb7-6">#EmptyOperator는 어떤 연산도 하지 않는 class</span>
<span id="cb7-7"></span>
<span id="cb7-8">with DAG(</span>
<span id="cb7-9">    dag_id="dags_task_connection",</span>
<span id="cb7-10">    schedule=None,</span>
<span id="cb7-11">    start_date=pendulum.datetime(2023,3,1, tz="Asia/Seoul"),</span>
<span id="cb7-12">    catchup=False</span>
<span id="cb7-13">) as dag:</span>
<span id="cb7-14">    # 8개의 instances: task1~task8</span>
<span id="cb7-15">    task1=EmptyOperator(</span>
<span id="cb7-16">        task_id='task1'</span>
<span id="cb7-17">    )</span>
<span id="cb7-18">    task2=EmptyOperator(</span>
<span id="cb7-19">        task_id='task2'</span>
<span id="cb7-20">    )</span>
<span id="cb7-21">    task3=EmptyOperator(</span>
<span id="cb7-22">        task_id='task3'</span>
<span id="cb7-23">    )</span>
<span id="cb7-24">    task4=EmptyOperator(</span>
<span id="cb7-25">        task_id='task4'</span>
<span id="cb7-26">    )</span>
<span id="cb7-27">    task5=EmptyOperator(</span>
<span id="cb7-28">        task_id='task5'</span>
<span id="cb7-29">    )</span>
<span id="cb7-30">    task6=EmptyOperator(</span>
<span id="cb7-31">        task_id='task6'</span>
<span id="cb7-32">    )</span>
<span id="cb7-33">    task7=EmptyOperator(</span>
<span id="cb7-34">        task_id='task7'</span>
<span id="cb7-35">    )</span>
<span id="cb7-36">    task8=EmptyOperator(</span>
<span id="cb7-37">        task_id='task8'</span>
<span id="cb7-38">    )</span>
<span id="cb7-39">  </span>
<span id="cb7-40">  task1 &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task2, task3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task4</span>
<span id="cb7-41">  task5 &gt;&gt; task4</span>
<span id="cb7-42">  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task4, task7</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task6 &gt;&gt; task8</span></code></pre></div>
</section>
</section>
<section id="함수-사용하기" class="level3" data-number="3.1.2">
<h3 data-number="3.1.2" class="anchored" data-anchor-id="함수-사용하기"><span class="header-section-number">3.1.2</span> 함수 사용하기</h3>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html">Reference: Airflow Official Document</a>
<ul>
<li>Content/Core Concepts/DAGs 참고</li>
<li>DAGs에 대한 숙련도가 올라가면 이 링크를 참고하면 매우 유용
<ul>
<li>DAG을 어떤 상황에서 어떻게 짜야하는지에 대한 guidance가 자세히 적혀 있음</li>
<li>예를 들어, dag을 생성하는 방법 (dag declaration)에는 with 문을 사용하는 방법과 standard constructor (표준 생성자)를 사용하는 방법이 있음
<ol type="1">
<li>with statement</li>
</ol>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">import datetime</span>
<span id="cb8-2"></span>
<span id="cb8-3">from airflow import DAG</span>
<span id="cb8-4">from airflow.operators.empty import EmptyOperator</span>
<span id="cb8-5"></span>
<span id="cb8-6">with DAG(</span>
<span id="cb8-7">    dag_id="my_dag_name",</span>
<span id="cb8-8">    start_date=datetime.datetime(2021, 1, 1),</span>
<span id="cb8-9">    schedule="@daily",</span>
<span id="cb8-10">):</span>
<span id="cb8-11">EmptyOperator(task_id="task")</span></code></pre></div>
<ol start="2" type="1">
<li>standard constructor (class)</li>
</ol>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1">import datetime</span>
<span id="cb9-2"></span>
<span id="cb9-3">from airflow import DAG</span>
<span id="cb9-4">from airflow.operators.empty import EmptyOperator</span>
<span id="cb9-5"></span>
<span id="cb9-6">#class 생성</span>
<span id="cb9-7">my_dag = DAG( </span>
<span id="cb9-8">    dag_id="my_dag_name",</span>
<span id="cb9-9">    start_date=datetime.datetime(2021, 1, 1),</span>
<span id="cb9-10">    schedule="@daily",</span>
<span id="cb9-11">)</span>
<span id="cb9-12">EmptyOperator(task_id="task", dag=my_dag)</span></code></pre></div>
<ol start="3" type="1">
<li>python의 decorator기능 활용 (dag decorator to turn a function into a DAG generator)</li>
</ol>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">import datetime</span>
<span id="cb10-2"></span>
<span id="cb10-3">from airflow.decorators import dag</span>
<span id="cb10-4">from airflow.operators.empty import EmptyOperator</span>
<span id="cb10-5"></span>
<span id="cb10-6"></span>
<span id="cb10-7">@dag(start_date=datetime.datetime(2021, 1, 1), schedule="@daily")</span>
<span id="cb10-8">def generate_dag():</span>
<span id="cb10-9">    EmptyOperator(task_id="task")</span>
<span id="cb10-10"></span>
<span id="cb10-11"></span>
<span id="cb10-12">generate_dag()</span></code></pre></div></li>
</ul></li>
</ul></li>
<li>task dependencies 설정을 위한 emplicit methods.
<ul>
<li><code>set_upstream</code> and <code>set_downstream</code></li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1">first_task.set_downstream(second_task, third_task)</span>
<span id="cb11-2">third_task.set_upstream(fourth_task)</span></code></pre></div>
<ul>
<li><code>cross_downstream</code></li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1">from airflow.models.baseoperator import cross_downstream</span>
<span id="cb12-2"></span>
<span id="cb12-3">#Replaces</span>
<span id="cb12-4">#<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op1, op2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; op3</span>
<span id="cb12-5">#<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op1, op2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; op4</span>
<span id="cb12-6">cross_downstream(<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op1, op2</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op3, op4</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)</span></code></pre></div>
<ul>
<li><code>chain</code></li>
</ul>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">from airflow.models.baseoperator import chain</span>
<span id="cb13-2"></span>
<span id="cb13-3">#Replaces op1 &gt;&gt; op2 &gt;&gt; op3 &gt;&gt; op4</span>
<span id="cb13-4">chain(op1, op2, op3, op4)</span>
<span id="cb13-5"></span>
<span id="cb13-6">#You can also do it dynamically</span>
<span id="cb13-7">chain(*<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">EmptyOperator(task_id='op' + i) for i in range(1, 6)</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)</span>
<span id="cb13-8"></span>
<span id="cb13-9">#or</span>
<span id="cb13-10"></span>
<span id="cb13-11">from airflow.models.baseoperator import chain</span>
<span id="cb13-12"></span>
<span id="cb13-13">#Replaces</span>
<span id="cb13-14">#op1 &gt;&gt; op2 &gt;&gt; op4 &gt;&gt; op6</span>
<span id="cb13-15">#op1 &gt;&gt; op3 &gt;&gt; op5 &gt;&gt; op6</span>
<span id="cb13-16">chain(op1, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op2, op3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">op4, op5</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>, op6)</span></code></pre></div></li>
</ul>
</section>
</section>
</section>
<section id="shell-script" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Shell Script</h1>
<section id="what-is-shell-script" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="what-is-shell-script"><span class="header-section-number">4.1</span> What is Shell Script ?</h2>
<ul>
<li>Unix/Linux Shell 명령어로 적혀진 파일로 인터프리터에 의해 한 줄씩 처리된다.
<ul>
<li>interpreter: CPU가 programming 언어를 처리하는데 크게 compiling 방식과 interpreting 방식 2가지 방식이 있다.
<ul>
<li>compiling
<ul>
<li>programming language를 목적 코드인 2진수로 처리한다음 읽음</li>
<li>compile 할 때 연산 시간은 다소 소요되지만 한 번 compile 되는 연산 속도가 매우 빠름</li>
<li>C, Java</li>
</ul></li>
<li>interpreting: compiling없이 한줄씩 읽는 방식
<ul>
<li>compiling방식에 비해 속도가 느림</li>
<li>python, shell</li>
</ul></li>
</ul></li>
</ul></li>
<li>bashOperator를 이용하여 shell script 처리</li>
<li>Echo, mkdir, cd, cp, tar, touch 등의 기본적인 쉘 명령어를 입력하여 작성하며 변수를 입력받거나 For 문, if 문 그리고 함수도 사용 가능</li>
<li>확장자가 없어도 동작하지만 주로 파일명에 .sh 확장자를 붙인다.</li>
</ul>
</section>
<section id="why-to-need-shell-script" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="why-to-need-shell-script"><span class="header-section-number">4.2</span> Why to Need Shell Script?</h2>
<ul>
<li>bashOperator를 이용하다면 bashOperator안에 shell 명령어들을 넣어도 동작은 하지만</li>
<li>쉘 명령어를 이용하여 복잡한 로직을 처리하는 경우 shell script를 이용하는 것이 좋다
<ul>
<li>예를들어, sftp (source sever)를 통해 csv나 json같은 파일을 받은 후 전처리하여 DB에 Insert &amp; tar.gz으로 압축해두기. 이렇게 복잡한 tasks를 bashOperator에 모두 기입하기 보다는 script를 짜서 bashOperator에서 호출하는 방식이 가독성이나 유지보수 측면에서 더 효율적이다.
<ul>
<li>sftp: 접속할 때 IP, Port, account, pw 가 필요한데 이런 것을 변수화 시키고 DB전처리 로직을 shell script에 짜 놓으면 됨.</li>
</ul></li>
</ul></li>
<li>쉘 명령어 재사용을 위한 경우
<ul>
<li>위의 예시를 server 100대에 대하여 반복할 때 logic이 같으면 shell script를 100번 호출하는 것이 더 간편</li>
</ul></li>
</ul>
</section>
<section id="worker-컨테이너가-쉘-스크립트를-수행하려면" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="worker-컨테이너가-쉘-스크립트를-수행하려면"><span class="header-section-number">4.3</span> Worker 컨테이너가 쉘 스크립트를 수행하려면?</h2>
<ul>
<li><p>문제점</p>
<ul>
<li>컨테이너는 외부의 파일을 인식할 수 없다. shell script를 wsl directory 어딘가에 넣으면 container가 인식을 못함.</li>
<li>컨테이너 안에 파일을 만들어주면 컨테이너 재시작시 파일이 사라진다. docker에서 이미지를 띄우면 container라 하는데 container 재 실행시 초기화 되어 실행된다.</li>
</ul></li>
<li><p>해결방법</p>
<p><img src="kmink3225.netlify.app/images/airflow/worker-container-shell-operation.PNG" class="img-fluid"></p>
<ul>
<li>빨간 네모박스의 plugins에 shell script를 저장한다. airflow document에서는 customized python and shell script를 plugins에 저장하는 것을 권장</li>
</ul></li>
<li><p>example</p></li>
</ul>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">cd github-repository/plugins/shell</span>
<span id="cb14-2">vi select_fruit.sh #i 누르면 편집가능하고 편집 후 esc+wq! 입력하고 enter치면 저장하고 나감</span>
<span id="cb14-3">chmod +x select_fruit.sh #실행 권한을 부여</span>
<span id="cb14-4">./select_fruit.sh kmkim # ./test2.sh 는 test2.sh을 실행한다는 의미 출력물: kmkim 출력됨</span>
<span id="cb14-5">git add -A</span>
<span id="cb14-6">git commit -m "shell script example"</span>
<span id="cb14-7">git push</span></code></pre></div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode select_fruit.sh code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#첫 번째 인수 출력</span></span></code></pre></div>
<ul>
<li><p>container에서 github repository에 있는 plugins/shell에 있는 shell script 인식하게 하기</p>
<ul>
<li><p><code>vi docker-compose.yaml</code> 에서 67line 수정</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"><span class="an" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">volumes:</span></span>
<span id="cb16-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/airflow/dags:/opt/airflow/dags</span>
<span id="cb16-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs</span>
<span id="cb16-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config</span>
<span id="cb16-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">  - </span>${AIRFLOW_PROJ_DIR:-.}/airflow//plugins:/opt/airflow/plugins</span></code></pre></div>
<h1 id="email-operator" data-number="5"><span class="header-section-number">5</span> Email Operator</h1></li>
</ul></li>
<li><p>이메일 전송해주는 오퍼레이터</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb17-1">email_t1 = EmailOperator(</span>
<span id="cb17-2">  task_id='email_t1',</span>
<span id="cb17-3">  to='hjkim_sun@naver.com',</span>
<span id="cb17-4">  subject='Airflow 처리결과',</span>
<span id="cb17-5">  html_content='정상 처리되었습니다.'</span>
<span id="cb17-6">)</span></code></pre></div></li>
<li><p>구글 메일 서버 사용</p></li>
</ul>
</section>
<section id="presetting" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="presetting"><span class="header-section-number">5.1</span> Presetting</h2>
<section id="google-settings" class="level3" data-number="5.1.1">
<h3 data-number="5.1.1" class="anchored" data-anchor-id="google-settings"><span class="header-section-number">5.1.1</span> Google Settings</h3>
<ul>
<li>이메일 전송을 위해 사전 셋팅 작업 필요(Google)
<ul>
<li>google mail server사용</li>
<li>gmail &gt;&gt; settings(설정) &gt;&gt; See all settings (모든 설정 보기) &gt;&gt; Forwarding and POP/IMAP (전달 및 POP/IMAP) &gt;&gt; IMAP access (IMAP 접근): Enable IMAP (IMAP 사용)</li>
<li>Manage Your Google Acccount (구글 계정 관리) &gt;&gt; Security (보안) &gt;&gt; 2-Step Verification (2단계 인증) &gt;&gt; App Passwords: 앱비밀번호 setting &gt;&gt; select app: Mail , Select device: Windows Computer &gt;&gt; Generate app pasword message window popped up</li>
</ul></li>
</ul>
</section>
<section id="airflow-settings" class="level3" data-number="5.1.2">
<h3 data-number="5.1.2" class="anchored" data-anchor-id="airflow-settings"><span class="header-section-number">5.1.2</span> Airflow Settings</h3>
<ul>
<li>사전 설정 작업 (airflow)
<ul>
<li>docker-compose.yaml 편집 (environment 항목에 추가)</li>
</ul>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb18-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 띄어쓰기 주의</span></span>
<span id="cb18-2">AIRFLOW__SMTP__SMTP_HOST: 'smtp.gmail.com'  </span>
<span id="cb18-3">AIRFLOW__SMTP__SMTP_USER: '{gmail 계정}'</span>
<span id="cb18-4">AIRFLOW__SMTP__SMTP_PASSWORD: '{앱비밀번호}'</span>
<span id="cb18-5">AIRFLOW__SMTP__SMTP_PORT: 587</span>
<span id="cb18-6">AIRFLOW__SMTP__SMTP_MAIL_FROM: '{gmail 계정}'</span></code></pre></div></li>
</ul>
</section>
</section>
<section id="emailoperator-작성" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="emailoperator-작성"><span class="header-section-number">5.2</span> EmailOperator 작성</h2>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb19-1"></span>
<span id="cb19-2">from airflow import DAG</span>
<span id="cb19-3">import pendulum</span>
<span id="cb19-4">import datetime</span>
<span id="cb19-5">from airflow.operators.email import EmailOperator</span>
<span id="cb19-6"></span>
<span id="cb19-7">with DAG(</span>
<span id="cb19-8">    dag_id="dags_email_operator",</span>
<span id="cb19-9">    schedule="0 8 1 * *", #montly batch: 매월 1일 08:00에 시작</span>
<span id="cb19-10">    start_date=pendulum.datetime(2023, 6, 13, tz="Asia/Seoul"),</span>
<span id="cb19-11">    catchup=False</span>
<span id="cb19-12">) as dag:</span>
<span id="cb19-13">    sending_email_task=EmailOperator(</span>
<span id="cb19-14">        task_id='sending_email_task',</span>
<span id="cb19-15">        to='sdf@naver.com',</span>
<span id="cb19-16">        cc=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'sdf2@gmail.com', 'sdf3@gmail.com'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>,</span>
<span id="cb19-17">        subject='Airflow Test',</span>
<span id="cb19-18">        html_content= """</span>
<span id="cb19-19">            this is a test for airflow.<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;br/&gt;&lt;br/&gt;</span></span>
<span id="cb19-20">            </span>
<span id="cb19-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            {{ ds }}&lt;br/&gt;</span></span>
<span id="cb19-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb19-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span></code></pre></div>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/03.operator_basic.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Python Operator</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/04.python_operator.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="python-operator" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Python Operator</h1>
<ul>
<li>import libraries
<ul>
<li><code>from {package name} import {operator or class name}</code> <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> <code>from airflow.operators.python import PythonOperator</code></li>
</ul></li>
<li>정의된 파이썬 함수를 실행시키는 오퍼레이터</li>
<li>가장 많이 쓰이는 오퍼레이터</li>
</ul>
<section id="python-operator-types" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="python-operator-types"><span class="header-section-number">1.1</span> Python Operator Types</h2>
<table class="table">
<colgroup>
<col style="width: 13%">
<col style="width: 17%">
<col style="width: 13%">
<col style="width: 56%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Package</th>
<th style="text-align: center;">Operator</th>
<th style="text-align: center;">Importance</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;">airflow.operators.python</td>
<td style="text-align: center;">PythonOperator</td>
<td style="text-align: center;">***</td>
<td>어떤 파이썬함수를실행시키기 위한오퍼레이터</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">BranchPythonOperator</td>
<td style="text-align: center;">*</td>
<td>파이썬 함수 실행 결과에 따라 task를 <strong>선택적</strong>으로 실행시킬 때 사용되는 오퍼레이터. task1 &gt;&gt; [task2, task3] 와 같은 상황에서 BranchOperator에서 task1을 실행시키고 task2와 task3 중 하나를 택하여 실행시킬 수 있는 operator</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">ShortCircuitOperator</td>
<td style="text-align: center;"></td>
<td>파이썬 함수 실행 결과에 따라 후행 Task를 실행하지 않고 dag자체를 종료시킬 수 있는 오퍼레이터</td>
</tr>
<tr class="even">
<td style="text-align: center;"></td>
<td style="text-align: center;">PythonVirtualenvOperator</td>
<td style="text-align: center;"></td>
<td>파이썬 가상환경 생성후 Job 수행하고 마무리되면 가상환경을 삭제해주는 3개의 과정을 실행시켜 주는 오퍼레이터</td>
</tr>
<tr class="odd">
<td style="text-align: center;"></td>
<td style="text-align: center;">ExternalPythonOperator</td>
<td style="text-align: center;"></td>
<td>기존에 존재하는 파이썬가상환경에서 Job 수행하게 하는 오퍼레이터</td>
</tr>
</tbody>
</table>
</section>
</section>
<section id="import-python-external-module" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Import Python External Module</h1>
<section id="python-module-path" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="python-module-path"><span class="header-section-number">2.1</span> Python Module Path</h2>
<ul>
<li><code>from airflow.operators.python import PythonOperator</code>
<ul>
<li>Airflow 폴더 아래 operators 폴더 아래 python 파일 아래에서 PythonOperator 클래스를 호출하라는 의미</li>
</ul></li>
<li>python이 경로 찾는 방식을 알아놔야 함
<ul>
<li>dag에서 우리가 만든 외부 함수를 import 해와야 하는데</li>
<li>import 경로를 python이 찾을 수 있도록 그 문법에 맞게 작성해야함
<ol type="1">
<li><p>파이썬은 sys.path 변수에서 모듈의 위치를 검색</p>
<ul>
<li>pip install로 설치된 libraries <img src="kmink3225.netlify.app/images/airflow/python-path-search.PNG" class="img-fluid" alt="Python의 sys.path를 이용한 모듈 검색"></li>
<li>conda 환경에 설치된 libraries</li>
</ul>
<p>::: {.cell execution_count=1} <code>{.python .cell-code}  #import sys  #pprint(sys.path)</code> :::</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">['c:<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Users<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>kmkim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Desktop<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>projects<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>website<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>docs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>blog<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>posts<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Engineering<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>airflow', </span>
<span id="cb1-2">'c:<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Users<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>kmkim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>.conda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>envs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>study<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>python39.zip',             </span>
<span id="cb1-3">'c:<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Users<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>kmkim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>.conda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>envs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>study<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>DLLs', </span>
<span id="cb1-4">'c:<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Users<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>kmkim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>.conda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>envs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>study<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>lib', </span>
<span id="cb1-5">'c:<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Users<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>kmkim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>.conda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>envs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>study', </span>
<span id="cb1-6">'', # 실행하는 파이썬 파일과 동일 디렉토리에 있는 파이썬 파일, 이것에 한해서 그냥 모듈명으로만 호출 가능</span>
<span id="cb1-7">    # 예를 들어, a.py 와 b.py와 동일한 디렉토리안에 있다면 a.py안에서 <span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">`import b`</span> 라고 해도 호출 가능</span>
<span id="cb1-8">'c:<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Users<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>kmkim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>.conda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>envs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>study<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>site-packages', </span>
<span id="cb1-9">'c:<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Users<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>kmkim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>.conda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>envs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>study<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>site-packages<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>win32', </span>
<span id="cb1-10">'c:<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Users<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>kmkim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>.conda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>envs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>study<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>site-packages<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>win32<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>lib', </span>
<span id="cb1-11">'c:<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Users<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>kmkim<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>.conda<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>envs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>study<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>lib<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>site-packages<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span>Pythonwin']</span></code></pre></div></li>
<li><p>sys.path 에 값을 추가하는 방법</p>
<ol type="1">
<li>명시적으로 추가 (ex: <code>sys.path.append(‘/home/hjkim’)</code> )</li>
<li>OS 환경변수 PYTHONPATH 에 값을 추가</li>
</ol></li>
</ol></li>
</ul></li>
</ul>
</section>
<section id="plugins-directory-이용" class="level2" data-number="2.2">
<h2 data-number="2.2" class="anchored" data-anchor-id="plugins-directory-이용"><span class="header-section-number">2.2</span> plugins directory 이용</h2>
<ul>
<li><p>다행히, 파이썬에서와 같이 귀찮은 방식보다는 Airflow에서는 자동적으로 dags 폴더와 plugins 폴더를 sys.path에 추가함</p>
<ul>
<li>컨테이너에서 <code>airflow info</code> 명령을 수행해보면 아래 그림과 같은 정보를 확인할 수 있다. <img src="kmink3225.netlify.app/images/airflow/container-airflow-info.PNG" class="img-fluid" alt="Airflow Path Info"></li>
</ul></li>
<li><p>plugins 폴더 이용하기 <img src="kmink3225.netlify.app/images/airflow/plugin-folder.PNG" class="img-fluid" alt="Airflow plugin Folder"></p>
<ul>
<li>plugins까지는 airflow에서 기본적으로 인식하고 있기 때문에 <code>from common.common_func import get_sftp</code>에서와 같이 <code>common</code>부터 경로 써주면 됨.</li>
</ul></li>
<li><p>파이썬 스크립트를 이용하면 좋은 점</p>
<ul>
<li>공통함수 작성이 가능해지고</li>
<li>재활용성이 증가하고</li>
<li>DAG의 가독성이 올라가고</li>
<li>디버깅에도 용이하다.</li>
</ul></li>
<li><p>PythonOperator 예시</p>
<ul>
<li>dags_python_import_func.py</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">from airflow import DAG</span>
<span id="cb2-2">import pendulum</span>
<span id="cb2-3">import datetime</span>
<span id="cb2-4">from airflow.operators.python import PythonOperator</span>
<span id="cb2-5">from common.common_func import get_sftp # 여기서 path 가 맞지 않아 local에서 error가 발생</span>
<span id="cb2-6">    # .env 파일을 만들어서 workspace 경로 설정을 해줘야 한다.</span>
<span id="cb2-7">import random</span>
<span id="cb2-8"></span>
<span id="cb2-9">with DAG(</span>
<span id="cb2-10">    dag_id="dags_python_import_func",</span>
<span id="cb2-11">    schedule="30 6 * * *", #montly batch: 매월 1일 08:00에 시작</span>
<span id="cb2-12">    start_date=pendulum.datetime(2023, 6, 13, tz="Asia/Seoul"),</span>
<span id="cb2-13">    catchup=False</span>
<span id="cb2-14">) as dag:</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    get_sftp_task = PythonOperator(</span></span>
<span id="cb2-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id ='get_sftp_task',</span></span>
<span id="cb2-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=get_sftp</span></span>
<span id="cb2-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    get_sftp_task</span></span></code></pre></div>
<ul>
<li>.env: wsl airflow directory에는 배포될 필요없는 파일이기 때문에 .gitignore에 추가해도 됨</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">WORKSPACE_FOLDER=C:\Users\kmkim\Desktop\projects\airflow #'airflow' directory path입력</span>
<span id="cb3-2">PYTHONPATH=${WORKSPACE_FOLDER}/plugins #'plugins' directory추가</span></code></pre></div></li>
</ul>
</section>
<section id="execute-python-external-modules" class="level2" data-number="2.3">
<h2 data-number="2.3" class="anchored" data-anchor-id="execute-python-external-modules"><span class="header-section-number">2.3</span> Execute Python External Modules</h2>
</section>
</section>
<section id="task-decorator" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Task Decorator</h1>
<ul>
<li>python에 있는 기능</li>
<li>데커레이터(Decorator): 장식하다, 꾸미다</li>
<li>What: 함수를 장식하다</li>
<li>python 함수를 좀 더 쉽게 사용할 수 있다.</li>
<li>원래의 함수를 감싸서 (Wrapping) 바깥에 추가 기능을 덧붙이는 방법
<ul>
<li>파이썬은 함수 안에 함수를 선언하는 것이 가능하고</li>
<li>함수의 인자로 함수를 전달하는 것이 가능하며</li>
<li>함수 자체를 리턴하는 것이 가능하다.</li>
</ul></li>
<li>warpping (함수 감싸기 )
<ul>
<li>파이썬은 함수 안에 함수를 선언하는 것이 가능</li>
<li>함수의 인자로 함수를 전달하는 것이 가능</li>
<li>함수 자체를 리턴하는 것이 가능 <img src="kmink3225.netlify.app/images/airflow/function-encompassion.PNG" class="img-fluid" alt="함수 감싸기1"></li>
<li>함수 감싸기 예시<br>
<img src="kmink3225.netlify.app/images/airflow/function-encompassion2.PNG" class="img-fluid" alt="함수 감싸기2">
<ul>
<li><code>get_data()</code> 함수 안에 log를 쌓아야하는 상황</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">def get_data()</span>
<span id="cb4-2">    print('function starts working')</span></code></pre></div>
<ul>
<li>log는 간단하게 여기서 <code>print('target 함수 실행 전 입니다.')</code> 와 <code>print('target 함수 실행 후 입니다.')</code> 라고 설정</li>
<li><code>get_data()</code> 함수 안에 log를 쌓는 python code를 작성하는 것이 아니라 <code>get_data()</code> 를 인수로 받는 warpping function, <code>outer_func(target_func)</code>을 만든다</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1">def outer_func(target_func):</span>
<span id="cb5-2">    def inner_func():</span>
<span id="cb5-3">        print('target 함수 실행 전 입니다.')</span>
<span id="cb5-4">        print('function starts working')</span>
<span id="cb5-5">        print('target 함수 실행 후 입니다.')</span>
<span id="cb5-6">    return inner_func</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">a=outer_func(get_data) </span>
<span id="cb6-2">a() # get_data()을 인수로 받은 inner_func()이 출력된다.</span></code></pre></div></li>
<li>wrapping 함수의 장점
<ul>
<li><code>get_data()</code>와 같은 target function이 수 백개가 되면 수 백개의 log정보를 수 백개의 target functions에 기입해야한다. wrapping 함수를 사용하면 코드의 재사용이 가능해진다.</li>
</ul></li>
<li>wrapping 함수의 장점
<ul>
<li><code>get_data()</code>와 같은 target function이 수 백개가 되면 <code>a=outer_func(get_data1);a()</code>, <code>a=outer_func(get_data2);a()</code>, <img src="https://latex.codecogs.com/png.latex?%5Cdots">,<code>a=outer_func(get_data100);a()</code> 이런식으로 만들어야 함.</li>
</ul></li>
<li>이런 상황을 보완한 것이 decorator</li>
</ul></li>
<li>decorator <img src="kmink3225.netlify.app/images/airflow/function-decorator.PNG" class="img-fluid" alt="Decorator">
<ul>
<li><code>@outer_func</code> 을 target function위에 작성</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">@outer_func</span>
<span id="cb7-2">def get_data()</span>
<span id="cb7-3">    print('function starts working')</span></code></pre></div>
<ul>
<li>이렇게, decoration을 하게 되면 <code>get_data1();get_data2();get_data3()</code> 만 실행하면 자동으로 <code>outer_func()</code>이 실행됨 <img src="kmink3225.netlify.app/images/airflow/function-decorator2.PNG" class="img-fluid" alt="Decorator2"></li>
</ul></li>
<li>task decorator in airflow
<ul>
<li>airflow에도 비슷한 기능이 있는데 파이썬 함수 정의만으로 쉽게 Task 생성 <img src="kmink3225.netlify.app/images/airflow/function-decorator3.PNG" class="img-fluid" alt="Decorator3"></li>
</ul></li>
<li>airflow official document에서는 PythonOperator Import해서 DAG을 만드는 것 보다 task decorator를 사용하는 것을 더 권장
<ul>
<li>실제로, airflow web service에서 <code>example_python_operator</code> DAG을 보면 <code>example_python_deocartor</code>라고 이름이 안지어졌는데도 decorator 예시가 바로 나옴.</li>
<li>왜냐면, 나중에 task간에 data를 공유할 때 task decorator를 사용하면 PythonOperator를 사용하면 data 공유가 한결 더 쉬워진다.</li>
<li>task decorator를 사용하면 task connection 을 작성할 필요가 없어짐</li>
<li>task decorator dag 예시</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">from airflow import DAG</span>
<span id="cb8-2">import pendulum</span>
<span id="cb8-3">from airflow.decorators import task</span>
<span id="cb8-4"></span>
<span id="cb8-5">with DAG(</span>
<span id="cb8-6">    dag_id="dags_python_decorator",</span>
<span id="cb8-7">    schedule='0 2 * * 1', #매주 월요일 2시 실행</span>
<span id="cb8-8">    start_date=pendulum.datetime(2023, 6, 13, tz="Asia/Seoul"),</span>
<span id="cb8-9">    catchup=False,</span>
<span id="cb8-10">) as dag:</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id="python_task1")</span></span>
<span id="cb8-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def print_context(some_input):</span></span>
<span id="cb8-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(some_input)</span></span>
<span id="cb8-15"></span>
<span id="cb8-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_task1 = print_context('task decorator execution!')</span></span></code></pre></div></li>
</ul>
</section>
<section id="python-operator-with-op_args-parameter" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Python Operator with op_args Parameter</h1>
<section id="python-function-parameter" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="python-function-parameter"><span class="header-section-number">4.1</span> Python Function Parameter</h2>
<ul>
<li>일반적인 함수 인자 작성 방법</li>
</ul>
<pre><code>def regist(name, sex):
    print(name)
    print(sex)

regist('kkm','man')</code></pre>
<ul>
<li>But, 호출하는 로직에서 몇 개의 파라미터를 넘길지 모를 때는 또는 파라미터의 개수를 제한하지 않으려면?</li>
<li>또는 선택적으로 변수를 받을 수도 있을 때는? (가령 주소, 전화번호)</li>
<li>파이썬 함수에서 인수 형태는 크게 3가지가 있음
<ul>
<li>일반 변수 형태를 명시적으로 받는 것: <code>name</code>, <code>sex</code></li>
<li>*argument 방식: <code>*args</code></li>
<li>**keyword_arguement 방식: <code>**kwargs</code></li>
</ul></li>
</ul>
</section>
<section id="arguement-arg" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="arguement-arg"><span class="header-section-number">4.2</span> Arguement: *arg</h2>
<pre><code>def regist(name, sex, *args):
    print(type(args)) #tuple로 되어 있음
    country = args[0] if len(args)&gt;=1 else None #부가 정보가 없을때는 error가 발생하기 때문에 조건문을 달아줌
    city = args[1] if len(args)&gt;=2 else None

regist('gdhong','man')
regist('gdhong','man','korea','seoul')</code></pre>
<ul>
<li><code>regist('gdhong','man')</code> 은 <code>name='gdhong'</code> 과 <code>sex='man'</code></li>
<li><code>regist('gdhong','man','korea','seoul')</code> 은 <code>name='gdhong'</code> 과 <code>sex='man'</code>. <code>'korea','seoul'</code> 는 <code>*args</code>가 catch한다. 이 경우에, <code>name</code>과 <code>sex</code>는 필수 정보 <code>*args</code>는 부가 정보의 개념</li>
<li><code>args</code>로 들어온 값은 tuple 저장된다.</li>
<li><code>args</code>에서 값을 꺼낼 때는 인덱스를 이용한다 (ex: <code>args[0]</code> , <code>args[1]</code>)</li>
<li><code>args</code>라는 이름 외 다른 이름으로 받아도 됨 (ex: <code>some_func(*kk):</code>)</li>
</ul>
</section>
<section id="argument-kwargs" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="argument-kwargs"><span class="header-section-number">4.3</span> Argument: **kwargs</h2>
<pre><code>def some_func(**kwargs):
    print(type(kwargs)) # dictionary
    print(kwargs)
    name = kwargs.get('name') or '' #dictionary 값을 얻을 때는 get() 씀
    country = kwargs.get('country') or ''
    print(f'name:{name}, country:{country}')

some_func(name=’hjkim’, country=’kr’)</code></pre>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
방어 로직
</div>
</div>
<div class="callout-body-container callout-body">
<p>딕셔너리에서 <code>dict['name']</code> 시도시 <code>name</code> 이라는 키가 없을 때 에러가 발생합니다. 이 때 <code>dict.get('name')</code> 으로 시도하면 <code>name</code> 이라는 키가 없을 때 에러나지 않고 <code>None</code>이 반환되어 상대적으로 안전합니다. <code>dict.get('name')</code> or <code>''</code> 의 의미는 <code>name</code> 이라는 키가 있으면 <code>value</code>를 꺼내오고 키가 없으면 빈 문자 열(<code>''</code>)을 받는다는 의미합니다.</p>
</div>
</div>
</section>
<section id="mixed-usage-arg-kwargs" class="level2" data-number="4.4">
<h2 data-number="4.4" class="anchored" data-anchor-id="mixed-usage-arg-kwargs"><span class="header-section-number">4.4</span> Mixed Usage: *arg &amp; **kwargs</h2>
<pre><code>def regist(name, sex, *args, **kwargs):
    print(name)
    print(sex)
    print(args)
    print(kwargs)

regist('hjkim', 'man', 'korea', 'seoul', phone=010, email='hjkim_sun@naver.com')</code></pre>
<ul>
<li>함수의 인수에 여러 값을 줘도 잘 작동하는 이유
<ul>
<li>*,** 가 없는 인수는 <code>name</code>과 <code>sex</code>로 고정 되어 있기 때문에 아무리 많은 인수값이 오더라도 첫 2개는 <code>name</code>과 <code>sex</code>에 무조건 할당 됨 나머지 인수값 중 <code>'key':'value'</code> 형태가 아닌 것은 모두 <code>*arg</code>에 <code>'key':'value'</code>인 것은 <code>**kwargs</code>에 할당된다.</li>
</ul></li>
</ul>
</section>
<section id="python-operator-op_args-usage" class="level2" data-number="4.5">
<h2 data-number="4.5" class="anchored" data-anchor-id="python-operator-op_args-usage"><span class="header-section-number">4.5</span> Python Operator: op_args Usage</h2>
<section id="함수에-일반-변수만-있을-경우" class="level3" data-number="4.5.1">
<h3 data-number="4.5.1" class="anchored" data-anchor-id="함수에-일반-변수만-있을-경우"><span class="header-section-number">4.5.1</span> 함수에 일반 변수만 있을 경우</h3>
<pre><code>def regist(name, sex):
    print(f'이름은 {name}이고 성별은 {sex}입니다')

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_args=['hjkim','man'] #list로 작성되고 regist()의 인수값으로 사용된다. 
    #'hjkim'과 'man'은 각 각 regist()의 name과 sex에 할당된다.
)</code></pre>
</section>
<section id="함수에-일반-변수-args도-있을-경우" class="level3" data-number="4.5.2">
<h3 data-number="4.5.2" class="anchored" data-anchor-id="함수에-일반-변수-args도-있을-경우"><span class="header-section-number">4.5.2</span> 함수에 일반 변수 + *args도 있을 경우</h3>
<section id="common-function-example" class="level4" data-number="4.5.2.1">
<h4 data-number="4.5.2.1" class="anchored" data-anchor-id="common-function-example"><span class="header-section-number">4.5.2.1</span> Common Function Example</h4>
<pre><code>def regist(name, sex, *args):
    print(name) # string 형태로
    print(sex) # string 형태로
    print(args) # tuple 형태로  출력 됨

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_args=[‘hjkim’,’man’,’kr’,’seoul’] # ‘hjkim’,’man’ 는 name과 sex에 ,’kr’,’seoul’는 *args에 할당된다.
)</code></pre>
</section>
<section id="dag" class="level4" data-number="4.5.2.2">
<h4 data-number="4.5.2.2" class="anchored" data-anchor-id="dag"><span class="header-section-number">4.5.2.2</span> DAG</h4>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb15-1">from airflow import DAG</span>
<span id="cb15-2">import pendulum</span>
<span id="cb15-3">import datetime</span>
<span id="cb15-4">from airflow.operators.python import PythonOperator</span>
<span id="cb15-5">from common.common_func import regist</span>
<span id="cb15-6">with DAG(</span>
<span id="cb15-7">    dag_id="dags_python_with_op_args",</span>
<span id="cb15-8">    schedule="30 6 * * *",</span>
<span id="cb15-9">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb15-10">    catchup=False</span>
<span id="cb15-11">) as dag:</span>
<span id="cb15-12">    </span>
<span id="cb15-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    regist_t1 = PythonOperator(</span></span>
<span id="cb15-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='regist_t1',</span></span>
<span id="cb15-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=regist,</span></span>
<span id="cb15-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_args=['hjkim','man','kr','seoul']</span></span>
<span id="cb15-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb15-18"></span>
<span id="cb15-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    regist_t1</span></span></code></pre></div>
</section>
</section>
<section id="함수에-args만-있을-경우" class="level3" data-number="4.5.3">
<h3 data-number="4.5.3" class="anchored" data-anchor-id="함수에-args만-있을-경우"><span class="header-section-number">4.5.3</span> 함수에 *args만 있을 경우</h3>
<section id="common-function-example-1" class="level4" data-number="4.5.3.1">
<h4 data-number="4.5.3.1" class="anchored" data-anchor-id="common-function-example-1"><span class="header-section-number">4.5.3.1</span> Common Function Example</h4>
<pre><code>def regist(*args):
    print(args) # tuple 인 ('hjkim','man','kr','seoul')

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_args=['hjkim','man','kr','seoul'] # 모두 *args에 할당된다.
)</code></pre>
</section>
<section id="dag-1" class="level4" data-number="4.5.3.2">
<h4 data-number="4.5.3.2" class="anchored" data-anchor-id="dag-1"><span class="header-section-number">4.5.3.2</span> DAG</h4>
</section>
</section>
<section id="python-operator-op_kwargs-usage" class="level3" data-number="4.5.4">
<h3 data-number="4.5.4" class="anchored" data-anchor-id="python-operator-op_kwargs-usage"><span class="header-section-number">4.5.4</span> Python Operator op_kwargs Usage</h3>
</section>
<section id="함수에-일반-변수만-있을-경우-1" class="level3" data-number="4.5.5">
<h3 data-number="4.5.5" class="anchored" data-anchor-id="함수에-일반-변수만-있을-경우-1"><span class="header-section-number">4.5.5</span> 함수에 일반 변수만 있을 경우</h3>
<pre><code>def regist(name, sex):
    print(f'이름은 {name}이고 성별은 {sex}입니다')

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_kwargs={'name':'hjkim','sex':'man'} #dictonary 형태로 작성
    # regist(name,sex)의 argument 가 name, sex이고 op_kwargs의 key 값에 regist(name,sex)의 argument를 똑같이 작성해준다.
)</code></pre>
</section>
<section id="함수에-일반-변수-kwargs도-있을-경우" class="level3" data-number="4.5.6">
<h3 data-number="4.5.6" class="anchored" data-anchor-id="함수에-일반-변수-kwargs도-있을-경우"><span class="header-section-number">4.5.6</span> 함수에 일반 변수 + *kwargs도 있을 경우</h3>
<pre><code>def regist(name, sex, **kwargs):
    print(name)
    print(sex)
    print(kwargs) # dictionary 형태로 출력됨

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_kwargs={'name':'hjkim','sex':'man',\
    'country':'kr','city':'seoul'} # op_kwargs의 key값 중 name과 sex는 regist()의 인수명과 일치하므로 자동적으로 연결되어 regist()의 name과 sex에 할당되고 country와 city는 **kwargs에 할당된다.
)</code></pre>
</section>
<section id="함수에-kwargs도-있을-경우" class="level3" data-number="4.5.7">
<h3 data-number="4.5.7" class="anchored" data-anchor-id="함수에-kwargs도-있을-경우"><span class="header-section-number">4.5.7</span> 함수에 *kwargs도 있을 경우</h3>
<pre><code>def regist(**kwargs):
    name=kwargs['name'] or ''
    sex=kwargs['sex'] or ''
    country = kwargs['country'] or ''
    city = kwargs['city'] or ''
    print(f'name은 {name}이고, \
        성별은 {sex}이고, \
        국가는 {country} 이고, \
        도시는 {city} 입니다.')

python_task = PythonOperator(
    task_id='python_task',
    python_callable=regist,
    op_kwargs={'name':'hjkim','sex':'man',\
    'country':'kr',city:'seoul'}
)</code></pre>
</section>
<section id="함수에-argskwargs-모두-있을-경우" class="level3" data-number="4.5.8">
<h3 data-number="4.5.8" class="anchored" data-anchor-id="함수에-argskwargs-모두-있을-경우"><span class="header-section-number">4.5.8</span> 함수에 <em>args,</em>kwargs 모두 있을 경우</h3>
<pre><code>def regist(name, sex, *args, **kwargs):
    print(name)
    print(sex)
    print(args)
    print(kwargs)

python_task_2 = PythonOperator(
    task_id='python_task_2',
    python_callable=regist,
    op_args=['hjkim','man','kr','seoul'], #name='hjkim', sex='man',**args=('kr','seoul')
    op_kwargs={'phone’:010,'email':'hjkim_sun@naver.com'} #**kwargs={'phone’:010,'email':'hjkim_sun@naver.com'}
)</code></pre>
</section>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/04.python_operator.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Template Variabler</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/05.template_variable.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="jinja-template" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Jinja Template</h1>
<ul>
<li><p>template engine: 문서 또는 파일 (template)에서 특정 양식으로 작성된 값 (즉, 특정 양식으로 어떤 변수 값을 만듦)을 런타임시 실제 값으로 치환해주는 처리 엔진이 있음</p></li>
<li><p>template engine은 여러 솔루션이 존재하며 그 중 Jinja 템플릿은 파이썬 언어에서 사용하는 엔진</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">from jinja2 import Template #jinja2 library는 airflow 설치시 자동 설치됨</span>
<span id="cb1-2"></span>
<span id="cb1-3">template = Template('my name is {{name}}') #Template은 class, {{name}}은 변수</span>
<span id="cb1-4">new_template = template.render('name=hjkim')</span>
<span id="cb1-5">print(new_template)</span></code></pre></div></li>
<li><p>Jinja 템플릿, 어디서 쓰이나?</p>
<ul>
<li>파이썬 기반 웹 프레임워크인 Flask, Django(장고)에서 주로 사용
<ul>
<li>예를 들어, HTML 형태의 정적 template 문서를 만들어 놓고 back end server의 처리 결과에 따라 값을 바꾸어 보여줄 때 jinja template engine이 사용될 수 있다. (주로 HTML 템플릿 저장 후 화면에 보여질 때 실제 값으로 변환해서 출력)</li>
</ul></li>
<li>SQL작성시에도 활용 가능
<ul>
<li>예를 들어, <code>select * from tables where base_dt = {{}}</code> 라는 SQL template을 만들어 넣고 jinja template engine을 이용해서 날짜 변수 <code>{{}}</code>에 runtime시 발생하는 실제 값을 할당할 수 있다.</li>
</ul></li>
</ul></li>
</ul>
<section id="airflow에서-사용법" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="airflow에서-사용법"><span class="header-section-number">1.1</span> Airflow에서 사용법</h2>
<ul>
<li>오퍼레이터 파라미터 입력시 중괄호 {} 2개(<code>{{}}</code>)를 이용하면 Airflow에서 기본적으로 제공하는 변수들(ex: 수행 날짜, DAG_ID)을 치환된 값으로 입력할 수 있음.
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/templates-ref.html">airflow에서 제공하는 기본 variable list</a> or google ‘airflow templates reference’</li>
<li><code>{{ data_interval_start }}</code>: schedule 구간의 시작점을 반환, <code>pendulum.DateTime</code>는 timestamped type <strong>(중요)</strong></li>
<li><code>{{ data_interval_end }}</code>: schedule 구간의 끝점을 반환 <strong>(중요)</strong></li>
<li><code>{{ ds }}</code>: <code>{{ data_interval_start }}</code>의 value를 string 형태(‘YYYY-MM-DD’)로 반환 <strong>(중요)</strong></li>
<li><code>{{ ds_nodash }}</code>: <code>{{ds}}</code>를 string 형태(‘YYYYMMDD’) 로 반환</li>
<li><code>{{ ts }}</code>: timestamped 의 약자로 <code>{{ data_interval_start }}</code>를 string 형태(‘YYYY-MM-DD T00:00:00+00:00’) 로 반환</li>
<li><code>{{ ts_nodash_with_tz }}</code>: timestamped 의 약자로 <code>{{ ts }}</code>를 string 형태(‘YYYYMMDDT000000+0000’) 로 반환</li>
<li><code>{{ ts_nodash  }}</code>: timestamped 의 약자로 <code>{{ts}}</code>를 string 형태(‘YYYYMMDDT000000’) 로 반환</li>
</ul></li>
<li>모든 오퍼레이터, 모든 파라미터에 Template 변수 적용이 가능한가? No!</li>
<li><a href="https://airflow.apache.org/docs/apacheairflow/stable/_api/airflow/operators/index.html">Airflow 문서에서 어떤 파라미터에 Template 변수 적용 가능한지 확인 필요</a> or google airflow operators
<ul>
<li>operator 설명란에 parameters 란에 각 parameter의 설명 부분 맨 끝에 (templated) 라고 적혀 있는 parameter는 jinja template 사용 가능. template_fields에 요약되어 있음</li>
<li>예를 들어, airflow.operators.bash 에서 <code>Parameters</code>를 보면
<ul>
<li>bash_command (str) – The command, set of commands or reference to a bash script (must be ‘.sh’) to be executed. <strong>(templated)</strong> - 사용 가능</li>
<li>env (dict[str, str] | None) – If env is not None, it must be a dict that defines the environment variables for the new process; these are used instead of inheriting the current process environment, which is the default behavior. <strong>(templated)</strong> - 사용 가능</li>
<li>append_env (bool) – If False(default) uses the environment variables passed in env params and does not inherit the current process environment. If True, inherits the environment variables from current passes and then environment variable passed by the user will either update the existing inherited environment variables or the new variables gets appended to it - 사용 불가</li>
<li>output_encoding (str) – Output encoding of bash command - 사용 불가</li>
<li>skip_on_exit_code (int | Container[int] | None) – If task exits with this exit code, leave the task in skipped state (default: 99). If set to None, any non-zero exit code will be treated as a failure. - 사용 불가</li>
<li>cwd (str | None) – Working directory to execute the command in. If None (default), the command is run in a temporary directory. - 사용 불가</li>
<li>template_fields: Sequence[str]= (‘bash_command’, ‘env’)[source]</li>
</ul></li>
<li>하지만, parameter 설명란과 template_fields에 template 변수가 일치하지 않을 수 있음. 그럴 땐 template_fiedls가 정답</li>
<li>예를 들어, airflow.operators.python에서 <code>Parameters</code>를 보면 아래와 같이 <code>templates_dict</code>만 사용 가능한 것 처럼 보이지만 template_fields를 보면 <code>op_kwargs</code> 와 <code>op_args</code>도 사용 가능한 것을 알 수 있다.
<ul>
<li>python_callable (Callable) – A reference to an object that is callable</li>
<li>op_kwargs (Mapping[str, Any] | None) – a dictionary of keyword arguments that will get unpacked in your function</li>
<li>op_args (Collection[Any] | None) – a list of positional arguments that will get unpacked when calling your callable</li>
<li>templates_dict (dict[str, Any] | None) – a dictionary where the values are templates that will get templated by the Airflow engine sometime between <code>__init__</code>and execute takes place and are made available in your callable’s context after the template has been applied. <strong>(templated)</strong> - 사용 가능</li>
<li>templates_exts (Sequence[str] | None) – a list of file extensions to resolve while processing templated fields, for examples [‘.sql’, ‘.hql’]</li>
<li>show_return_value_in_logs (bool) – a bool value whether to show return_value logs. Defaults to True, which allows return value log output. It can be set to False to prevent log output of return value when you return huge data such as transmission a large amount of XCom to TaskAPI.</li>
<li>template_fields: Sequence[str]= (‘templates_dict’, ‘op_args’, ‘op_kwargs’)[source]</li>
</ul></li>
</ul></li>
</ul>
</section>
</section>
<section id="bashoperator-with-template" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> BashOperator with Template</h1>
<section id="bashoperator" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="bashoperator"><span class="header-section-number">2.1</span> BashOperator</h2>
<ul>
<li><blockquote class="blockquote">
<blockquote class="blockquote">
<p>recap) Bash 오퍼레이터는 어떤 파라미터에 Template를 쓸 수 있는가?</p>
</blockquote>
</blockquote></li>
<li>파라미터
<ul>
<li>bash_command (str) (templated)</li>
<li>env (dict[str, str] | None) (templated)</li>
<li>append_env (bool)</li>
<li>output_encoding (str)</li>
<li>skip_exit_code (int)</li>
<li>cwd (str | None)</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">bash_t1 = BashOperator(</span>
<span id="cb2-2">    task_id='bash_t1',</span>
<span id="cb2-3">    bash_command='echo "End date is {{ data_interval_end }}"'</span>
<span id="cb2-4">)</span>
<span id="cb2-5">bash_t2 = BashOperator(</span>
<span id="cb2-6">    task_id='bash_t2',</span>
<span id="cb2-7">    env={'START_DATE': '{{ data_interval_start | ds}}','END_DATE':'{{ data_interval_end | ds }}'},</span>
<span id="cb2-8">    bash_command='echo "Start date is $START_DATE " &amp;&amp; ''echo "End date is $END_DATE"'</span>
<span id="cb2-9">)</span></code></pre></div>
<ul>
<li>Full example
<ul>
<li>DAG</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">from airflow import DAG</span>
<span id="cb3-2">import pendulum</span>
<span id="cb3-3">import datetime</span>
<span id="cb3-4">from airflow.operators.bash import BashOperator</span>
<span id="cb3-5"></span>
<span id="cb3-6">with DAG(</span>
<span id="cb3-7">    dag_id="dags_bash_with_template",</span>
<span id="cb3-8">    schedule="10 0 * * *",</span>
<span id="cb3-9">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb3-10">    catchup=False</span>
<span id="cb3-11">) as dag:</span>
<span id="cb3-12">    bash_t1 = BashOperator(</span>
<span id="cb3-13">        task_id='bash_t1',</span>
<span id="cb3-14">        bash_command='echo "data_interval_end: {{ data_interval_end }}  "'</span>
<span id="cb3-15">    )</span>
<span id="cb3-16"></span>
<span id="cb3-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_t2 = BashOperator(</span></span>
<span id="cb3-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='bash_t2',</span></span>
<span id="cb3-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        env={</span></span>
<span id="cb3-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            'START_DATE':'{{data_interval_start | ds }}', #| ds: time stamped type을 YYYY-MM-DD로 변환</span></span>
<span id="cb3-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            'END_DATE':'{{data_interval_end | ds }}' #| ds: time stamped type을 YYYY-MM-DD로 변환</span></span>
<span id="cb3-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        },</span></span>
<span id="cb3-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='echo $START_DATE &amp;&amp; echo $END_DATE' #shell script syntax: statement1 &amp;&amp; statement2</span></span>
<span id="cb3-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # statment1이 성공하면 statement2를 실행한다.</span></span>
<span id="cb3-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb3-26"></span>
<span id="cb3-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_t1 &gt;&gt; bash_t2</span></span></code></pre></div>
<ul>
<li>Airflow Web Service Result
<ul>
<li><code>[2023-06-17, 01:00:00 UTC] {taskinstance.py:1327} INFO - Executing &lt;Task(BashOperator): bash_t1&gt; on 2023-06-15 15:10:00+00:00</code> 에서 <code>2023-06-15 15:10:00+00:00</code>의 <code>+</code>뒤는 time zone을 의미. <code>00:00</code> 이면 utc를 의미. 한국 시간으로 변환하려면 9시간을 더해야한다. 즉, <code>2023-06-16 00:10:00</code>이 한국 서울 시간임</li>
<li></li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-17, 01:00:02 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {subprocess.py:75} INFO - Running command: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'/bin/bash', '-c', 'echo $START_DATE &amp;&amp; echo $END_DATE'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-17, 01:00:02 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {subprocess.py:86} INFO - Output:</span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-17, 01:00:02 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {subprocess.py:93} INFO - 2023-06-15</span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-17, 01:00:02 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {subprocess.py:93} INFO - 2023-06-16`</span></code></pre></div></li>
</ul></li>
</ul>
</section>
</section>
<section id="airflow-date-concept" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Airflow Date Concept</h1>
<section id="데이터-추출-예시" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="데이터-추출-예시"><span class="header-section-number">3.1</span> 데이터 추출 예시</h2>
<ul>
<li>상황
<ul>
<li>Daily ETL 처리를 위한 조회 쿼리(2023/02/25 0시 실행- 매일 00:00에 데이터 가져오기)</li>
<li>전체 data는 너무 많기 때문에 증분된 데이터만 가져오기. 즉 오늘이 2023/02/25 라면 2023/02/24 와 2023/02/25 사이에 있는 data만 가져온다.</li>
</ul></li>
<li>example: 등록 테이블</li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th>REG_DATE</th>
<th style="text-align: center;">NAME</th>
<th style="text-align: center;">ADDRESS</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>2023-02-24 15:34:35</td>
<td style="text-align: center;">홍길동</td>
<td style="text-align: center;">Busan</td>
</tr>
<tr class="even">
<td>2023-02-24 19:14:42</td>
<td style="text-align: center;">김태희</td>
<td style="text-align: center;">Seoul</td>
</tr>
<tr class="odd">
<td>2023-02-24 23:52:19</td>
<td style="text-align: center;">조인성</td>
<td style="text-align: center;">Daejeon</td>
</tr>
</tbody>
</table>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1">SELECT NAME, ADDRESS</span>
<span id="cb5-2">FROM TBL_REG</span>
<span id="cb5-3">WHERE REG_DATE BETWEEN TIMESTAMP('2023-02-24 00:00:00')</span>
<span id="cb5-4">AND TIMESTAMP('2023-02-24 23:59:59')</span></code></pre></div>
<ul>
<li>생각해볼 point: 각 관점에 따라 날짜가 다름
<ul>
<li>데이터 관점의 시작일: 2023-02-24</li>
<li>데이터 관점의 종료일: 2023-02-25</li>
<li>DAG이 실행되는 시점: 2023-02-25</li>
<li>airflow는 ETL을 위한 도구로 만들어졌기 때문에 data관점에서 전처리를 하는 사상이 담겨져 있다.</li>
</ul></li>
</ul>
</section>
<section id="airflow-날짜-template-변수" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="airflow-날짜-template-변수"><span class="header-section-number">3.2</span> Airflow 날짜 Template 변수</h2>
<ul>
<li>예시: 일 배치
<ul>
<li>ex. 2023-02-24 이전 배치일 (논리적 기준일)
<ul>
<li>= data_interval_start (airflow new version - from 2.5.2 version)</li>
<li>= dag_run.logical_date</li>
<li>= ds (yyyy-mm-dd 형식)</li>
<li>= ts (타임스탬프)</li>
<li>= execution_date (airflow old version - until 2.5.1 version)</li>
<li>위와 같이 airflow의 대부분의 변수들이 논리적 기준일을 데이터 관점의 시작일을 기준으로 한다.</li>
<li>execution_date 라는 명명법이 너무 혼란스러웠음 실행 날짜란 의미는 대부분의 사람들이 dag이 실행되는 날로 인식을 하는데 data관점에서 날짜를 출력함. 그래서 data_interval_start로 변수명을 바꿈</li>
</ul></li>
<li>ex. 2023-02-25 배치일 (DAG이 실행되는 날짜)
<ul>
<li>= data_interval_end (airflow new version - from 2.5.2 version)</li>
<li>=</li>
<li>=</li>
<li>=</li>
<li>= next_execution_date (airflow old version - until 2.5.1 version)</li>
<li>next execution_date 라는 명명법은 대부분의 사람들이 dag이 실행되는 날로 인식을 하기 때문에 혼란스러워서 data_interval_end로 바꿈. 왜냐면 현재 dag 실행 날짜가 next execution_date로 표시되고 그 이전 실행 날짜를 execution_date로 표기해서 실제 실행날짜와 변수 이름이 맞지가 않음.</li>
<li>그러므로, 배치가 돌고있는 현재 날짜를 출력하고 싶으면 data_interval_end에 접근해야하고 그 이전 배치의 날짜를 출력하고 싶으면 data_interval_start에 접근해야한다.</li>
</ul></li>
</ul></li>
<li>Full Exmaple
<ul>
<li>DAG</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># dags_bash_with_template.py</span></span>
<span id="cb6-2">from airflow import DAG</span>
<span id="cb6-3">import pendulum</span>
<span id="cb6-4">import datetime</span>
<span id="cb6-5">from airflow.decorators import task</span>
<span id="cb6-6"></span>
<span id="cb6-7">with DAG(</span>
<span id="cb6-8">    dag_id="dags_python_show_templates",</span>
<span id="cb6-9">    schedule="30 9 * * *",</span>
<span id="cb6-10">    start_date=pendulum.datetime(2023, 6, 10, tz="Asia/Seoul"),</span>
<span id="cb6-11">    catchup=True #catchup 할때 task 순서를 유념해서 연결시키지 않으면 dags실행을 pause/unpuase시 task들이 꼬일 수 있다.</span>
<span id="cb6-12">) as dag:</span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_task')</span></span>
<span id="cb6-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def show_templates(**kwargs):</span></span>
<span id="cb6-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        from pprint import pprint </span></span>
<span id="cb6-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pprint(kwargs) #pprint는 리스트나 딕셔너리를 줄넘김으로 이쁘게 출력해줌</span></span>
<span id="cb6-18"></span>
<span id="cb6-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    show_templates()</span></span></code></pre></div>
<ul>
<li>Airflow Web Service Result</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-17, 01:40:17 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {logging_mixin.py:149} INFO - {'conf': &lt;***.configuration.AirflowConfigParser object at 0x7f668aeec910&gt;,</span>
<span id="cb7-2">'conn': None,</span>
<span id="cb7-3">'dag': <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;DAG:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">dags_python_show_templates</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span>,</span>
<span id="cb7-4">'dag_run': <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;DagRun</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">dags_python_show_templates</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">@</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023-06-09</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">00:30:00+00:00:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">scheduled__2023-06-09T00:30:00+00:00,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">state:running,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">queued_at:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">2023-06-17</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">01:40:15.833772+00:00.</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">externally</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">triggered:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">False</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span>,</span>
<span id="cb7-5">**'data_interval_end': DateTime(2023, 6, 10, 0, 30, 0, tzinfo=Timezone('UTC')),**</span>
<span id="cb7-6">**'data_interval_start': DateTime(2023, 6, 9, 0, 30, 0, tzinfo=Timezone('UTC')),**</span>
<span id="cb7-7">**'ds': '2023-06-09',**</span>
<span id="cb7-8">**'ds_nodash': '20230609',**</span>
<span id="cb7-9">*'execution_date': &lt;Proxy at 0x7f665d530640 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'execution_date', DateTime(2023, 6, 9, 0, 30, 0, tzinfo=Timezone('UTC')))&gt;*,</span>
<span id="cb7-10">'expanded_ti_count': None,</span>
<span id="cb7-11">'inlets': [],</span>
<span id="cb7-12">**'logical_date': DateTime(2023, 6, 9, 0, 30, 0, tzinfo=Timezone('UTC')),**</span>
<span id="cb7-13">'macros': <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;module</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'***.macros'</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">from</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">'/home/***/.local/lib/python3.7/site-packages/***/macros/__init__.py'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span>,</span>
<span id="cb7-14">*'next_ds': &lt;Proxy at 0x7f665d530690 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'next_ds', '2023-06-10')&gt;*,</span>
<span id="cb7-15">*'next_ds_nodash': &lt;Proxy at 0x7f665d5306e0 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'next_ds_nodash', '20230610')&gt;*,</span>
<span id="cb7-16">*'next_execution_date': &lt;Proxy at 0x7f665d530780 with factory functools.partial*(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'next_execution_date', DateTime(2023, 6, 10, 0, 30, 0, tzinfo=Timezone('UTC')))&gt;*,</span>
<span id="cb7-17">'outlets': [],</span>
<span id="cb7-18">'params': {},</span>
<span id="cb7-19">'prev_data_interval_end_success': DateTime(2023, 6, 6, 0, 30, 0, tzinfo=Timezone('UTC')),</span>
<span id="cb7-20">'prev_data_interval_start_success': DateTime(2023, 6, 5, 0, 30, 0, tzinfo=Timezone('UTC')),</span>
<span id="cb7-21">*'prev_ds': &lt;Proxy at 0x7f665d5307d0 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'prev_ds', '2023-06-08')&gt;*,</span>
<span id="cb7-22">*'prev_ds_nodash': &lt;Proxy at 0x7f665d530820 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'prev_ds_nodash', '20230608')&gt;*,</span>
<span id="cb7-23">*'prev_execution_date': &lt;Proxy at 0x7f665d530870 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'prev_execution_date', DateTime(2023, 6, 8, 0, 30, 0, tzinfo=Timezone('UTC')))&gt;*,</span>
<span id="cb7-24">*'prev_execution_date_success': &lt;Proxy at 0x7f665d5308c0 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'prev_execution_date_success', DateTime(2023, 6, 5, 0, 30, 0, tzinfo=Timezone('UTC')))&gt;*,</span>
<span id="cb7-25">'prev_start_date_success': DateTime(2023, 6, 17, 1, 40, 15, 103936, tzinfo=Timezone('UTC')),</span>
<span id="cb7-26">'run_id': 'scheduled__2023-06-09T00:30:00+00:00',</span>
<span id="cb7-27">'task': &lt;Task(_PythonDecoratedOperator): python_task&gt;,</span>
<span id="cb7-28">'task_instance': <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;TaskInstance:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">dags_python_show_templates.python_task</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">scheduled__2023-06-09T00:30:00+00:00</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">[running]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span>,</span>
<span id="cb7-29">'task_instance_key_str': 'dags_python_show_templates__python_task__20230609',</span>
<span id="cb7-30">'templates_dict': None,</span>
<span id="cb7-31">'test_mode': False,</span>
<span id="cb7-32">'ti': <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;TaskInstance:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">dags_python_show_templates.python_task</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">scheduled__2023-06-09T00:30:00+00:00</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">[running]</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span>,</span>
<span id="cb7-33">*'tomorrow_ds': &lt;Proxy at 0x7f665d530910 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'tomorrow_ds', '2023-06-10')&gt;*,</span>
<span id="cb7-34">*'tomorrow_ds_nodash': &lt;Proxy at 0x7f665d530960 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'tomorrow_ds_nodash', '20230610')&gt;*,</span>
<span id="cb7-35">'triggering_dataset_events': {},</span>
<span id="cb7-36">**'ts': '2023-06-09T00:30:00+00:00',**</span>
<span id="cb7-37">**'ts_nodash': '20230609T003000',**</span>
<span id="cb7-38">**'ts_nodash_with_tz': '20230609T003000+0000',**</span>
<span id="cb7-39">'var': {'json': None, 'value': None},</span>
<span id="cb7-40">*'yesterday_ds': &lt;Proxy at 0x7f665d5309b0 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'yesterday_ds', '2023-06-08')&gt;*,</span>
<span id="cb7-41">*'yesterday_ds_nodash': &lt;Proxy at 0x7f665d530a00 with factory functools.partial(&lt;function lazy_mapping_from_context.&lt;locals&gt;._deprecated_proxy_factory at 0x7f665d577e60&gt;, 'yesterday_ds_nodash', '20230608')&gt;}*</span></code></pre></div>
<ul>
<li>위에서, 과거 혼란을 주는 변수들은 italic채로 표시를 했고 출력물을 보면 depreacted될 예정이라고 적혀져 있어 곧 안쓰일 예정이라고 적혀져 있다.</li>
<li>bold채로 쓰여진 출력물이 개선된 명명법으로 이름 붙여진 변수들인데 대부분의 시간들이 data관점에서 logical date를 선정한 것을 알 수 있다. dag 배치 실행 날짜를 보기 위해선 <code>data_interval_end</code>를 보면 2023-06-10이 실행 날짜인 것을 알 수 있다. logical date의 2023-06-10 이전 배치 실행 날짜이다.</li>
</ul></li>
</ul>
</section>
</section>
<section id="python-operator-with-template" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Python Operator with Template</h1>
<section id="python-오퍼레이터에서-template-변수-사용" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="python-오퍼레이터에서-template-변수-사용"><span class="header-section-number">4.1</span> Python 오퍼레이터에서 Template 변수 사용</h2>
<ul>
<li><p>Python 오퍼레이터는 어떤 파라미터에 Template을 쓸 수 있는가?</p></li>
<li><p>파라미터</p>
<ul>
<li>python_callable</li>
<li>op_kwargs (templated)</li>
<li>op_args (templated)</li>
<li>templates_dict (templated)</li>
<li>templates_exts</li>
<li>show_return_value_in_logs</li>
</ul></li>
<li><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/operators/python/index.html">Operator Template</a></p>
<ul>
<li>jinja template을 이용하여 runtime date를 얻을 때 2가지 방식이 있음
<ol type="1">
<li>함수를 만들어 op_kwargs에 jinja template 변수를 만들고 이 변수에 저장된 값을 꺼내 쓰는 법</li>
<li>**kwargs로부터 얻음 - 2번째 방법이 더 편한것 같지만 개인 취향에 따름</li>
</ol></li>
<li>함수를 만들어 jinja template를 이용해 연산<br>
</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">def python_function1(start_date, end_date, **kwargs):</span>
<span id="cb8-2">    print(start_date)</span>
<span id="cb8-3">    print(end_date)</span>
<span id="cb8-4"></span>
<span id="cb8-5">python_t1 = PythonOperator(</span>
<span id="cb8-6">    task_id='python_t1',</span>
<span id="cb8-7">    python_callable=python_function,</span>
<span id="cb8-8">    op_kwargs={'start_date':'{{data_interval_start | ds}}', 'end_date':'{{data_interval_end | ds}}'}</span>
<span id="cb8-9">)</span></code></pre></div>
<ul>
<li>파이썬 오퍼레이터는 **kwargs에 Template 변수들을 자동으로 제공해주고 있음</li>
</ul>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1">@task(task_id='python_t2')</span>
<span id="cb9-2">def python_function2(**kwargs):</span>
<span id="cb9-3">    print(kwargs)</span>
<span id="cb9-4">    print('ds:' + kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ds'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)</span>
<span id="cb9-5">    print('ts:' + str(kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ts'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>))</span>
<span id="cb9-6">    print('data_interval_start:' + str(kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'data_interval_start'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>))</span>
<span id="cb9-7">    print('data_interval_end:' + str(kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'data_interval_end'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>))</span>
<span id="cb9-8">    print('task_instance': + str(kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ti'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>))</span>
<span id="cb9-9">python_function2()</span></code></pre></div></li>
<li><p>Full Example</p>
<ul>
<li>DAGS</li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">from airflow import DAG</span>
<span id="cb10-2">import pendulum</span>
<span id="cb10-3">import datetime</span>
<span id="cb10-4">from airflow.operators.python import PythonOperator</span>
<span id="cb10-5">from airflow.decorators import task</span>
<span id="cb10-6"></span>
<span id="cb10-7">with DAG(</span>
<span id="cb10-8">    dag_id="dags_python_template",</span>
<span id="cb10-9">    schedule="30 9 * * *",</span>
<span id="cb10-10">    start_date=pendulum.datetime(2023, 3, 10, tz="Asia/Seoul"),</span>
<span id="cb10-11">    catchup=False</span>
<span id="cb10-12">) as dag:</span>
<span id="cb10-13"></span>
<span id="cb10-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_function1(start_date, end_date, **kwargs):</span></span>
<span id="cb10-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(start_date)</span></span>
<span id="cb10-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(end_date)</span></span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_t1 = PythonOperator(</span></span>
<span id="cb10-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='python_t1',</span></span>
<span id="cb10-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=python_function1,</span></span>
<span id="cb10-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'start_date':'{{data_interval_start | ds}}', 'end_date':'{{data_interval_end | ds}}'}</span></span>
<span id="cb10-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb10-23"></span>
<span id="cb10-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_t2')</span></span>
<span id="cb10-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_function2(**kwargs):</span></span>
<span id="cb10-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(kwargs)</span></span>
<span id="cb10-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('ds:' + kwargs['ds'])</span></span>
<span id="cb10-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('ts:' + kwargs['ts'])</span></span>
<span id="cb10-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('data_interval_start:' + str(kwargs['data_interval_start']))</span></span>
<span id="cb10-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('data_interval_end:' + str(kwargs['data_interval_end']))</span></span>
<span id="cb10-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('task_instance:' + str(kwargs['ti']))</span></span>
<span id="cb10-32"></span>
<span id="cb10-33"></span>
<span id="cb10-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_t1 &gt;&gt; python_function2() #decorator사용시 함수를 실행주기만 해도 task가 생성되기 때문에 함수를 task로 연결할 수 있다.</span></span></code></pre></div>
<ul>
<li>Airflow Web Service Result</li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"></code></pre></div>
<h1 id="bash-operator-with-macro" data-number="5"><span class="header-section-number">5</span> Bash Operator with Macro</h1></li>
</ul>
</section>
<section id="macro-변수의-이해" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="macro-변수의-이해"><span class="header-section-number">5.1</span> Macro 변수의 이해</h2>
<ul>
<li><p>jinja template 안에서 날짜 연산을 가능하게 해주는 기능</p></li>
<li><p>Macro 변수의 필요성</p>
<ul>
<li>가령, 어떤 DAG의 스케줄은 매일 말일에 도는 스케줄 (0 0 L * *)인데 BETWEEN 값을 전월 마지막일부터 어제 날짜까지 주고 싶은 상황. 즉,</li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1">sql = f'''</span>
<span id="cb12-2">SELECT NAME, ADDRESS</span>
<span id="cb12-3">FROM TBL_REG</span>
<span id="cb12-4">WHERE REG_DATE BETWEEN ?? AND ??</span>
<span id="cb12-5">'''</span></code></pre></div>
<p>날짜 구간을 hard coding 해놓는게 아니라 DAG이 도는 시점에 따라 알맞게 들어가야 함.</p>
<p>예를 들어, 배치일이 1월 31일이면 12월 31일부터 1월 30일 까지 배치일이 2월 28일이면 1월 31일부터 2월 27일까지 BETWEEN 이 설정되어야함 DAG 스케줄이 월 단위이니까 Template 변수에서 data_interval_start 값은 한달 전 말일 이니까 시작일은 해결될 것 같은데 끝 부분은 어떻게 만들지 생각해봐야함 (반드시, data_interval_end 에서 하루 뺀 값이 나와야 하는데)</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">sql = f'''</span>
<span id="cb13-2">SELECT NAME, ADDRESS</span>
<span id="cb13-3">FROM TBL_REG</span>
<span id="cb13-4">WHERE REG_DATE BETWEEN {{ data_interval_start }} AND {{ data_interval_start }} - 1day</span>
<span id="cb13-5">'''</span></code></pre></div>
<p><code>{{ data_interval_start }} - 1day</code> 이 부분 연산을 하는데 macro 변수가 쓰임</p></li>
<li><p><a href="https://airflow.apache.org/docs/apache-airflow/stable/templates-ref.html#macros">Template 변수 기반 다양한 날짜 연산이 가능하도록 연산 모듈을 제공하고 있음</a></p>
<table class="table">
<colgroup>
<col style="width: 40%">
<col style="width: 60%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">Variable</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><strong>macros.datetime</strong></td>
<td>The standard lib’s datetime.datetime, python의 datetime library 를 이용가능하게 하거나 datetime library를 template 변수내에서 날짜 연산 기능</td>
</tr>
<tr class="even">
<td style="text-align: center;">macros.timedelta</td>
<td>The standard lib’s datetime.timedelta, 날짜 연산 기능</td>
</tr>
<tr class="odd">
<td style="text-align: center;"><strong>macros.dateutil</strong></td>
<td>A reference to the dateutil package, python의 dateutil library를 이용가능하게 하거나 dateutil library를 template 변수내에서 이용가능하게 하여 날짜 연산 기능</td>
</tr>
<tr class="even">
<td style="text-align: center;">macros.time</td>
<td>The standard lib’s time, 날짜 연산 기능</td>
</tr>
<tr class="odd">
<td style="text-align: center;">macros.uuid</td>
<td>The standard lib’s uuid, 고유 ID 부여</td>
</tr>
<tr class="even">
<td style="text-align: center;">macros.random</td>
<td>The standard lib’s random, python rand() 사용가능하게 해줌</td>
</tr>
</tbody>
</table>
<ul>
<li>macros.datetime &amp; macros.dateutil: 날짜 연산에 유용한 파이썬 라이브러리, 매우 빈번하게 쓰임</li>
<li>예를 들어, <code>macros.dateutil</code>에서 relativedelta.relativedelta() 함수를 쓸수 있도록 해줌. <code>macros.dateutil.relativedelta.relativedelta()</code></li>
</ul></li>
<li><p>Macro를 잘 쓰려면 python의 datetime 및 dateutil library에 익숙해져야 함.</p></li>
</ul>
</section>
<section id="파이썬-datetime-dateutil-라이브러리-이해" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="파이썬-datetime-dateutil-라이브러리-이해"><span class="header-section-number">5.2</span> 파이썬 datetime + dateutil 라이브러리 이해</h2>
<ul>
<li>만약, jupyter notebook (대화형 입력창)이 없는 환경인데 jupyter notebook에서 python을 실행하고 싶으면 terminal에 다음 명령어를 실행해서 설치
<ul>
<li>대화형 입력창: 일련의 명령어들을 한번에 실행시키는 script code 형식이 아니라 명령어 한줄마다 결과값을 볼 수 있는 창</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">pip install jupyter</span>
<span id="cb14-2">python -m notebook</span></code></pre></div>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime</span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dateutil <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> relativedelta</span>
<span id="cb15-3"></span>
<span id="cb15-4">now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> datetime(year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2003</span>, month<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb15-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'current time:'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(now))</span>
<span id="cb15-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-------------month operation-------------'</span>)</span>
<span id="cb15-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(month<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1월로 변경, relativedelta library 사용</span></span>
<span id="cb15-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now.replace(month<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1월로 변경, datetime library 사용</span></span>
<span id="cb15-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1개월 빼기: 먼저 month 값에서 1을 빼고 그 결과 값(month)의 가장 가까운 말일을 자동으로 선택해줌</span></span>
<span id="cb15-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-------------day operation-------------'</span>)</span>
<span id="cb15-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1일로 변경</span></span>
<span id="cb15-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now.replace(day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1일로 변경</span></span>
<span id="cb15-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(days<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1일 빼기</span></span>
<span id="cb15-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-------------multiple operations-------------'</span>)</span>
<span id="cb15-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(now<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(months<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>relativedelta.relativedelta(days<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#1개월, 1일 빼기. relativedelta library장점이 연산 연러개를 이어 붙일 수 있음</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>current time:2003-03-30 00:00:00
-------------month operation-------------
2003-01-30 00:00:00
2003-01-30 00:00:00
2003-02-28 00:00:00
-------------day operation-------------
2003-03-01 00:00:00
2003-03-01 00:00:00
2003-03-29 00:00:00
-------------multiple operations-------------
2003-02-27 00:00:00</code></pre>
</div>
</div>
</section>
<section id="bash-오퍼레이터에서-macro-변수-활용하기" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="bash-오퍼레이터에서-macro-변수-활용하기"><span class="header-section-number">5.3</span> Bash 오퍼레이터에서 Macro 변수 활용하기</h2>
<ul>
<li><p>예시1. 매월 말일 수행되는 Dag에서 변수 START_DATE: 전월 말일, 변수 END_DATE: 어제로 env 셋팅하기</p></li>
<li><p>예시2. 매월 둘째주 토요일 (6#2)에 수행되는 Dag에서 변수 START_DATE: 2주 전 월요일 변수 END_DATE: 2주 전 토요일로 env 셋팅하기</p></li>
<li><p>변수는 YYYY-MM-DD 형식으로 나오도록 할 것</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb17-1">t1 = BashOperator(</span>
<span id="cb17-2">    task_id='t1',</span>
<span id="cb17-3">    env={'START_DATE':''}, #env 변수에 template 변수를 작성</span>
<span id="cb17-4">)</span></code></pre></div></li>
</ul>
<p>이 부분에 template + macro 활용</p>
<ul>
<li>예시1. DAG full Exmaple</li>
</ul>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb18-1">from airflow import DAG</span>
<span id="cb18-2">import pendulum</span>
<span id="cb18-3">from airflow.operators.bash import BashOperator</span>
<span id="cb18-4"></span>
<span id="cb18-5">with DAG(</span>
<span id="cb18-6">    dag_id="dags_bash_with_macro_eg1",</span>
<span id="cb18-7">    schedule="10 0 L * *", #매월 말일날 도는 DAG</span>
<span id="cb18-8">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb18-9">    catchup=False</span>
<span id="cb18-10">) as dag:</span>
<span id="cb18-11">    # START_DATE: 전월 말일, END_DATE: 1일 전</span>
<span id="cb18-12">    bash_task_1 = BashOperator(</span>
<span id="cb18-13">        task_id='bash_task_1',</span>
<span id="cb18-14">        env={'START_DATE':'{{ data_interval_start.in_timezone("Asia/Seoul") | ds }}',</span>
<span id="cb18-15">             #template 변수에 꺼내쓰는 모든 날짜 변수는 default로 timezone이 UTC로 맞춰져있기 때문에 현지에 맞게 고쳐줘야한다.</span>
<span id="cb18-16">             #data_interval_start.in_timezone("Asia/Seoul")는 timestamp형식으로 출력되기 때문에 yyyy-mm-dd로 출력하기위해 ds 연산 붙임</span>
<span id="cb18-17">             'END_DATE':'{{ (data_interval_end.in_timezone("Asia/Seoul") - macros.dateutil.relativedelta.relativedelta(days=1)) | ds}}'</span>
<span id="cb18-18">        },</span>
<span id="cb18-19">        bash_command='echo "START_DATE: $START_DATE" &amp;&amp; echo "END_DATE: $END_DATE"'</span>
<span id="cb18-20">    )</span></code></pre></div>
<ul>
<li>예시2. DAG full Exmaple</li>
</ul>
<pre><code>from airflow import DAG
import pendulum
from airflow.operators.bash import BashOperator

with DAG(
    dag_id="dags_bash_with_macro_eg2",
    schedule="10 0 * * 6#2",
    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),
    catchup=False
) as dag:
    # START_DATE: 2주전 월요일, END_DATE: 2주전 토요일
    # 예를 들어, 2023-04-01 토요일은 첫째 주 토요일로 인식
    # 2023-04-08 토요일은 둘째 주 토요일로 인식 (군대에서 순서를 세는 방식과 다름)
    # 2023-04-08 토요일을 START_DATE(배치일)로 정하면 END_DATE는 배치일 기준으로부터 2 주를 뺀 토요일은 2023-03-25가 된다.
    # 배치일 기준 (2023-04-08 토요일)으로 그 전 배치의 START_DATE를 구하려면 END_DATE로부터 5일을 뺀 날짜인 2023-03-20 (월요일)이 START_DATE가 된다.
    # 이는 즉, 배치일 기준 (2023-04-08 토요일) 19일을 빼준 날짜와 같다.
    bash_task_2 = BashOperator(
        task_id='bash_task_2',
        env={'START_DATE':'{{ (data_interval_end.in_timezone("Asia/Seoul") - macros.dateutil.relativedelta.relativedelta(days=19)) | ds}}', #2주전 월요일
             'END_DATE':'{{ (data_interval_end.in_timezone("Asia/Seoul") - macros.dateutil.relativedelta.relativedelta(days=14)) | ds}}' #2주전 툐요일
        },
        bash_command='echo "START_DATE: $START_DATE" &amp;&amp; echo "END_DATE: $END_DATE"'
    )</code></pre>
</section>
</section>
<section id="python-오퍼레이터-with-macro" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Python 오퍼레이터 with macro</h1>
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/operators/python/index.html">Template 변수를 지원하는 parameters</a></li>
<li>패러미터
<ul>
<li>python_callable (Callable | None)</li>
<li>op_kwargs (Templated)</li>
<li>op_args (Templated)</li>
<li>templates_dict (Templated)</li>
<li>templates_exts</li>
<li>show_return_value_in_logs</li>
</ul>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb20-1">@task(task_id='task_using_macros',</span>
<span id="cb20-2">    templates_dict={'start_date':'{{ (data_interval_end.in_timezone("Asia/Seoul")</span>
<span id="cb20-3">    #templates 변수를 꺼내온 값들을 key:value 형태로 꺼내온 뒤</span>
<span id="cb20-4">    #get_datetime_macro(**kwargs)의 **kwargs에 전달된다. </span>
<span id="cb20-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">+ </span>macros.dateutil.relativedelta.relativedelta(months=-1, day=1)) | ds }}',</span>
<span id="cb20-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 배치일로 부터 한달을 빼고 일 1로 함. 즉, 전월 1일</span></span>
<span id="cb20-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 예를 들어, 배치일이 3월 15일이라면 2월 1일로 end_date를 설정한다.</span></span>
<span id="cb20-8">'end_date': '{{</span>
<span id="cb20-9">(data_interval_end.in_timezone("Asia/Seoul").replace(day=1) +</span>
<span id="cb20-10">macros.dateutil.relativedelta.relativedelta(days=-1)) | ds }}'</span>
<span id="cb20-11">    }</span>
<span id="cb20-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># end_date는 배치일이 3월 15일이라면 2월 28일로 된다.</span></span>
<span id="cb20-13"></span>
<span id="cb20-14">)</span>
<span id="cb20-15"></span>
<span id="cb20-16">def get_datetime_macro(**kwargs):</span>
<span id="cb20-17">    templates_dict = kwargs.get('templates_dict') or {} # kwargs.get('templates_dict')이 빈값이면 {}로 할당</span>
<span id="cb20-18">    if templates_dict:</span>
<span id="cb20-19">    start_date = templates_dict.get('start_date') or 'start_date없음'</span>
<span id="cb20-20">    end_date = templates_dict.get('end_date') or 'end_date없음'</span>
<span id="cb20-21">    print(start_date)</span>
<span id="cb20-22">    print(end_date)</span></code></pre></div>
<ul>
<li>get_datetime_macro(<strong>kwargs)의 templates_dict에는 {‘start_date’:’{{ (data_interval_end.in_timezone(“Asia/Seoul”) #templates 변수를 꺼내온 값들을 key:value 형태로 꺼내온 뒤 #get_datetime_macro(</strong>kwargs)의 **kwargs에 전달된다.</li>
<li>macros.dateutil.relativedelta.relativedelta(months=-1, day=1)) | ds }}‘, ’end_date’: ‘{{ (data_interval_end.in_timezone(“Asia/Seoul”).replace(day=1) + macros.dateutil.relativedelta.relativedelta(days=-1)) | ds }}’ } 전체가 들어감</li>
</ul></li>
<li>그러나 Python 오퍼레이터에서 굳이 macro를 사용할 필요가 있을까? 날짜 연산을 python 문법을 이용해서 DAG 안에서 직접 연산하면 macro 변수를 사용안해도 날짜를 계산할 수 있음.
<ul>
<li>macro 사용 : template 변수 내에서 macro를 이용해 날짜를 반환 후에 start_date에 할당</li>
</ul>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb21-1">@task(task_id='task_using_macros',</span>
<span id="cb21-2">    templates_dict={'start_date':'{{ (data_interval_end.in_timezone("Asia/Seoul") + macros.dateutil.relativedelta.relativedelta(months=-1,day=1)) | ds }}',</span>
<span id="cb21-3">    'end_date': '{{ (data_interval_end.in_timezone("Asia/Seoul").replace(day=1) +</span>
<span id="cb21-4">    macros.dateutil.relativedelta.relativedelta(days=-1)) | ds }}'</span>
<span id="cb21-5">    }</span>
<span id="cb21-6">)</span>
<span id="cb21-7"></span>
<span id="cb21-8">def get_datetime_macro(**kwargs):</span>
<span id="cb21-9">    templates_dict = kwargs.get('templates_dict') or {}</span>
<span id="cb21-10">    if templates_dict:</span>
<span id="cb21-11">        start_date = templates_dict.get('start_date') or 'start_date없음'</span>
<span id="cb21-12">        end_date = templates_dict.get('end_date') or 'end_date없음'</span>
<span id="cb21-13">        print(start_date)</span>
<span id="cb21-14">        print(end_date)</span></code></pre></div>
<ul>
<li>python 문법을 사용하여 직접 연산: 라이브러리를 이용해 날짜를 연산</li>
</ul>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb22-1">@task(task_id='task_direct_calc')</span>
<span id="cb22-2">def get_datetime_calc(**kwargs):</span>
<span id="cb22-3">    from dateutil.relativedelta import relativedelta #relativedelta함수 직접 import</span>
<span id="cb22-4">    data_interval_end = kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'data_interval_end'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> #data_interval_end는 datetime type</span>
<span id="cb22-5">prev_month_day_first = data_interval_end.in_timezone('Asia/Seoul') + relativedelta(months=-1, day=1) #data_interval_end는 datetime type에는 in_timezone() method가 있음</span>
<span id="cb22-6">prev_month_day_last = data_interval_end.in_timezone('Asia/Seoul').replace(day=1) + relativedelta(days=-1)</span>
<span id="cb22-7">print(prev_month_day_first.strftime('%Y-%m-%d')) # | ds 구현</span>
<span id="cb22-8">print(prev_month_day_last.strftime('%Y-%m-%d'))  # | ds 구현</span></code></pre></div></li>
<li>예시: Dags full example</li>
</ul>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb23-1">from airflow import DAG</span>
<span id="cb23-2">import pendulum</span>
<span id="cb23-3">from airflow.decorators import task</span>
<span id="cb23-4"></span>
<span id="cb23-5"></span>
<span id="cb23-6"></span>
<span id="cb23-7">with DAG(</span>
<span id="cb23-8">    dag_id="dags_python_with_macro",</span>
<span id="cb23-9">    schedule="10 0 * * *",</span>
<span id="cb23-10">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb23-11">    catchup=False</span>
<span id="cb23-12">) as dag:</span>
<span id="cb23-13">    </span>
<span id="cb23-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # macro 이용</span></span>
<span id="cb23-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='task_using_macros',</span></span>
<span id="cb23-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">      templates_dict={'start_date':'{{ (data_interval_end.in_timezone("Asia/Seoul") + macros.dateutil.relativedelta.relativedelta(months=-1, day=1)) | ds }}',</span></span>
<span id="cb23-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                      'end_date': '{{ (data_interval_end.in_timezone("Asia/Seoul").replace(day=1) + macros.dateutil.relativedelta.relativedelta(days=-1)) | ds }}'</span></span>
<span id="cb23-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">     }</span></span>
<span id="cb23-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb23-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb23-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def get_datetime_macro(**kwargs):</span></span>
<span id="cb23-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        </span></span>
<span id="cb23-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        templates_dict = kwargs.get('templates_dict') or {}</span></span>
<span id="cb23-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if templates_dict:</span></span>
<span id="cb23-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            start_date = templates_dict.get('start_date') or 'start_date없음'</span></span>
<span id="cb23-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            end_date = templates_dict.get('end_date') or 'end_date없음'</span></span>
<span id="cb23-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            print(start_date)</span></span>
<span id="cb23-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            print(end_date)</span></span>
<span id="cb23-29"></span>
<span id="cb23-30"></span>
<span id="cb23-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # python 이용</span></span>
<span id="cb23-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='task_direct_calc')</span></span>
<span id="cb23-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def get_datetime_calc(**kwargs):</span></span>
<span id="cb23-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        from dateutil.relativedelta import relativedelta # 스케쥴러 부하 경감을 위해 task안에다가 library호출</span></span>
<span id="cb23-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # 다시 말해서, scheduler는 dag이 실행되지 않더라도 사용자가 작성한 dag을 주기적으로 문법적인 오류가 있는지를 검사하기 위해 parsing함</span></span>
<span id="cb23-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # DAG이 시작하기 이전 code (즉, `with DAG` 이전 부분) 와 task가 시작하기 이전 code (`as dag:` 이후 부분과 task 선언 이전 부분)를 parsing 및 검사</span></span>
<span id="cb23-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # 하지만 operator 안 과 task decorator안에 있는 부분은 parsing 및 검사하지 않음.</span></span>
<span id="cb23-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # 실제로 대형 프로젝트에서 겪는 scheduluer부하 문제를 해결하는 팁이 될 수 있음</span></span>
<span id="cb23-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        data_interval_end = kwargs['data_interval_end']</span></span>
<span id="cb23-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        prev_month_day_first = data_interval_end.in_timezone('Asia/Seoul') + relativedelta(months=-1, day=1)</span></span>
<span id="cb23-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        prev_month_day_last = data_interval_end.in_timezone('Asia/Seoul').replace(day=1) +  relativedelta(days=-1)</span></span>
<span id="cb23-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(prev_month_day_first.strftime('%Y-%m-%d'))</span></span>
<span id="cb23-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(prev_month_day_last.strftime('%Y-%m-%d'))</span></span>
<span id="cb23-44"></span>
<span id="cb23-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    get_datetime_macro() &gt;&gt; get_datetime_calc()</span></span></code></pre></div>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/05.template_variable.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Share</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/06.data_share.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="python-오퍼레이터-with-xcom" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Python 오퍼레이터 With Xcom</h1>
<section id="xcom-definition" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="xcom-definition"><span class="header-section-number">1.1</span> Xcom Definition</h2>
<ul>
<li>Xcom stands for Cross Communication.</li>
<li>Airflow DAG 안 Task 간 데이터 공유를 위해 사용되는 기술 (Dag 안에 있는 task끼리만 data 공유)
<ul>
<li>예를 들여, Task1의 수행 중 내용이나 결과를 Task2에서 사용 또는 입력으로 주고 싶은 경우</li>
</ul></li>
<li>주로 작은 규모의 데이터 공유를 위해 사용
<ul>
<li>Xcom 내용은 메타 DB의 xcom 테이블에 값이 저장됨</li>
<li>1GB 이상의 대용량 데이터 공유를 위해서는 외부 솔루션 사용 필요 (AWS의 S3, GCP의 GCS, HDFS (Hadoop File System) 등)</li>
</ul></li>
</ul>
</section>
</section>
<section id="python-오퍼레이터에서-xcom-사용하기" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Python 오퍼레이터에서 Xcom 사용하기</h1>
<ul>
<li>크게 두 가지 방법으로 Xcom 사용 가능
<ol type="1">
<li>**kwargs에 존재하는 ti (task_instance) 객체 활용</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">@task(task_id='python_xcom_push_task')</span>
<span id="cb1-2">def xcom_push(**kwargs):</span>
<span id="cb1-3">    ti = kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ti'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-4">    ti.xcom_push(key="result1", value="value_1") </span>
<span id="cb1-5">    ti.xcom_push(key="result2", value=<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1,2,3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>)</span>
<span id="cb1-6">    #xcom_push: xcom에다가 data를 올릴 수 있음</span>
<span id="cb1-7">    #data를 올릴 때는 key:value 형태로 올리기</span>
<span id="cb1-8">    #template 변수에서 task_instance 라는 객체를 얻을 수 있으며 task_instance 객체가 가진 xcom_push 메서드를 활용할 수 있음</span>
<span id="cb1-9"></span>
<span id="cb1-10">@task(task_id='python_xcom_pull_task')</span>
<span id="cb1-11">def xcom_pull(**kwargs):</span>
<span id="cb1-12">    ti = kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ti'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-13">    value_key1 = ti.xcom_pull(key="result1") # value_1이 value_key1에 저장됨</span>
<span id="cb1-14">    value_key2 = ti.xcom_pull(key="result2",</span>
<span id="cb1-15">    task_ids='python_xcom_push_task') # <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1,2,3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>이 value_key2에 저장됨</span>
<span id="cb1-16">    #xcom_pull: xcom으로부터 data를 내려 받을 수 있음</span>
<span id="cb1-17">    #data를 올릴 때는 key:value 형태로 올리기</span>
<span id="cb1-18">    print(value_key1)</span>
<span id="cb1-19">    print(value_key2)</span></code></pre></div>
<ul>
<li>xcome_pull()을 할때 key값만 줘도 되고 key값과 task_ids값을 둘다 줘도 된다.
<ul>
<li>key값만 줘도 될때
<ul>
<li>xcom_push를 한 task가 1개 밖에 없을 때 사용 가능</li>
<li>혹은, key값이 중복될 때 xcom_push를 한 task가 여러 개 있을 때도 사용 가능한데 가장 마지막 (최신) task의 key값을 호출 한다.</li>
<li>만약, key값이 중복이 되지 않는 다면 key값만으로도 data를 내려 받을 수 있다.</li>
</ul></li>
<li>key값과 task_ids둘다 줘야할 때
<ul>
<li>key값이 중복되는 xcom_push를 한 task가 여러 개 있을 때 선택적으로 원하는 task의 data를 가지고 오고 싶으면 해당 task의 task_ids를 명시적으로 적어줘야한다.</li>
</ul></li>
</ul></li>
</ul>
<ol start="2" type="1">
<li>파이썬 함수의 return 값 활용
<ul>
<li>(1안)</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">@task(task_id='xcom_push_by_return')</span>
<span id="cb2-2">def xcom_push_by_return(**kwargs):</span>
<span id="cb2-3">    transaction_value = 'status Good'</span>
<span id="cb2-4">    return transaction_value</span>
<span id="cb2-5">@task(task_id='xcom_pull_by_return')</span>
<span id="cb2-6">def xcom_pull_by_return(status, **kwargs):</span>
<span id="cb2-7">    print(status)</span>
<span id="cb2-8">xcom_pull_by_return(xcom_push_by_return()) </span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># xcom을 이용한 task의 flow 정해주는 또 다른 방식</span></span>
<span id="cb2-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 암묵적인 task의 순서: xcom_push_by_return() &gt;&gt; xcom_pull_by_return()</span></span>
<span id="cb2-11"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 위의 스크립트에서 xcom_pull() 또는 xcom_push()가 명시적으로 쓰이진 않았지만</span></span>
<span id="cb2-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># airflow에서는 **Task 데커레이터 사용시** 함수 입력/출력 관계만으로 </span></span>
<span id="cb2-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># Task flow 정의가 되고 custom 함수가 return을 하게 되면 자동으로 xcom에 data가 올라가게 된다.</span></span></code></pre></div>
<ul>
<li>(2안)</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">@task(task_id='xcom_push_by_return')</span>
<span id="cb3-2">def xcom_push_return(**kwargs):</span>
<span id="cb3-3">    transaction_value = 'status Good'</span>
<span id="cb3-4">    return transaction_value</span>
<span id="cb3-5">    # return 한 값은 자동으로 xcom에 key='return_value', task_ids=task_id 로 저장됨</span>
<span id="cb3-6">@task(task_id='xcom_pull_by_return')</span>
<span id="cb3-7">def xcom_pull_return_by_method(**kwargs):</span>
<span id="cb3-8">    ti = kwargs<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ti'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-9">    pull_value = ti.xcom_pull(key='return_value', task_ids='xcom_push_by_return')</span>
<span id="cb3-10">    # ti.xcom_pull()을 이용하여 return 한 값을 꺼낼 때는 key를 명시하지 않아도 됨. (자동으로 key=return_value 를 찾음)</span>
<span id="cb3-11">    # task_ids='xcom_push_by_return' return한 Task가 여러개 있을 때는 task_ids 를 지정</span>
<span id="cb3-12">    print(pull_value)</span>
<span id="cb3-13">xcom_push_by_return() &gt;&gt; xcom_pull_by_return() # 2안에서는 task flow를 명시적으로 적어줘야함.</span></code></pre></div>
<ul>
<li>1안 DAG Full Exmaple</li>
</ul>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">from airflow import DAG</span>
<span id="cb4-2">import pendulum</span>
<span id="cb4-3">import datetime</span>
<span id="cb4-4">from airflow.decorators import task</span>
<span id="cb4-5"></span>
<span id="cb4-6">with DAG(</span>
<span id="cb4-7">    dag_id="dags_python_with_xcom_eg2",</span>
<span id="cb4-8">    schedule="30 6 * * *",</span>
<span id="cb4-9">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb4-10">    catchup=False</span>
<span id="cb4-11">) as dag:</span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_xcom_push_by_return')</span></span>
<span id="cb4-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def xcom_push_result(**kwargs):</span></span>
<span id="cb4-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return 'Success'</span></span>
<span id="cb4-16"></span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_xcom_pull_1')</span></span>
<span id="cb4-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def xcom_pull_1(**kwargs):</span></span>
<span id="cb4-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ti = kwargs['ti']</span></span>
<span id="cb4-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        value1 = ti.xcom_pull(task_ids='python_xcom_push_by_return')</span></span>
<span id="cb4-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('xcom_pull 메서드로 직접 찾은 리턴 값:' + value1)</span></span>
<span id="cb4-23"></span>
<span id="cb4-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_xcom_pull_2')</span></span>
<span id="cb4-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def xcom_pull_2(status, **kwargs):</span></span>
<span id="cb4-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('함수 입력값으로 받은 값:' + status)</span></span>
<span id="cb4-27"></span>
<span id="cb4-28"></span>
<span id="cb4-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_xcom_push_by_return = xcom_push_result() </span></span>
<span id="cb4-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # airflow의 task decorator가 쓰였기 때문에 python_xcom_push_by_return에 </span></span>
<span id="cb4-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 단순한 'Sucess' 스트링이 할당되는게 아니라 decorator object가 할당된다.</span></span>
<span id="cb4-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    xcom_pull_2(python_xcom_push_by_return)</span></span>
<span id="cb4-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_xcom_push_by_return &gt;&gt; xcom_pull_1()</span></span>
<span id="cb4-34"></span>
<span id="cb4-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 암묵적인 task flow는</span></span>
<span id="cb4-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # xcom_push_result &gt;&gt;[xcom_pull_2, xcom_pull_1] 형태임</span></span></code></pre></div>
<ul>
<li>2안 DAG Full Example</li>
</ul>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1">from airflow import DAG</span>
<span id="cb5-2">import pendulum</span>
<span id="cb5-3">import datetime</span>
<span id="cb5-4">from airflow.decorators import task</span>
<span id="cb5-5"></span>
<span id="cb5-6">with DAG(</span>
<span id="cb5-7">    dag_id="dags_python_with_xcom_eg1",</span>
<span id="cb5-8">    schedule="30 6 * * *",</span>
<span id="cb5-9">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb5-10">    catchup=False</span>
<span id="cb5-11">) as dag:</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_xcom_push_task1')</span></span>
<span id="cb5-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def xcom_push1(**kwargs):</span></span>
<span id="cb5-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ti = kwargs['ti']</span></span>
<span id="cb5-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ti.xcom_push(key="result1", value="value_1")</span></span>
<span id="cb5-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ti.xcom_push(key="result2", value=[1,2,3])</span></span>
<span id="cb5-18"></span>
<span id="cb5-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_xcom_push_task2')</span></span>
<span id="cb5-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def xcom_push2(**kwargs):</span></span>
<span id="cb5-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ti = kwargs['ti']</span></span>
<span id="cb5-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ti.xcom_push(key="result1", value="value_2") </span></span>
<span id="cb5-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        # python_xcom_push_task1의 key값은 같지만 value는 다름</span></span>
<span id="cb5-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ti.xcom_push(key="result2", value=[1,2,3,4])</span></span>
<span id="cb5-25"></span>
<span id="cb5-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_xcom_pull_task')</span></span>
<span id="cb5-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def xcom_pull(**kwargs):</span></span>
<span id="cb5-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ti = kwargs['ti']</span></span>
<span id="cb5-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        value1 = ti.xcom_pull(key="result1")</span></span>
<span id="cb5-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        value2 = ti.xcom_pull(key="result2", task_ids='python_xcom_push_task1')</span></span>
<span id="cb5-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(value1)</span></span>
<span id="cb5-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(value2)</span></span>
<span id="cb5-33"></span>
<span id="cb5-34"></span>
<span id="cb5-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    xcom_push1() &gt;&gt; xcom_push2() &gt;&gt; xcom_pull()</span></span>
<span id="cb5-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # xcom_pull()에서 key값이 result1으로만 명시되었기 때문에 value1에는 xcom_push2()의 'value_2'가 들어감    </span></span></code></pre></div></li>
</ol></li>
<li>airflow web service에서 log 대신 xcom을 사용해 결과값을 확인</li>
</ul>
<section id="summary" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="summary"><span class="header-section-number">2.1</span> Summary</h2>
<ul>
<li>Xcom push 방법
<ul>
<li>ti.xcom_push 명시적 사용</li>
<li>함수 return</li>
</ul></li>
<li>Xcom pull 방법
<ul>
<li>ti.xcom_pull 명시적 사용</li>
<li>return 값을 input으로 사용</li>
</ul></li>
</ul>
</section>
</section>
<section id="bash-오퍼레이터-with-xcom" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Bash 오퍼레이터 With Xcom</h1>
<section id="bash-오퍼레이터에서-xcom-사용하기" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="bash-오퍼레이터에서-xcom-사용하기"><span class="header-section-number">3.1</span> Bash 오퍼레이터에서 Xcom 사용하기</h2>
<ul>
<li>Bash 오퍼레이터는 env, bash_command 파라미터에서 Template 이용하여 push/pull</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">bash_push = BashOperator(</span>
<span id="cb6-2">    task_id='bash_push',</span>
<span id="cb6-3">    bash_command="echo START &amp;&amp; "</span>
<span id="cb6-4">                "echo XCOM_PUSHED "</span>
<span id="cb6-5">                "{{ ti.xcom_push(key='bash_pushed',value='first_bash_message') }} &amp;&amp; "</span>
<span id="cb6-6">                "echo COMPLETE" </span>
<span id="cb6-7">                # bash 같은 경우엔 출력하는 값이 return값으로 간주됨. </span>
<span id="cb6-8">                # 위의 경우와 같이 여러 출력문이 있을 경우 마지막 출력문은 자동으로 return_value 에 저장됨</span>
<span id="cb6-9">)</span>
<span id="cb6-10">bash_pull = BashOperator(</span>
<span id="cb6-11">    task_id='bash_pull',</span>
<span id="cb6-12">    env={'PUSHED_VALUE':"{{ ti.xcom_pull(key='bash_pushed') }}",</span>
<span id="cb6-13">        'RETURN_VALUE':"{{ ti.xcom_pull(task_ids='bash_push') }}"}, </span>
<span id="cb6-14">        # env 는 key: value 형태로 데이터를 받음</span>
<span id="cb6-15">        # task_ids 만 지정하면 key='return_value' 를 의미함</span>
<span id="cb6-16">        # RETURN_VALUE에 'complete'이 들어감</span>
<span id="cb6-17">    bash_command="echo $PUSHED_VALUE &amp;&amp; echo $RETURN_VALUE ",</span>
<span id="cb6-18">    do_xcom_push=False </span>
<span id="cb6-19">    # bash_command에서 출력되는 "echo $PUSHED_VALUE &amp;&amp; echo $RETURN_VALUE "의 </span>
<span id="cb6-20">    # 출력문을 자동으로 xcom에 올리지 말라는 의미</span>
<span id="cb6-21">)</span></code></pre></div>
<ul>
<li>Dags Full Example</li>
</ul>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">from airflow import DAG</span>
<span id="cb7-2">import pendulum</span>
<span id="cb7-3">import datetime</span>
<span id="cb7-4">from airflow.operators.bash import BashOperator</span>
<span id="cb7-5"></span>
<span id="cb7-6">with DAG(</span>
<span id="cb7-7">    dag_id="dags_bash_with_xcom",</span>
<span id="cb7-8">    schedule="10 0 * * *",</span>
<span id="cb7-9">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb7-10">    catchup=False</span>
<span id="cb7-11">) as dag:</span>
<span id="cb7-12">    bash_push = BashOperator(</span>
<span id="cb7-13">    task_id='bash_push',</span>
<span id="cb7-14">    bash_command="echo START &amp;&amp; "</span>
<span id="cb7-15">                 "echo XCOM_PUSHED "</span>
<span id="cb7-16">                 "{{ ti.xcom_push(key='bash_pushed',value='first_bash_message') }} &amp;&amp; "</span>
<span id="cb7-17">                 "echo COMPLETE"</span>
<span id="cb7-18">    )</span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_pull = BashOperator(</span></span>
<span id="cb7-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='bash_pull',</span></span>
<span id="cb7-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        env={'PUSHED_VALUE':"{{ ti.xcom_pull(key='bash_pushed') }}",</span></span>
<span id="cb7-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            'RETURN_VALUE':"{{ ti.xcom_pull(task_ids='bash_push') }}"},</span></span>
<span id="cb7-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command="echo $PUSHED_VALUE &amp;&amp; echo $RETURN_VALUE ",</span></span>
<span id="cb7-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        do_xcom_push=False</span></span>
<span id="cb7-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb7-27"></span>
<span id="cb7-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_push &gt;&gt; bash_pull</span></span></code></pre></div>
</section>
<section id="summary-1" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="summary-1"><span class="header-section-number">3.2</span> Summary</h2>
<ul>
<li>Bash_command에 의해 출력된 값은 자동으로 return_value로 저장된다 (마지막 출력 문장만)</li>
<li>return_value를 꺼낼 때는 xcom_pull에서 task_ids 값만 줘도 된다.</li>
<li>키가 지정된 xcom 값을 꺼낼 때는 key 값만 줘도 된다 (단, 다른 task에서 동일 key로 push 하지 않았을 때만)</li>
</ul>
</section>
</section>
<section id="python-bash-오퍼레이터-with-xcom" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Python &amp; Bash 오퍼레이터 With Xcom</h1>
<section id="python-rightarrow-bash-오퍼레이터-xcom-전달" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="python-rightarrow-bash-오퍼레이터-xcom-전달"><span class="header-section-number">4.1</span> Python <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> Bash 오퍼레이터 Xcom 전달</h2>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">@task task_id =='python push'</span>
<span id="cb8-2">def python_push_xcom</span>
<span id="cb8-3">    result_dict = {'status':' Good','data':<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">1,2,3</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>,'options_cnt': 100}</span>
<span id="cb8-4">    return result_dict</span>
<span id="cb8-5">bash_pull = BashOperator(</span>
<span id="cb8-6">    task_id='bash_pull',</span>
<span id="cb8-7">    env={</span>
<span id="cb8-8">        'STATUS': '{{ti.xcom_pull(task ids="python push")<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"status"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>}}',</span>
<span id="cb8-9">        'DATA': '{{ti.xcom_pull(task ids="python push")<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"data"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>}}',</span>
<span id="cb8-10">        'OPTIONS_CNT': '{{ti.xcom_pull(task_ids="python_push")<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"options_cnt"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>}}'</span>
<span id="cb8-11">    },</span>
<span id="cb8-12">    bash_command = 'echo $STATUS &amp;&amp; echo $DATA &amp;&amp; echo $OPTIONS_CNT'</span>
<span id="cb8-13">)</span>
<span id="cb8-14"> </span>
<span id="cb8-15">python_push_xcom() &gt;&gt; bash_pull</span></code></pre></div>
</section>
<section id="bash-rightarrow-python-오퍼레이터-xcom-전달" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="bash-rightarrow-python-오퍼레이터-xcom-전달"><span class="header-section-number">4.2</span> Bash <img src="https://latex.codecogs.com/png.latex?%5Crightarrow"> Python 오퍼레이터 Xcom 전달</h2>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1">bash_push = BashOperator(</span>
<span id="cb9-2">task_id ='bash_push',</span>
<span id="cb9-3">bash_command='echo PUSH_START'</span>
<span id="cb9-4">    '{{ti.xcom_push(key="bash_pushed",value=200) }}&amp;&amp; 'echo PUSH_COMPLETE'</span>
<span id="cb9-5">)</span>
<span id="cb9-6"></span>
<span id="cb9-7">@task(task_id =='python_pull')</span>
<span id="cb9-8">def python_pull_xcom(**kwargs): </span>
<span id="cb9-9">    ti = kwargs <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'ti'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-10">    status_value= ti.xcom_pull(key ='bash_pushed')</span>
<span id="cb9-11">    return_value= ti.xcom_pull(task_ids ='bash_push')</span>
<span id="cb9-12">    print('status_value:'+ str (status_value))</span>
<span id="cb9-13">    print('return_value:'+ return_value)</span>
<span id="cb9-14">    bash_push&gt;&gt; python_pull_xcom()</span></code></pre></div>
<ul>
<li>DAG Full Example</li>
</ul>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">from airflow import DAG</span>
<span id="cb10-2">import pendulum</span>
<span id="cb10-3">from airflow.decorators import task</span>
<span id="cb10-4">from airflow.operators.bash import BashOperator</span>
<span id="cb10-5"></span>
<span id="cb10-6">with DAG(</span>
<span id="cb10-7">    dag_id="dags_bash_python_with_xcom",</span>
<span id="cb10-8">    schedule="30 9 * * *",</span>
<span id="cb10-9">    start_date=pendulum.datetime(2023, 4, 1, tz="Asia/Seoul"),</span>
<span id="cb10-10">    catchup=False</span>
<span id="cb10-11">) as dag:</span>
<span id="cb10-12"></span>
<span id="cb10-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_push')</span></span>
<span id="cb10-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_push_xcom():</span></span>
<span id="cb10-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        result_dict = {'status':'Good','data':[1,2,3],'options_cnt':100}</span></span>
<span id="cb10-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return result_dict</span></span>
<span id="cb10-17"></span>
<span id="cb10-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_pull = BashOperator(</span></span>
<span id="cb10-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='bash_pull',</span></span>
<span id="cb10-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        env={</span></span>
<span id="cb10-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            'STATUS':'{{ti.xcom_pull(task_ids="python_push")["status"]}}',</span></span>
<span id="cb10-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            'DATA':'{{ti.xcom_pull(task_ids="python_push")["data"]}}',</span></span>
<span id="cb10-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            'OPTIONS_CNT':'{{ti.xcom_pull(task_ids="python_push")["options_cnt"]}}'</span></span>
<span id="cb10-24"></span>
<span id="cb10-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        },</span></span>
<span id="cb10-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='echo $STATUS &amp;&amp; echo $DATA &amp;&amp; echo $OPTIONS_CNT'</span></span>
<span id="cb10-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb10-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_push_xcom() &gt;&gt; bash_pull</span></span>
<span id="cb10-29"></span>
<span id="cb10-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_push = BashOperator(</span></span>
<span id="cb10-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_id='bash_push',</span></span>
<span id="cb10-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_command='echo PUSH_START '</span></span>
<span id="cb10-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                 '{{ti.xcom_push(key="bash_pushed",value=200)}} &amp;&amp; '</span></span>
<span id="cb10-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                 'echo PUSH_COMPLETE'</span></span>
<span id="cb10-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb10-36"></span>
<span id="cb10-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_pull')</span></span>
<span id="cb10-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_pull_xcom(**kwargs):</span></span>
<span id="cb10-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ti = kwargs['ti']</span></span>
<span id="cb10-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        status_value = ti.xcom_pull(key='bash_pushed')</span></span>
<span id="cb10-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return_value = ti.xcom_pull(task_ids='bash_push')</span></span>
<span id="cb10-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('status_value:' + str(status_value))</span></span>
<span id="cb10-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('return_value:' + return_value)</span></span>
<span id="cb10-44"></span>
<span id="cb10-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_push &gt;&gt; python_pull_xcom()</span></span></code></pre></div>
</section>
</section>
<section id="python-email-오퍼레이터-with-xcom" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Python &amp; Email 오퍼레이터 With Xcom</h1>
<section id="python-email-오퍼레이터-xcom-전달" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="python-email-오퍼레이터-xcom-전달"><span class="header-section-number">5.1</span> Python → Email 오퍼레이터 Xcom 전달</h2>
<ul>
<li>Email 오퍼레이터를 이용하여 Xcom을 받아와야함</li>
<li>Email 오퍼레이터는 어떤 파라미터에 Template를 쓸 수 있는가?</li>
<li>파라미터
<ul>
<li>to</li>
<li>subject</li>
<li>html_content</li>
<li>files</li>
<li>cc</li>
<li>bcc</li>
<li>nime_subtype</li>
<li>mime_charset</li>
<li>custom_headers</li>
</ul></li>
</ul>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1">@task(task_id='something_task') # python operator를 task decorator로 만듦</span>
<span id="cb11-2">def some_logic(**kwargs):</span>
<span id="cb11-3">    from random import choice </span>
<span id="cb11-4">    #choice module은 list, tuple, string 중 아무 값이나 꺼낼 수 있게 해주는 함수</span>
<span id="cb11-5">    return choice(<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'Success','Fail'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>) # either Success or Fail is return됨</span>
<span id="cb11-6">send_email = EmailOperator(</span>
<span id="cb11-7">    task_id='send_email',</span>
<span id="cb11-8">    to='hjkim_sun@naver.com',</span>
<span id="cb11-9">    subject='{{ data_interval_end.in_timezone("Asia/Seoul") | ds }} some_logic 처리결과',</span>
<span id="cb11-10">    html_content='{{ data_interval_end.in_timezone("Asia/Seoul") | ds }} 처리 결과는 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;br&gt;</span> \ {{ti.xcom_pull(task_ids="something_task")}} 했습니다 <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;br&gt;</span>'</span>
<span id="cb11-11">)</span></code></pre></div>
<ul>
<li>DAG Full Example</li>
</ul>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1">from airflow import DAG</span>
<span id="cb12-2">import pendulum</span>
<span id="cb12-3">import datetime</span>
<span id="cb12-4">from airflow.decorators import task</span>
<span id="cb12-5">from airflow.operators.email import EmailOperator</span>
<span id="cb12-6"></span>
<span id="cb12-7">with DAG(</span>
<span id="cb12-8">    dag_id="dags_python_email_operator",</span>
<span id="cb12-9">    schedule="0 8 1 * *",</span>
<span id="cb12-10">    start_date=pendulum.datetime(2023, 3, 1, tz="Asia/Seoul"),</span>
<span id="cb12-11">    catchup=False</span>
<span id="cb12-12">) as dag:</span>
<span id="cb12-13">    </span>
<span id="cb12-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='something_task')</span></span>
<span id="cb12-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def some_logic(**kwargs):</span></span>
<span id="cb12-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        from random import choice </span></span>
<span id="cb12-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return choice(['Success','Fail'])</span></span>
<span id="cb12-18"></span>
<span id="cb12-19"></span>
<span id="cb12-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    send_email = EmailOperator(</span></span>
<span id="cb12-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='send_email',</span></span>
<span id="cb12-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        to='hjkim_sun@naver.com',</span></span>
<span id="cb12-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        subject='{{ data_interval_end.in_timezone("Asia/Seoul") | ds }} some_logic 처리결과',</span></span>
<span id="cb12-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        html_content='{{ data_interval_end.in_timezone("Asia/Seoul") | ds }} 처리 결과는 &lt;br&gt; \</span></span>
<span id="cb12-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                    {{ti.xcom_pull(task_ids="something_task")}} 했습니다 &lt;br&gt;'</span></span>
<span id="cb12-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb12-27"></span>
<span id="cb12-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    some_logic() &gt;&gt; send_email</span></span>
<span id="cb12-29"></span></code></pre></div>
</section>
</section>
<section id="전역변수-variable-이용하기" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> 전역변수 Variable 이용하기</h1>
<ul>
<li>Xcom: 특정 DAG, 특정 schedule 에 수행되는 Task 간에만 공유</li>
<li>variable: 모든 DAG 이 공유할 수 있는 전역 변수 사용</li>
<li>Variable 등록하기
<ul>
<li>airflow web service에서 전역 변수 등록 가능
<ul>
<li>airflow web service의 Admin &gt;&gt; Variables &gt;&gt; Plus Button &gt;&gt; Key, Val, Description 작성 &gt;&gt; save</li>
</ul></li>
<li>실제 Variable 의 Key, Value 값은 메타 DB 에 저장됨 (variable 테이블)
<ol type="1">
<li>Variable 라이브러리 이용 , 파이썬 문법을 이용해 미리 가져오기</li>
</ol>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">from airflow operators bash import BashOperator</span>
<span id="cb13-2">from airflow models import Variable </span>
<span id="cb13-3"></span>
<span id="cb13-4">var_value = Variable.get('sample_key')</span>
<span id="cb13-5">bash_var_1= BashOperator(</span>
<span id="cb13-6">    task_id = "bash_var_1",</span>
<span id="cb13-7">    bash_command = f "echo variable:{var_value}"" </span>
<span id="cb13-8">)</span></code></pre></div>
<ul>
<li>스케줄러의 주기적 DAG 파싱시 Variable.get 개수만큼 DB 연결을 일으켜 불필요한 부하 발생 스케줄러 과부하 원인 중 하나
<ul>
<li>주기적으로 아래 코드를 실행함</li>
</ul>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">from airflow models import Variable </span>
<span id="cb14-2">var_value = Variable.get('sample_key')</span></code></pre></div></li>
</ul>
<ol start="2" type="1">
<li>Jinja 템플릿 이용 , 오퍼레이터 내부에서 가져오기 (권고)
<ul>
<li>스케쥴러는 Operator 안에 작성된 내용은 parsing 및 실행해보지 않음</li>
</ul>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb15-1">from airflow operators bash import BashOperator</span>
<span id="cb15-2">bash_var_2= BashOperator(</span>
<span id="cb15-3">task_id="bash_var_2",</span>
<span id="cb15-4">bash_command= f "echo variable: {{var.value.sample_key}}"</span>
<span id="cb15-5">)</span></code></pre></div></li>
</ol></li>
</ul></li>
<li>그런데 이 전역변수는 언제 , 어떻게 쓰면 좋을까
<ul>
<li>협업 환경에서 표준화된 dag 을 만들기 위해 주로 사용. 개발자들마다 서로 다르게 사용하지 말아야할 주로 상수 (CONST) 로 지정해서 사용할 변수들 셋팅</li>
<li>예) base_sh_dir = /opt/airflow/plugins/shell. shell file 의 위치를 고정</li>
<li>예) base_file_dir = /opt/airflow/plugins/files</li>
<li>예) email, Alert 메시지를 받을 담당자의 email 주소 정보</li>
</ul></li>
<li>Dags Full Example</li>
</ul>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"></span>
<span id="cb16-2">from airflow import DAG</span>
<span id="cb16-3">import pendulum</span>
<span id="cb16-4">from airflow.operators.bash import BashOperator</span>
<span id="cb16-5">from airflow.models import Variable</span>
<span id="cb16-6"></span>
<span id="cb16-7">with DAG(</span>
<span id="cb16-8">    dag_id="dags_bash_with_variable",</span>
<span id="cb16-9">    schedule="10 9 * * *",</span>
<span id="cb16-10">    start_date=pendulum.datetime(2023, 4, 1, tz="Asia/Seoul"),</span>
<span id="cb16-11">    catchup=False</span>
<span id="cb16-12">) as dag:</span>
<span id="cb16-13">    </span>
<span id="cb16-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    #권고하지 않음</span></span>
<span id="cb16-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    var_value = Variable.get("sample_key")</span></span>
<span id="cb16-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_var_1 = BashOperator(</span></span>
<span id="cb16-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_id="bash_var_1",</span></span>
<span id="cb16-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_command=f"echo variable:{var_value}"</span></span>
<span id="cb16-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb16-20"></span>
<span id="cb16-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    #권고함</span></span>
<span id="cb16-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_var_2 = BashOperator(</span></span>
<span id="cb16-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_id="bash_var_2",</span></span>
<span id="cb16-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    bash_command="echo variable:{{var.value.sample_key}}"</span></span>
<span id="cb16-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span></code></pre></div>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>
<section id="go-to-blog-content-list" class="level1" data-number="7">
<h1 data-number="7"><span class="header-section-number">7</span> Go to Blog Content List</h1>
<p><a href="../../../../../docs/blog/posts/content_list.html">Blog Content List</a></p>


</section>

</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/06.data_share.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Template Variabler</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/07.task_handling.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="task-분기-처리하기-with-branchpythonoperator" class="level1" data-number="1">
<h1 data-number="1"><span class="header-section-number">1</span> Task 분기 처리하기 With BranchPythonOperator</h1>
<section id="task-분기-처리-유형" class="level2" data-number="1.1">
<h2 data-number="1.1" class="anchored" data-anchor-id="task-분기-처리-유형"><span class="header-section-number">1.1</span> Task 분기 처리 유형</h2>
<ul>
<li>Task 분기처리가 필요한 이유</li>
</ul>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 189.55 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 185.55,-205 185.55,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 173.55,-193 173.55,-8 8,-8"></polygon> <text text-anchor="middle" x="90.78" y="-176.4" font-family="Times,serif" font-size="14.00">Task Flow</text> </g> <!-- task1 --> <g id="node1" class="node">
<title>
task1
</title>
<polygon fill="none" stroke="black" points="70,-106 16,-106 16,-70 70,-70 70,-106"></polygon> <text text-anchor="middle" x="43" y="-83.8" font-family="Times,serif" font-size="14.00">task1</text> </g> <!-- task2_1 --> <g id="node2" class="node">
<title>
task2_1
</title>
<polygon fill="none" stroke="black" points="165.33,-52 106.22,-52 106.22,-16 165.33,-16 165.33,-52"></polygon> <text text-anchor="middle" x="135.78" y="-29.8" font-family="Times,serif" font-size="14.00">task2_1</text> </g> <!-- task1&#45;&gt;task2_1 --> <g id="edge1" class="edge">
<title>
task1-&gt;task2_1
</title>
<path fill="none" stroke="black" d="M70.26,-72.38C78.66,-67.38 88.14,-61.74 97.18,-56.36"></path> <polygon fill="black" stroke="black" points="99.23,-59.22 106.04,-51.1 95.65,-53.2 99.23,-59.22"></polygon> </g> <!-- task2_2 --> <g id="node3" class="node">
<title>
task2_2
</title>
<polygon fill="none" stroke="black" points="165.33,-106 106.22,-106 106.22,-70 165.33,-70 165.33,-106"></polygon> <text text-anchor="middle" x="135.78" y="-83.8" font-family="Times,serif" font-size="14.00">task2_2</text> </g> <!-- task1&#45;&gt;task2_2 --> <g id="edge2" class="edge">
<title>
task1-&gt;task2_2
</title>
<path fill="none" stroke="black" d="M70.26,-88C78.22,-88 87.15,-88 95.77,-88"></path> <polygon fill="black" stroke="black" points="96.04,-91.5 106.04,-88 96.04,-84.5 96.04,-91.5"></polygon> </g> <!-- task2_3 --> <g id="node4" class="node">
<title>
task2_3
</title>
<polygon fill="none" stroke="black" points="165.33,-160 106.22,-160 106.22,-124 165.33,-124 165.33,-160"></polygon> <text text-anchor="middle" x="135.78" y="-137.8" font-family="Times,serif" font-size="14.00">task2_3</text> </g> <!-- task1&#45;&gt;task2_3 --> <g id="edge3" class="edge">
<title>
task1-&gt;task2_3
</title>
<path fill="none" stroke="black" d="M70.26,-103.62C78.66,-108.62 88.14,-114.26 97.18,-119.64"></path> <polygon fill="black" stroke="black" points="95.65,-122.8 106.04,-124.9 99.23,-116.78 95.65,-122.8"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li>위와 같이 task1이 실행된 후 여러 후차적인 task를 병렬로 실행해야할 때 task flow에서</li>
<li>task1의 결과에 따라 선택적으로 task2-x 중 하나만 수행하도록 구성해야 할 때가 있다.</li>
<li>eg) Task1 의 결과로 ‘Good’,’Bad’,’Pending’ 이라는 결과 3 개 중 하나가 나오고 그에 따라 ask2-1 ~ task2-3 중 하나가 실행되도록 해야 할 경우</li>
</ul>
</section>
<section id="airflow에서-지원하는-task-분기처리-방법" class="level2" data-number="1.2">
<h2 data-number="1.2" class="anchored" data-anchor-id="airflow에서-지원하는-task-분기처리-방법"><span class="header-section-number">1.2</span> Airflow에서 지원하는 Task 분기처리 방법</h2>
<ul>
<li>Task 분기처리 방법 3가지
<ul>
<li>BranchPythonOperator</li>
<li>task.branch 데커레이터 이용</li>
<li>BaseBranchOperator 상속하여 클래스를 직접 개발</li>
</ul></li>
</ul>
<section id="branchpythonoperator" class="level3" data-number="1.2.1">
<h3 data-number="1.2.1" class="anchored" data-anchor-id="branchpythonoperator"><span class="header-section-number">1.2.1</span> BranchPythonOperator</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"></span>
<span id="cb1-2">def select_random():</span>
<span id="cb1-3">    import random</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    item_lst= ['A','B','C']</span></span>
<span id="cb1-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    selected_item = random.choice(item_lst)</span></span>
<span id="cb1-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    if selected_item == 'A';</span></span>
<span id="cb1-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return 'task_a' # task_id를 string 값으로 return해야함</span></span>
<span id="cb1-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    elif selected_item in ['B','C] </span></span>
<span id="cb1-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        return ['task_b','task_c'] # 여러 task를 동시에 수행시킬 땐 리스트로 반환</span></span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;"># 일반 operator의 parameter도 있음</span></span>
<span id="cb1-13">python_branch_task = BranchPythonOperator(</span>
<span id="cb1-14">    task_id ='python_branch_task',</span>
<span id="cb1-15">    python_callable=select_random #select_random function 호출</span>
<span id="cb1-16">)</span>
<span id="cb1-17"></span>
<span id="cb1-18">python_branch_task &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task_a , task_b , task_c</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 259.53 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 255.53,-205 255.53,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 243.53,-193 243.53,-8 8,-8"></polygon> <text text-anchor="middle" x="125.77" y="-176.4" font-family="Times,serif" font-size="14.00">Task Flow</text> </g> <!-- python_branch_task --> <g id="node1" class="node">
<title>
python_branch_task
</title>
<polygon fill="none" stroke="black" points="145.3,-106 16.23,-106 16.23,-70 145.3,-70 145.3,-106"></polygon> <text text-anchor="middle" x="80.77" y="-83.8" font-family="Times,serif" font-size="14.00">python_branch_task</text> </g> <!-- task_a --> <g id="node2" class="node">
<title>
task_a
</title>
<polygon fill="none" stroke="black" points="235.53,-52 181.53,-52 181.53,-16 235.53,-16 235.53,-52"></polygon> <text text-anchor="middle" x="208.53" y="-29.8" font-family="Times,serif" font-size="14.00">task_a</text> </g> <!-- python_branch_task&#45;&gt;task_a --> <g id="edge1" class="edge">
<title>
python_branch_task-&gt;task_a
</title>
<path fill="none" stroke="black" d="M123.99,-69.87C139.56,-63.18 157.04,-55.68 171.96,-49.27"></path> <polygon fill="black" stroke="black" points="173.55,-52.4 181.35,-45.24 170.78,-45.97 173.55,-52.4"></polygon> </g> <!-- task_b --> <g id="node3" class="node">
<title>
task_b
</title>
<polygon fill="none" stroke="black" points="235.53,-106 181.53,-106 181.53,-70 235.53,-70 235.53,-106"></polygon> <text text-anchor="middle" x="208.53" y="-83.8" font-family="Times,serif" font-size="14.00">task_b</text> </g> <!-- python_branch_task&#45;&gt;task_b --> <g id="edge2" class="edge">
<title>
python_branch_task-&gt;task_b
</title>
<path fill="none" stroke="black" d="M145.39,-88C154.28,-88 163.16,-88 171.3,-88"></path> <polygon fill="black" stroke="black" points="171.53,-91.5 181.53,-88 171.53,-84.5 171.53,-91.5"></polygon> </g> <!-- task_c --> <g id="node4" class="node">
<title>
task_c
</title>
<polygon fill="none" stroke="black" points="235.53,-160 181.53,-160 181.53,-124 235.53,-124 235.53,-160"></polygon> <text text-anchor="middle" x="208.53" y="-137.8" font-family="Times,serif" font-size="14.00">task_c</text> </g> <!-- python_branch_task&#45;&gt;task_c --> <g id="edge3" class="edge">
<title>
python_branch_task-&gt;task_c
</title>
<path fill="none" stroke="black" d="M123.99,-106.13C139.56,-112.82 157.04,-120.32 171.96,-126.73"></path> <polygon fill="black" stroke="black" points="170.78,-130.03 181.35,-130.76 173.55,-123.6 170.78,-130.03"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li>Dags Full Example</li>
</ul>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">from airflow import DAG</span>
<span id="cb2-2">import pendulum</span>
<span id="cb2-3">from airflow.operators.python import PythonOperator</span>
<span id="cb2-4">from airflow.operators.python import BranchPythonOperator</span>
<span id="cb2-5"></span>
<span id="cb2-6">with DAG(</span>
<span id="cb2-7">    dag_id='dags_branch_python_operator',</span>
<span id="cb2-8">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'), </span>
<span id="cb2-9">    schedule='0 1 * * *',</span>
<span id="cb2-10">    catchup=False</span>
<span id="cb2-11">) as dag:</span>
<span id="cb2-12">    def select_random():</span>
<span id="cb2-13">        import random</span>
<span id="cb2-14"></span>
<span id="cb2-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        item_lst = ['A','B','C']</span></span>
<span id="cb2-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        selected_item = random.choice(item_lst)</span></span>
<span id="cb2-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        if selected_item == 'A':</span></span>
<span id="cb2-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            return 'task_a' # task_id를 string 값으로 return해야함</span></span>
<span id="cb2-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        elif selected_item in ['B','C']:</span></span>
<span id="cb2-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            return ['task_b','task_c'] # 여러 task를 동시에 수행시킬 땐 리스트로 반환</span></span>
<span id="cb2-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 일반 operator의 parameter도 있음</span></span>
<span id="cb2-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_branch_task = BranchPythonOperator(</span></span>
<span id="cb2-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='python_branch_task',</span></span>
<span id="cb2-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=select_random</span></span>
<span id="cb2-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb2-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    # 후행 task 3개</span></span>
<span id="cb2-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def common_func(**kwargs):</span></span>
<span id="cb2-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(kwargs['selected'])</span></span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_a = PythonOperator(</span></span>
<span id="cb2-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_a',</span></span>
<span id="cb2-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb2-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'A'}</span></span>
<span id="cb2-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-37"></span>
<span id="cb2-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_b = PythonOperator(</span></span>
<span id="cb2-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_b',</span></span>
<span id="cb2-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb2-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'B'}</span></span>
<span id="cb2-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-43"></span>
<span id="cb2-44"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_c = PythonOperator(</span></span>
<span id="cb2-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_c',</span></span>
<span id="cb2-46"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb2-47"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'C'}</span></span>
<span id="cb2-48"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb2-49"></span>
<span id="cb2-50"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    python_branch_task &gt;&gt; [task_a, task_b, task_c]</span></span></code></pre></div>
<ul>
<li>나의 경우 airflow web service상에서 1회 실행 시켰을 때 selected_item의 값이 task_b, task_b가 선택됐음
<ul>
<li>graph 버튼을 눌러 보면 가장 최근에 돌았던 task들이 return 된다.</li>
<li>task_a가 분홍색 박스로 skipped 상태인 것을 확인 할 수 있다.</li>
<li>graph에서 python_branch_task를 누르고 xcom을 누르면 다음과 같은 table을 확인할 수 있다.</li>
</ul>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;">Key</th>
<th style="text-align: left;">Value</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">skipmixin_key</td>
<td style="text-align: left;">{‘followed’: [‘task_c’, ‘task_b’]}</td>
</tr>
<tr class="even">
<td style="text-align: left;">return_value</td>
<td style="text-align: left;">[‘task_b’, ‘task_c’]</td>
</tr>
</tbody>
</table>
<ul>
<li>여기서 <code>skipmixin_key</code> 의 value값의 key 값이 ‘followed’ 이고 [‘task_c’, ‘task_b’] 인 것을 볼 수 있다. 필요시 어떤 task들이 선택되었는지 확인하려면 xcom을 통해 확인 가능하다.</li>
<li>log 를 보면</li>
</ul>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-23, 23:20:01 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {python.py:183} INFO - Done. Returned value was: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b', 'task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-23, 23:20:01 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {python.py:216} INFO - Branch callable return <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b', 'task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-23, 23:20:01 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {skipmixin.py:161} INFO - Following branch <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b', 'task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-23, 23:20:01 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {skipmixin.py:221} INFO - Skipping tasks <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_a'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>    </span></code></pre></div></li>
</ul>
</section>
</section>
</section>
<section id="task-분기처리하기-with-task.branch" class="level1" data-number="2">
<h1 data-number="2"><span class="header-section-number">2</span> Task 분기처리하기 with task.branch</h1>
<section id="task.branch-이해-branchpythonoperator-vs-task.branch-decorator" class="level2" data-number="2.1">
<h2 data-number="2.1" class="anchored" data-anchor-id="task.branch-이해-branchpythonoperator-vs-task.branch-decorator"><span class="header-section-number">2.1</span> Task.branch 이해: BranchPythonOperator vs task.branch Decorator</h2>
<div class="columns">
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">from airflow.operators.python import BranchPythonOperator</span>
<span id="cb4-2">def select_random(): </span>
<span id="cb4-3">    import random</span>
<span id="cb4-4">    item_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'A','B','C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-5">    selected_item = random.choice(item_lst)</span>
<span id="cb4-6">    if selected_item == 'A':</span>
<span id="cb4-7">        return 'task_a'</span>
<span id="cb4-8">    elif selected_item in <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'B','C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-9">        return <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b','task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-10"></span>
<span id="cb4-11">python_branch_task = BranchPythonOperator(</span>
<span id="cb4-12">    task_id= 'branching',</span>
<span id="cb4-13">    python_callable = select_random</span>
<span id="cb4-14">)</span>
<span id="cb4-15">python_branch_task &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task_a , task_b , task_c</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</div><div class="column" style="width:50%;">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1">from airflow.operators.python import task</span>
<span id="cb5-2"></span>
<span id="cb5-3">@task.branch(task_id='python_branch_task')</span>
<span id="cb5-4">def select_random(): </span>
<span id="cb5-5">    import random</span>
<span id="cb5-6">    item_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'A','B','C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-7">    selected_item = random.choice(item_lst)</span>
<span id="cb5-8">    if selected_item == 'A':</span>
<span id="cb5-9">        return 'task_a'</span>
<span id="cb5-10">    elif selected_item in <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'B','C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-11">        return <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b','task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">select_random() &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task_a , task_b , task_c</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
</div>
</div>
<ul>
<li>BranchPythonOperator와 비교하여 select_random()을 호출 또는 맵핑 하는 방식이 decorator에서는 <code>@task.branch(task_id='python_branch_task')</code>으로 표현 되었고 task flow를 표현하는 task connection 방식도 <code>select_random() &gt;&gt; [task_a , task_b , task_c]</code> 로 표현 됐다.</li>
<li>BranchPythonOperator의 <code>python_branch_task</code> object와 task.branch의 select_random()는 사실상 같은 객체이다.</li>
<li>Dags Full Example</li>
</ul>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">from airflow import DAG</span>
<span id="cb6-2">from datetime import datetime</span>
<span id="cb6-3">from airflow.operators.python import PythonOperator</span>
<span id="cb6-4">from airflow.decorators import task</span>
<span id="cb6-5"></span>
<span id="cb6-6">with DAG(</span>
<span id="cb6-7">    dag_id='dags_python_with_branch_decorator',</span>
<span id="cb6-8">    start_date=datetime(2023,4,1),</span>
<span id="cb6-9">    schedule=None,</span>
<span id="cb6-10">    catchup=False</span>
<span id="cb6-11">) as dag:</span>
<span id="cb6-12">    @task.branch(task_id='python_branch_task')</span>
<span id="cb6-13">    def select_random():</span>
<span id="cb6-14">        import random</span>
<span id="cb6-15">        item_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'A', 'B', 'C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-16">        selected_item = random.choice(item_lst)</span>
<span id="cb6-17">        if selected_item == 'A':</span>
<span id="cb6-18">            return 'task_a'</span>
<span id="cb6-19">        elif selected_item in <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'B','C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>:</span>
<span id="cb6-20">            return <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'task_b','task_c'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-21">    </span>
<span id="cb6-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def common_func(**kwargs):</span></span>
<span id="cb6-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print(kwargs['selected'])</span></span>
<span id="cb6-24"></span>
<span id="cb6-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_a = PythonOperator(</span></span>
<span id="cb6-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_a',</span></span>
<span id="cb6-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb6-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'A'}</span></span>
<span id="cb6-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-30"></span>
<span id="cb6-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_b = PythonOperator(</span></span>
<span id="cb6-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_b',</span></span>
<span id="cb6-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb6-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'B'}</span></span>
<span id="cb6-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-36"></span>
<span id="cb6-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_c = PythonOperator(</span></span>
<span id="cb6-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_c',</span></span>
<span id="cb6-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable=common_func,</span></span>
<span id="cb6-40"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'selected':'C'}</span></span>
<span id="cb6-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb6-42"></span>
<span id="cb6-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    select_random() &gt;&gt; [task_a, task_b, task_c]</span></span></code></pre></div>
<ul>
<li>airflow web service의 결과물은 BranchPythonOperator나 decorator나 같았음</li>
</ul>
</section>
</section>
<section id="task-분기처리하기-with-basebranchoperator" class="level1" data-number="3">
<h1 data-number="3"><span class="header-section-number">3</span> Task 분기처리하기 With BaseBranchOperator</h1>
<section id="basebranchoperator-이해-요약" class="level2" data-number="3.1">
<h2 data-number="3.1" class="anchored" data-anchor-id="basebranchoperator-이해-요약"><span class="header-section-number">3.1</span> BaseBranchOperator 이해 요약</h2>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">from airflow.operators.branch import BaseBranchOperator</span>
<span id="cb7-2">with DAG(...</span>
<span id="cb7-3">) as dag:</span>
<span id="cb7-4">    class CustomBranchOperator(BaseBranchOperator): #클래스 이름은 임의로 지정해 줌</span>
<span id="cb7-5">    #class className(상속할className):</span>
<span id="cb7-6">        def choose_branch(self,context): #함수 재정의 : Overriding, 함수 이름 바꾸면 안됨!</span>
<span id="cb7-7">        # parameter도 바꾸면 안됨</span>
<span id="cb7-8">            import random</span>
<span id="cb7-9">            print(context) # context에 어떤 내용이 있는지 출력</span>
<span id="cb7-10"></span>
<span id="cb7-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            item_lst = ['A', 'B','C]</span></span>
<span id="cb7-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            selected_item = random.choice(item_lst)</span></span>
<span id="cb7-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            if selected_item == 'A':</span></span>
<span id="cb7-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                return 'task_a'</span></span>
<span id="cb7-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            elif selected_item in ['B','C']:</span></span>
<span id="cb7-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">                return ['task_b','task_c']</span></span>
<span id="cb7-17"></span>
<span id="cb7-18">custom_branch_operator = CustomBranchOperator(task_id ='python_branch_task')</span>
<span id="cb7-19">custom_branch_operator &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task_a , task_b , task_c</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<ul>
<li>클래스 상속 BaseBranchOperator 상속시 choose_branch 함수를 구현해 줘야 함</li>
<li><code>CustomBranchOperator</code> 클래스 이름은 임의로 지정해 줌</li>
<li>class 선언시 <code>class childClass(상속할parentClass):</code> 상속할 부모클래스를 2개이상 지정하는 다중 상속이 가능하긴 하지만 권고하지 않음.</li>
<li><code>choose_branch()</code> 함수를 만든 이유를 알기 위해선 BaseBranchOperator class에 대해서 알아야함
<ul>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/_api/airflow/operators/branch/index.html">airflow operators-airflow.operators.branch</a> :::{.callout-note} ## Description</li>
</ul>
Bases: airflow.models.baseoperator.BaseOperator, airflow.models.skipmixin.SkipMixin A base class for creating operators with branching functionality, like to BranchPythonOperator. <strong>Users should create a subclass from this operator and implement the function choose_branch(self, context). This should run whatever business logic is needed to determine the branch, and return either the task_id for a single task (as a str) or a list of task_ids</strong>. The operator will continue with the returned task_id(s), and all other tasks directly downstream of this operator will be skipped. :::
<ul>
<li>함수명과 인자명도 반드시 일치시켜야함</li>
<li><code>choose_branch(self,context)</code>의 context는 pythonOperator 쓸때 **kwargs의 parameters들을 사용할 수 있게 해주는 parameter</li>
<li><code>print(context)</code> 결과</li>
</ul>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">2023-06-24, 00:29:33 UTC</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> {logging_mixin.py:149} INFO - {'conf': &lt;***.configuration.AirflowConfigParser object at 0x7fc3d5dd2cd0&gt;, 'dag': &lt;DAG: dags_base_branch_operator&gt;, 'dag_run': &lt;DagRun dags_base_branch_operator @ 2023-06-24 00:29:31.444830+00:00: manual__2023-06-24T00:29:31.444830+00:00, state:running, queued_at: 2023-06-24 00:29:31.455604+00:00. externally triggered: True&gt;, 'data_interval_end': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'data_interval_start': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'ds': '2023-06-24', 'ds_nodash': '20230624', 'execution_date': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'expanded_ti_count': None, 'inlets': [], 'logical_date': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'macros': &lt;module '***.macros' from '/home/***/.local/lib/python3.7/site-packages/***/macros/__init__.py'&gt;, 'next_ds': '2023-06-24', 'next_ds_nodash': '20230624', 'next_execution_date': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'outlets': [], 'params': {}, 'prev_data_interval_start_success': None, 'prev_data_interval_end_success': None, 'prev_ds': '2023-06-24', 'prev_ds_nodash': '20230624', 'prev_execution_date': DateTime(2023, 6, 24, 0, 29, 31, 444830, tzinfo=Timezone('UTC')), 'prev_execution_date_success': None, 'prev_start_date_success': None, 'run_id': 'manual__2023-06-24T00:29:31.444830+00:00', 'task': &lt;Task(CustomBranchOperator): python_branch_task&gt;, 'task_instance': &lt;TaskInstance: dags_base_branch_operator.python_branch_task manual__2023-06-24T00:29:31.444830+00:00 [running]&gt;, 'task_instance_key_str': 'dags_base_branch_operator__python_branch_task__20230624', 'test_mode': False, 'ti': &lt;TaskInstance: dags_base_branch_operator.python_branch_task manual__2023-06-24T00:29:31.444830+00:00 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">running</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>&gt;, 'tomorrow_ds': '2023-06-25', 'tomorrow_ds_nodash': '20230625', 'triggering_dataset_events': <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;Proxy</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">at</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">0x7fc3ab28c8c0</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">with</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">factory</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&lt;function</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">TaskInstance.get_template_context.&lt;locals</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&gt;</span>.get_triggering_events at 0x7fc3ab277c20&gt;&gt;, 'ts': '2023-06-24T00:29:31.444830+00:00', 'ts_nodash': '20230624T002931', 'ts_nodash_with_tz': '20230624T002931.444830+0000', 'var': {'json': None, 'value': None}, 'conn': None, 'yesterday_ds': '2023-06-23', 'yesterday_ds_nodash': '20230623'}</span></code></pre></div></li>
<li>분기 처리 결과는 다른 2 방식의 결과와 같음</li>
</ul>
</section>
<section id="summary" class="level2" data-number="3.2">
<h2 data-number="3.2" class="anchored" data-anchor-id="summary"><span class="header-section-number">3.2</span> Summary</h2>
<ul>
<li>Task 분기처리 방법
<ol type="1">
<li>BranchPythonOperator</li>
<li>task.branch 데커레이터 이용</li>
<li>BaseBranchOperator 상속 , choose_branch 를 재정의해야 함</li>
</ol></li>
<li>공통적으로 리턴 값으로 후행 Task 의 id 를 str 또는 list 로 리턴해야 함</li>
<li>3가지 분기처리 방법은 방법만 다를 뿐 결과는 동일함</li>
<li>3 보다는 1 또는 2를 주로 사용함</li>
</ul>
</section>
</section>
<section id="trigger-rule" class="level1" data-number="4">
<h1 data-number="4"><span class="header-section-number">4</span> Trigger Rule</h1>
<section id="trigger-rule-종류" class="level2" data-number="4.1">
<h2 data-number="4.1" class="anchored" data-anchor-id="trigger-rule-종류"><span class="header-section-number">4.1</span> Trigger Rule 종류</h2>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 184.00 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 180,-205 180,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 168,-193 168,-8 8,-8"></polygon> <text text-anchor="middle" x="88" y="-176.4" font-family="Times,serif" font-size="14.00">Task Flow</text> </g> <!-- task1 --> <g id="node1" class="node">
<title>
task1
</title>
<polygon fill="none" stroke="black" points="70,-160 16,-160 16,-124 70,-124 70,-160"></polygon> <text text-anchor="middle" x="43" y="-137.8" font-family="Times,serif" font-size="14.00">task1</text> </g> <!-- task4 --> <g id="node4" class="node">
<title>
task4
</title>
<polygon fill="none" stroke="black" points="160,-106 106,-106 106,-70 160,-70 160,-106"></polygon> <text text-anchor="middle" x="133" y="-83.8" font-family="Times,serif" font-size="14.00">task4</text> </g> <!-- task1&#45;&gt;task4 --> <g id="edge1" class="edge">
<title>
task1-&gt;task4
</title>
<path fill="none" stroke="black" d="M70.4,-125.8C78.83,-120.63 88.29,-114.82 97.22,-109.34"></path> <polygon fill="black" stroke="black" points="99.23,-112.22 105.92,-104 95.57,-106.25 99.23,-112.22"></polygon> </g> <!-- task2 --> <g id="node2" class="node">
<title>
task2
</title>
<polygon fill="none" stroke="black" points="70,-106 16,-106 16,-70 70,-70 70,-106"></polygon> <text text-anchor="middle" x="43" y="-83.8" font-family="Times,serif" font-size="14.00">task2</text> </g> <!-- task2&#45;&gt;task4 --> <g id="edge2" class="edge">
<title>
task2-&gt;task4
</title>
<path fill="none" stroke="black" d="M70.4,-88C78.39,-88 87.31,-88 95.82,-88"></path> <polygon fill="black" stroke="black" points="95.92,-91.5 105.92,-88 95.92,-84.5 95.92,-91.5"></polygon> </g> <!-- task3 --> <g id="node3" class="node">
<title>
task3
</title>
<polygon fill="none" stroke="black" points="70,-52 16,-52 16,-16 70,-16 70,-52"></polygon> <text text-anchor="middle" x="43" y="-29.8" font-family="Times,serif" font-size="14.00">task3</text> </g> <!-- task3&#45;&gt;task4 --> <g id="edge3" class="edge">
<title>
task3-&gt;task4
</title>
<path fill="none" stroke="black" d="M70.4,-50.2C78.83,-55.37 88.29,-61.18 97.22,-66.66"></path> <polygon fill="black" stroke="black" points="95.57,-69.75 105.92,-72 99.23,-63.78 95.57,-69.75"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
<ul>
<li>branch와 반대되는 개념으로</li>
<li>여러 상위 Task 들의 상태에 따라 후행 task의 수행여부 결정할 때 쓰인다</li>
<li>기본 값 : 여러 상위 Task들이 모두 성공시에만 수행</li>
<li>상위 task의 수행 상태에 따라 조건적으로 후행 task의 수행 여부를 결정할 수 있다.</li>
</ul>
<table class="table">
<colgroup>
<col style="width: 73%">
<col style="width: 26%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;">Default</th>
<th style="text-align: left;">Left</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">all_success (default)</td>
<td style="text-align: left;">상위 task 가 모두 성공하면 실행</td>
</tr>
<tr class="even">
<td style="text-align: left;">all_failed</td>
<td style="text-align: left;">상위 task 가 모두 실패하면 실행</td>
</tr>
<tr class="odd">
<td style="text-align: left;">all_done</td>
<td style="text-align: left;">상위 task 가 모두 수행되면 실행 (실패도 수행된것에 포함)</td>
</tr>
<tr class="even">
<td style="text-align: left;">all_skipped</td>
<td style="text-align: left;">상위 task 가 모두 Skipped 상태면 실행</td>
</tr>
<tr class="odd">
<td style="text-align: left;">one_failed</td>
<td style="text-align: left;">상위 task 중 하나 이상 실패하면 실행 (모든 상위 Task 완료를 기다리지 않음)</td>
</tr>
<tr class="even">
<td style="text-align: left;">one_success</td>
<td style="text-align: left;">상위 task 중 하나 이상 성공하면 실행 (모든 상위 Task 완료를 기다리지 않음)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">one_done</td>
<td style="text-align: left;">상위 task 중 하나 이상 성공 또는 실패 하면 실행</td>
</tr>
<tr class="even">
<td style="text-align: left;">none_failed</td>
<td style="text-align: left;">상위 task 중 실패가 없는 경우 실행 (성공 또는 Skipped 상태)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">none_failed_min_one_success</td>
<td style="text-align: left;">상위 task 중 실패가 없고 성공한 Task가 적어도 1개 이상이면 실행</td>
</tr>
<tr class="even">
<td style="text-align: left;">none_skipped</td>
<td style="text-align: left;">Skip된 상위 Task가 없으면 실행 (상위 Task가 성공, 실패하여도 무방)</td>
</tr>
<tr class="odd">
<td style="text-align: left;">always</td>
<td style="text-align: left;">언제나 실행</td>
</tr>
</tbody>
</table>
<ul>
<li>위의 표에서 모든 상위 task를 기다리지 않음은 각 각의 상위 task들의 처리 시간이 다를 때 가장 빠르게 처리되는 상위 task에 따라서 후행 task가 수행된다는 것을 의미한다.</li>
</ul>
</section>
<section id="trigger-rule-실습-trigger_rule-all_done" class="level2" data-number="4.2">
<h2 data-number="4.2" class="anchored" data-anchor-id="trigger-rule-실습-trigger_rule-all_done"><span class="header-section-number">4.2</span> 2. Trigger Rule 실습) trigger_rule = all_done</h2>
<ul>
<li>아래 예시에서 4개의 task가 정의됨</li>
</ul>
<div class="columns">
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1"></span>
<span id="cb9-2">bash_upstream_1 = BashOperator(</span>
<span id="cb9-3">    task_id = 'bash_upstream_1',</span>
<span id="cb9-4">    bash_command = 'echo upstream1'</span>
<span id="cb9-5">)</span>
<span id="cb9-6"></span>
<span id="cb9-7">@task(task_id =='python_upstream_1')</span>
<span id="cb9-8">def python_upstream_1():</span>
<span id="cb9-9">    AirflowException('downstream_1 Exception!') # task 실패처리가됨</span>
<span id="cb9-10"></span>
<span id="cb9-11">@task(task_id =='python_upstream_2')</span>
<span id="cb9-12">def python_upstream_2():</span>
<span id="cb9-13">    print('정상 처리')</span>
<span id="cb9-14"></span>
<span id="cb9-15">@task(task_id ='python_downstream_1', trigger_rule ='all_done')</span>
<span id="cb9-16">def python_downstream_1():</span>
<span id="cb9-17">    print('정상 처리')</span>
<span id="cb9-18"></span>
<span id="cb9-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">bash_upstream_1 , python_upstream_1(), python_upstream_2()</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; python_downstream_1()</span></code></pre></div>
</div><div class="column" style="width:50%;">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 347.52 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 343.52,-205 343.52,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 331.52,-193 331.52,-8 8,-8"></polygon> <text text-anchor="middle" x="169.76" y="-176.4" font-family="Times,serif" font-size="14.00">Task Flow</text> </g> <!-- bash_upstream_1 --> <g id="node1" class="node">
<title>
bash_upstream_1
</title>
<polygon fill="none" stroke="black" points="136.58,-160 22.62,-160 22.62,-124 136.58,-124 136.58,-160"></polygon> <text text-anchor="middle" x="79.6" y="-137.8" font-family="Times,serif" font-size="14.00">bash_upstream_1</text> </g> <!-- python_downstream_1 --> <g id="node4" class="node">
<title>
python_downstream_1
</title>
<polygon fill="none" stroke="black" points="323.68,-106 179.05,-106 179.05,-70 323.68,-70 323.68,-106"></polygon> <text text-anchor="middle" x="251.37" y="-83.8" font-family="Times,serif" font-size="14.00">python_downstream_1</text> </g> <!-- bash_upstream_1&#45;&gt;python_downstream_1 --> <g id="edge1" class="edge">
<title>
bash_upstream_1-&gt;python_downstream_1
</title>
<path fill="none" stroke="black" d="M136.66,-124.17C151.78,-119.36 168.28,-114.11 183.9,-109.14"></path> <polygon fill="black" stroke="black" points="185.03,-112.46 193.5,-106.09 182.91,-105.79 185.03,-112.46"></polygon> </g> <!-- python_upstream_1 --> <g id="node2" class="node">
<title>
python_upstream_1
</title>
<polygon fill="none" stroke="black" points="143.31,-106 15.9,-106 15.9,-70 143.31,-70 143.31,-106"></polygon> <text text-anchor="middle" x="79.6" y="-83.8" font-family="Times,serif" font-size="14.00">python_upstream_1</text> </g> <!-- python_upstream_1&#45;&gt;python_downstream_1 --> <g id="edge2" class="edge">
<title>
python_upstream_1-&gt;python_downstream_1
</title>
<path fill="none" stroke="black" d="M143.33,-88C151.68,-88 160.34,-88 168.95,-88"></path> <polygon fill="black" stroke="black" points="169.02,-91.5 179.02,-88 169.02,-84.5 169.02,-91.5"></polygon> </g> <!-- python_upstream_2 --> <g id="node3" class="node">
<title>
python_upstream_2
</title>
<polygon fill="none" stroke="black" points="143.31,-52 15.9,-52 15.9,-16 143.31,-16 143.31,-52"></polygon> <text text-anchor="middle" x="79.6" y="-29.8" font-family="Times,serif" font-size="14.00">python_upstream_2</text> </g> <!-- python_upstream_2&#45;&gt;python_downstream_1 --> <g id="edge3" class="edge">
<title>
python_upstream_2-&gt;python_downstream_1
</title>
<path fill="none" stroke="black" d="M137.6,-52.13C152.38,-56.83 168.42,-61.93 183.65,-66.78"></path> <polygon fill="black" stroke="black" points="182.93,-70.22 193.52,-69.92 185.05,-63.55 182.93,-70.22"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
</div>
</div>
<ul>
<li>bash_upstream_1(성공), python_upstream_1(실패), python_upstream_2(성공).</li>
<li>triger rule이 all done이기 때문에 python_upstream_1(실패)여도 python_downstream_1은 수행되어야 한다.</li>
<li>다른 Operator such as BashOperator, pythonOperator의 경우도 <code>trigger_rule =='all_done'</code> parameter 똑같이 넣어주면 됨</li>
</ul>
</section>
<section id="trigger-rule-실습-triger_rule-none_skipped" class="level2" data-number="4.3">
<h2 data-number="4.3" class="anchored" data-anchor-id="trigger-rule-실습-triger_rule-none_skipped"><span class="header-section-number">4.3</span> 2. Trigger Rule 실습) triger_rule = none_skipped</h2>
<div class="columns">
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb10-1">@task.branch(task_id ='branching')</span>
<span id="cb10-2">def random_branch():</span>
<span id="cb10-3">    import random</span>
<span id="cb10-4">    item_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">' A', ' B', 'C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-5">    selected_item = random.choice(item_lst)</span>
<span id="cb10-6">    if selected_item == 'A':</span>
<span id="cb10-7">        return 'task_a'</span>
<span id="cb10-8">    elif selected_item == 'B':</span>
<span id="cb10-9">        return 'task_b'</span>
<span id="cb10-10">    elif selected_item == 'C':</span>
<span id="cb10-11">        return 'task_c'</span>
<span id="cb10-12"></span>
<span id="cb10-13">task_a = BashOperator(</span>
<span id="cb10-14">    task_id ='task_a',</span>
<span id="cb10-15">    bash_command = 'echo upstream1'</span>
<span id="cb10-16">    )</span>
<span id="cb10-17"></span>
<span id="cb10-18">@task(task_id ='task_b')</span>
<span id="cb10-19">def task_b():</span>
<span id="cb10-20">    print('정상 처리')</span>
<span id="cb10-21"></span>
<span id="cb10-22">@task(task_id =='task_c')</span>
<span id="cb10-23">def task_c():</span>
<span id="cb10-24">    print('정상 처리')</span>
<span id="cb10-25"></span>
<span id="cb10-26">@task(task_id =='task_d', trigger_rule ='none_skipped')</span>
<span id="cb10-27">def task_d():</span>
<span id="cb10-28">    print('정상 처리')</span>
<span id="cb10-29"></span>
<span id="cb10-30">random_branch() &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">task_a , task_b(), task_c()</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; task_d()</span></code></pre></div>
</div><div class="column" style="width:50%;">
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 323.86 209.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 205)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-205 319.86,-205 319.86,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-193 307.86,-193 307.86,-8 8,-8"></polygon> <text text-anchor="middle" x="157.93" y="-176.4" font-family="Times,serif" font-size="14.00">Task Flow</text> </g> <!-- random_branch --> <g id="node1" class="node">
<title>
random_branch
</title>
<polygon fill="none" stroke="black" points="119.78,-106 16.07,-106 16.07,-70 119.78,-70 119.78,-106"></polygon> <text text-anchor="middle" x="67.93" y="-83.8" font-family="Times,serif" font-size="14.00">random_branch</text> </g> <!-- task_a --> <g id="node2" class="node">
<title>
task_a
</title>
<polygon fill="none" stroke="black" points="209.86,-52 155.86,-52 155.86,-16 209.86,-16 209.86,-52"></polygon> <text text-anchor="middle" x="182.86" y="-29.8" font-family="Times,serif" font-size="14.00">task_a</text> </g> <!-- random_branch&#45;&gt;task_a --> <g id="edge1" class="edge">
<title>
random_branch-&gt;task_a
</title>
<path fill="none" stroke="black" d="M106.85,-69.87C119.61,-63.76 133.8,-56.98 146.37,-50.97"></path> <polygon fill="black" stroke="black" points="148.1,-54.02 155.62,-46.55 145.08,-47.7 148.1,-54.02"></polygon> </g> <!-- task_b --> <g id="node3" class="node">
<title>
task_b
</title>
<polygon fill="none" stroke="black" points="209.86,-106 155.86,-106 155.86,-70 209.86,-70 209.86,-106"></polygon> <text text-anchor="middle" x="182.86" y="-83.8" font-family="Times,serif" font-size="14.00">task_b</text> </g> <!-- random_branch&#45;&gt;task_b --> <g id="edge2" class="edge">
<title>
random_branch-&gt;task_b
</title>
<path fill="none" stroke="black" d="M120.11,-88C128.71,-88 137.47,-88 145.6,-88"></path> <polygon fill="black" stroke="black" points="145.84,-91.5 155.84,-88 145.84,-84.5 145.84,-91.5"></polygon> </g> <!-- task_c --> <g id="node4" class="node">
<title>
task_c
</title>
<polygon fill="none" stroke="black" points="209.86,-160 155.86,-160 155.86,-124 209.86,-124 209.86,-160"></polygon> <text text-anchor="middle" x="182.86" y="-137.8" font-family="Times,serif" font-size="14.00">task_c</text> </g> <!-- random_branch&#45;&gt;task_c --> <g id="edge3" class="edge">
<title>
random_branch-&gt;task_c
</title>
<path fill="none" stroke="black" d="M106.85,-106.13C119.61,-112.24 133.8,-119.02 146.37,-125.03"></path> <polygon fill="black" stroke="black" points="145.08,-128.3 155.62,-129.45 148.1,-121.98 145.08,-128.3"></polygon> </g> <!-- task_d --> <g id="node5" class="node">
<title>
task_d
</title>
<polygon fill="none" stroke="black" points="299.86,-106 245.86,-106 245.86,-70 299.86,-70 299.86,-106"></polygon> <text text-anchor="middle" x="272.86" y="-83.8" font-family="Times,serif" font-size="14.00">task_d</text> </g> <!-- task_a&#45;&gt;task_d --> <g id="edge4" class="edge">
<title>
task_a-&gt;task_d
</title>
<path fill="none" stroke="black" d="M210.26,-50.2C218.69,-55.37 228.15,-61.18 237.08,-66.66"></path> <polygon fill="black" stroke="black" points="235.42,-69.75 245.77,-72 239.08,-63.78 235.42,-69.75"></polygon> </g> <!-- task_b&#45;&gt;task_d --> <g id="edge5" class="edge">
<title>
task_b-&gt;task_d
</title>
<path fill="none" stroke="black" d="M210.26,-88C218.25,-88 227.17,-88 235.68,-88"></path> <polygon fill="black" stroke="black" points="235.77,-91.5 245.77,-88 235.77,-84.5 235.77,-91.5"></polygon> </g> <!-- task_c&#45;&gt;task_d --> <g id="edge6" class="edge">
<title>
task_c-&gt;task_d
</title>
<path fill="none" stroke="black" d="M210.26,-125.8C218.69,-120.63 228.15,-114.82 237.08,-109.34"></path> <polygon fill="black" stroke="black" points="239.08,-112.22 245.77,-104 235.42,-106.25 239.08,-112.22"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
</div>
</div>
<ul>
<li>skip이 있기 때문에 실제로 task_d가 돌지 말아야한다.</li>
<li>Dags Full Example</li>
</ul>
<div class="columns">
<div class="column" style="width:50%;">
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb11-1">from airflow import DAG</span>
<span id="cb11-2">from airflow.decorators import task</span>
<span id="cb11-3">from airflow.operators.python import PythonOperator</span>
<span id="cb11-4">from airflow.operators.bash import BashOperator</span>
<span id="cb11-5">from airflow.exceptions import AirflowException</span>
<span id="cb11-6"></span>
<span id="cb11-7">import pendulum</span>
<span id="cb11-8"></span>
<span id="cb11-9">with DAG(</span>
<span id="cb11-10">    dag_id='dags_python_with_trigger_rule_eg1',</span>
<span id="cb11-11">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),</span>
<span id="cb11-12">    schedule=None,</span>
<span id="cb11-13">    catchup=False</span>
<span id="cb11-14">) as dag:</span>
<span id="cb11-15">    bash_upstream_1 = BashOperator(</span>
<span id="cb11-16">        task_id='bash_upstream_1',</span>
<span id="cb11-17">        bash_command='echo upstream1'</span>
<span id="cb11-18">    )</span>
<span id="cb11-19"></span>
<span id="cb11-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_upstream_1')</span></span>
<span id="cb11-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_upstream_1():</span></span>
<span id="cb11-22"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        raise AirflowException('downstream_1 Exception!')</span></span>
<span id="cb11-23"></span>
<span id="cb11-24"></span>
<span id="cb11-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_upstream_2')</span></span>
<span id="cb11-26"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_upstream_2():</span></span>
<span id="cb11-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('정상 처리')</span></span>
<span id="cb11-28"></span>
<span id="cb11-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='python_downstream_1', trigger_rule='all_done')</span></span>
<span id="cb11-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def python_downstream_1():</span></span>
<span id="cb11-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('정상 처리')</span></span>
<span id="cb11-32"></span>
<span id="cb11-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    [bash_upstream_1, python_upstream_1(), python_upstream_2()] &gt;&gt; python_downstream_1()</span></span></code></pre></div>
</div><div class="column" style="width:50%;">
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb12-1">from airflow import DAG</span>
<span id="cb12-2">from airflow.decorators import task</span>
<span id="cb12-3">from airflow.operators.python import PythonOperator</span>
<span id="cb12-4">from airflow.operators.bash import BashOperator</span>
<span id="cb12-5">from airflow.exceptions import AirflowException</span>
<span id="cb12-6"></span>
<span id="cb12-7">import pendulum</span>
<span id="cb12-8"></span>
<span id="cb12-9">with DAG(</span>
<span id="cb12-10">    dag_id='dags_python_with_trigger_rule_eg2',</span>
<span id="cb12-11">    start_date=pendulum.datetime(2023,4,1, tz='Asia/Seoul'),</span>
<span id="cb12-12">    schedule=None,</span>
<span id="cb12-13">    catchup=False</span>
<span id="cb12-14">) as dag:</span>
<span id="cb12-15">    @task.branch(task_id='branching')</span>
<span id="cb12-16">    def random_branch():</span>
<span id="cb12-17">        import random</span>
<span id="cb12-18">        item_lst = <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">'A', 'B', 'C'</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb12-19">        selected_item = random.choice(item_lst)</span>
<span id="cb12-20">        if selected_item == 'A':</span>
<span id="cb12-21">            return 'task_a'</span>
<span id="cb12-22">        elif selected_item == 'B':</span>
<span id="cb12-23">            return 'task_b'</span>
<span id="cb12-24">        elif selected_item == 'C':</span>
<span id="cb12-25">            return 'task_c'</span>
<span id="cb12-26"></span>
<span id="cb12-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    task_a = BashOperator(</span></span>
<span id="cb12-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id='task_a',</span></span>
<span id="cb12-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        bash_command='echo upstream1'</span></span>
<span id="cb12-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb12-31"></span>
<span id="cb12-32"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='task_b')</span></span>
<span id="cb12-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def task_b():</span></span>
<span id="cb12-34"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('정상 처리')</span></span>
<span id="cb12-35"></span>
<span id="cb12-36"></span>
<span id="cb12-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='task_c')</span></span>
<span id="cb12-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def task_c():</span></span>
<span id="cb12-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('정상 처리')</span></span>
<span id="cb12-40"></span>
<span id="cb12-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id='task_d', trigger_rule='none_skipped')</span></span>
<span id="cb12-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def task_d():</span></span>
<span id="cb12-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('정상 처리')</span></span>
<span id="cb12-44"></span>
<span id="cb12-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    random_branch() &gt;&gt; [task_a, task_b(), task_c()] &gt;&gt; task_d()</span></span></code></pre></div>
</div>
</div>
</section>
</section>
<section id="task-group" class="level1" data-number="5">
<h1 data-number="5"><span class="header-section-number">5</span> Task Group</h1>
<section id="task-group-개념" class="level2" data-number="5.1">
<h2 data-number="5.1" class="anchored" data-anchor-id="task-group-개념"><span class="header-section-number">5.1</span> Task Group 개념</h2>
<ul>
<li>Task들의 모음: dags안에 task가 많을 경우 모아서 관리
<ul>
<li>예를 들어, dag안에 50개의 tasks 있다고 할 때, 5개 tasks가 서로 연관성이 높은 connection을 이루고 이런 group이 10개가 있을 수 있다.</li>
</ul></li>
<li><a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html#taskgroups">UI Graph탭에서 Task 들을 Group 화하여 보여줌-TaskGroups</a></li>
<li>Task Group 안에 Task Group 을 중첩하여 구성 가능</li>
<li>위의 링크에서 section1 과 section2 로 grouping되어 있고 section2에는 inner_section_2 라는 또 다른 task group이 있다.</li>
<li>꼭 써야하는 이유는 성능적인 면에서 딱히 없지만 task flow의 가독성이 높아짐</li>
</ul>
</section>
<section id="task-group-실습-task_group-데커레이터-이용" class="level2" data-number="5.2">
<h2 data-number="5.2" class="anchored" data-anchor-id="task-group-실습-task_group-데커레이터-이용"><span class="header-section-number">5.2</span> Task Group 실습 (task_group 데커레이터 이용)</h2>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">from airflow.decorators import task_group</span>
<span id="cb13-2">with DAG(...</span>
<span id="cb13-3">) as dag:</span>
<span id="cb13-4">    @task_group(group_id ='first_group')</span>
<span id="cb13-5">    def group_1():</span>
<span id="cb13-6">    ''' task_group 데커레이터를 이용한 첫 번째 그룹입니다. ''' # docstring: 함수를 설명하는 글</span>
<span id="cb13-7">    # airflow UI에서는 tooltip이라고 표시됨</span>
<span id="cb13-8"></span>
<span id="cb13-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task(task_id ='inner_function1')</span></span>
<span id="cb13-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def inner_func1(**kwargs):</span></span>
<span id="cb13-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        print('첫 번째 TaskGroup 내 첫 번째 task 입니다')</span></span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    inner_function2 = PythonOperator(</span></span>
<span id="cb13-14"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        task_id ='inner_function2',</span></span>
<span id="cb13-15"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        python_callable = inner_func,</span></span>
<span id="cb13-16"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        op_kwargs={'msg':'첫 번째 TaskGroup 내 두 번쨰 task 입니다.'}</span></span>
<span id="cb13-17"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb13-18"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    inner_func1() &gt;&gt; inner_function2</span></span></code></pre></div>
</section>
<section id="task-group-실습-클래스-이용" class="level2" data-number="5.3">
<h2 data-number="5.3" class="anchored" data-anchor-id="task-group-실습-클래스-이용"><span class="header-section-number">5.3</span> Task Group 실습 (클래스 이용)</h2>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb14-1">from airflow.utils.task_group import TaskGroup</span>
<span id="cb14-2">    with TaskGroup(group_id ='second_group', tooltip='두 번째 그룹입니다.') as group_2:</span>
<span id="cb14-3">    #tooltipe은 docstring과 같은 역할을 함</span>
<span id="cb14-4">        @task(task_id ='inner_function1')</span>
<span id="cb14-5">        def inner_func1 (**kwargs):</span>
<span id="cb14-6">            print('두 번째 TaskGroup 내 첫 번째 task 입니다.')</span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inner_function2 = PythonOperator(</span></span>
<span id="cb14-9"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            task_id = 'inner_function2',</span></span>
<span id="cb14-10"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            python_collable = inner_func,</span></span>
<span id="cb14-11"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            op_kwargs = {'msg': '두 번째 TaskGroup 내 두 번째 task 입니다'}</span></span>
<span id="cb14-12"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb14-13">inner_func1() &gt;&gt; inner_function2</span></code></pre></div>
<ul>
<li>Dags Full Example</li>
</ul>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb15-1">from airflow import DAG</span>
<span id="cb15-2">import pendulum</span>
<span id="cb15-3">import datetime</span>
<span id="cb15-4">from airflow.operators.python import PythonOperator</span>
<span id="cb15-5">from airflow.decorators import task</span>
<span id="cb15-6">from airflow.decorators import task_group</span>
<span id="cb15-7">from airflow.utils.task_group import TaskGroup</span>
<span id="cb15-8"></span>
<span id="cb15-9">with DAG(</span>
<span id="cb15-10">    dag_id="dags_python_with_task_group",</span>
<span id="cb15-11">    schedule=None,</span>
<span id="cb15-12">    start_date=pendulum.datetime(2023, 4, 1, tz="Asia/Seoul"),</span>
<span id="cb15-13">    catchup=False</span>
<span id="cb15-14">) as dag:</span>
<span id="cb15-15">    def inner_func(**kwargs):</span>
<span id="cb15-16">        msg = kwargs.get('msg') or '' </span>
<span id="cb15-17">        print(msg)</span>
<span id="cb15-18"></span>
<span id="cb15-19"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    @task_group(group_id='first_group')</span></span>
<span id="cb15-20"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    def group_1():</span></span>
<span id="cb15-21"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ''' task_group 데커레이터를 이용한 첫 번째 그룹입니다. '''</span></span>
<span id="cb15-22"></span>
<span id="cb15-23"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        @task(task_id='inner_function1')</span></span>
<span id="cb15-24"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        def inner_func1(**kwargs):</span></span>
<span id="cb15-25"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            print('첫 번째 TaskGroup 내 첫 번째 task입니다.')</span></span>
<span id="cb15-26"></span>
<span id="cb15-27"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inner_function2 = PythonOperator(</span></span>
<span id="cb15-28"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            task_id='inner_function2',</span></span>
<span id="cb15-29"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            python_callable=inner_func,</span></span>
<span id="cb15-30"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            op_kwargs={'msg':'첫 번째 TaskGroup내 두 번쨰 task입니다.'}</span></span>
<span id="cb15-31"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb15-32"></span>
<span id="cb15-33"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inner_func1() &gt;&gt; inner_function2</span></span>
<span id="cb15-34"></span>
<span id="cb15-35"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with TaskGroup(group_id='second_group', tooltip='두 번째 그룹입니다') as group_2:</span></span>
<span id="cb15-36"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        ''' 여기에 적은 docstring은 표시되지 않습니다'''</span></span>
<span id="cb15-37"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        @task(task_id='inner_function1')</span></span>
<span id="cb15-38"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        def inner_func1(**kwargs):</span></span>
<span id="cb15-39"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            print('두 번째 TaskGroup 내 첫 번째 task입니다.')</span></span>
<span id="cb15-40"></span>
<span id="cb15-41"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inner_function2 = PythonOperator(</span></span>
<span id="cb15-42"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            task_id='inner_function2',</span></span>
<span id="cb15-43"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            python_callable=inner_func,</span></span>
<span id="cb15-44"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            op_kwargs={'msg': '두 번째 TaskGroup내 두 번째 task입니다.'}</span></span>
<span id="cb15-45"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        )</span></span>
<span id="cb15-46"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        inner_func1() &gt;&gt; inner_function2</span></span>
<span id="cb15-47"></span>
<span id="cb15-48"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    group_1() &gt;&gt; group_2</span></span></code></pre></div>
<ul>
<li>위에서 task_id와 group_id가 같지만 에러가 안나는 이유가 task group이 다르기 때문.</li>
<li>위에서 볼 수 있듯이 task group 또한 flow 설정할 수 있음 <code>group_1() &gt;&gt; group_2</code></li>
</ul>
</section>
<section id="요약" class="level2" data-number="5.4">
<h2 data-number="5.4" class="anchored" data-anchor-id="요약"><span class="header-section-number">5.4</span> 요약</h2>
<ul>
<li>Task Group 작성 방법은 2 가지가 존재함 (데커레이터 &amp; 클래스)</li>
<li>Task Group 안에 Task Group 중첩하여 정의 가능</li>
<li>Task Group 간에도 Flow 정의 가능</li>
<li>Group이 다르면 task_id 가 같아도 무방</li>
<li>Tooltip 파라미터를 이용해 UI 화면에서 Task group 에 대한 설명 제공 가능 (데커레이터 활용시 docstring 으로도 가능)</li>
</ul>
</section>
</section>
<section id="edge-label" class="level1" data-number="6">
<h1 data-number="6"><span class="header-section-number">6</span> Edge label</h1>
<section id="edge-label-개념" class="level2" data-number="6.1">
<h2 data-number="6.1" class="anchored" data-anchor-id="edge-label-개념"><span class="header-section-number">6.1</span> Edge Label 개념</h2>
<ul>
<li>Task 연결에 대한 설명 (Comment)</li>
</ul>
</section>
<section id="edge-label-만들기" class="level2" data-number="6.2">
<h2 data-number="6.2" class="anchored" data-anchor-id="edge-label-만들기"><span class="header-section-number">6.2</span> Edge Label 만들기</h2>
<div class="cell">
<div class="cell-output-display">
<div>
<div>
<svg width="672" height="480" viewbox="0.00 0.00 819.47 140.00" xmlns="http://www.w3.org/2000/svg" xlink="http://www.w3.org/1999/xlink" style="; max-width: none; max-height: none">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 136)">
<title>
G
</title>
<polygon fill="white" stroke="transparent" points="-4,4 -4,-136 815.47,-136 815.47,4 -4,4"></polygon> <g id="clust1" class="cluster">
<title>
cluster0
</title>
<polygon fill="none" stroke="black" points="8,-8 8,-124 803.47,-124 803.47,-8 8,-8"></polygon> <text text-anchor="middle" x="405.73" y="-107.4" font-family="Times,serif" font-size="14.00">Task Flow</text> </g> <!-- ingest --> <g id="node1" class="node">
<title>
ingest
</title>
<polygon fill="none" stroke="black" points="70,-71 16,-71 16,-35 70,-35 70,-71"></polygon> <text text-anchor="middle" x="43" y="-48.8" font-family="Times,serif" font-size="14.00">ingest</text> </g> <!-- analyze --> <g id="node2" class="node">
<title>
analyze
</title>
<polygon fill="none" stroke="black" points="165.62,-71 107.13,-71 107.13,-35 165.62,-35 165.62,-71"></polygon> <text text-anchor="middle" x="136.37" y="-48.8" font-family="Times,serif" font-size="14.00">analyze</text> </g> <!-- ingest&#45;&gt;analyze --> <g id="edge1" class="edge">
<title>
ingest-&gt;analyze
</title>
<path fill="none" stroke="black" d="M70.43,-53C78.69,-53 87.97,-53 96.88,-53"></path> <polygon fill="black" stroke="black" points="97.09,-56.5 107.09,-53 97.09,-49.5 97.09,-56.5"></polygon> </g> <!-- check_integrity --> <g id="node3" class="node">
<title>
check_integrity
</title>
<polygon fill="none" stroke="black" points="305.86,-71 202.71,-71 202.71,-35 305.86,-35 305.86,-71"></polygon> <text text-anchor="middle" x="254.28" y="-48.8" font-family="Times,serif" font-size="14.00">check_integrity</text> </g> <!-- analyze&#45;&gt;check_integrity --> <g id="edge2" class="edge">
<title>
analyze-&gt;check_integrity
</title>
<path fill="none" stroke="black" d="M165.73,-53C173.9,-53 183.14,-53 192.48,-53"></path> <polygon fill="black" stroke="black" points="192.61,-56.5 202.61,-53 192.61,-49.5 192.61,-56.5"></polygon> </g> <!-- describe_integrity --> <g id="node4" class="node">
<title>
describe_integrity
</title>
<polygon fill="none" stroke="black" points="533.21,-53 416.06,-53 416.06,-17 533.21,-17 533.21,-53"></polygon> <text text-anchor="middle" x="474.63" y="-30.8" font-family="Times,serif" font-size="14.00">describe_integrity</text> </g> <!-- check_integrity&#45;&gt;describe_integrity --> <g id="edge3" class="edge">
<title>
check_integrity-&gt;describe_integrity
</title>
<path fill="none" stroke="black" d="M305.9,-38.33C311.9,-37.05 317.97,-35.95 323.82,-35.2 350.47,-31.78 380,-31.09 405.75,-31.48"></path> <polygon fill="black" stroke="black" points="405.72,-34.98 415.79,-31.68 405.86,-27.98 405.72,-34.98"></polygon> <text text-anchor="middle" x="360.96" y="-39.2" font-family="Times,serif" font-size="14.00">Errors Found</text> </g> <!-- save --> <g id="node7" class="node">
<title>
save
</title>
<polygon fill="none" stroke="black" points="605.17,-90 551.17,-90 551.17,-54 605.17,-54 605.17,-90"></polygon> <text text-anchor="middle" x="578.17" y="-67.8" font-family="Times,serif" font-size="14.00">save</text> </g> <!-- check_integrity&#45;&gt;save --> <g id="edge6" class="edge">
<title>
check_integrity-&gt;save
</title>
<path fill="none" stroke="black" d="M305.93,-55.99C371.27,-59.85 483.33,-66.46 540.82,-69.85"></path> <polygon fill="black" stroke="black" points="540.7,-73.35 550.89,-70.45 541.12,-66.37 540.7,-73.35"></polygon> <text text-anchor="middle" x="360.96" y="-65.2" font-family="Times,serif" font-size="14.00">No Errors</text> </g> <!-- email_error --> <g id="node5" class="node">
<title>
email_error
</title>
<polygon fill="none" stroke="black" points="704.62,-53 623.02,-53 623.02,-17 704.62,-17 704.62,-53"></polygon> <text text-anchor="middle" x="663.82" y="-30.8" font-family="Times,serif" font-size="14.00">email_error</text> </g> <!-- describe_integrity&#45;&gt;email_error --> <g id="edge4" class="edge">
<title>
describe_integrity-&gt;email_error
</title>
<path fill="none" stroke="black" d="M533.32,-35C558.79,-35 588.45,-35 612.95,-35"></path> <polygon fill="black" stroke="black" points="613.1,-38.5 623.1,-35 613.1,-31.5 613.1,-38.5"></polygon> </g> <!-- report --> <g id="node6" class="node">
<title>
report
</title>
<polygon fill="none" stroke="black" points="795.47,-72 741.47,-72 741.47,-36 795.47,-36 795.47,-72"></polygon> <text text-anchor="middle" x="768.47" y="-49.8" font-family="Times,serif" font-size="14.00">report</text> </g> <!-- email_error&#45;&gt;report --> <g id="edge5" class="edge">
<title>
email_error-&gt;report
</title>
<path fill="none" stroke="black" d="M704.5,-42.35C713.34,-43.98 722.67,-45.71 731.36,-47.32"></path> <polygon fill="black" stroke="black" points="730.72,-50.76 741.19,-49.14 732,-43.88 730.72,-50.76"></polygon> </g> <!-- save&#45;&gt;report --> <g id="edge7" class="edge">
<title>
save-&gt;report
</title>
<path fill="none" stroke="black" d="M605.6,-70.25C630.98,-68.48 670.39,-65.52 704.47,-62 713.22,-61.1 722.63,-59.98 731.45,-58.87"></path> <polygon fill="black" stroke="black" points="731.97,-62.33 741.44,-57.58 731.08,-55.39 731.97,-62.33"></polygon> </g> </g>
</svg>
</div>
</div>
</div>
</div>
</section>
<section id="edge-label-실습-1" class="level2" data-number="6.3">
<h2 data-number="6.3" class="anchored" data-anchor-id="edge-label-실습-1"><span class="header-section-number">6.3</span> Edge Label 실습 1</h2>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb16-1"></span>
<span id="cb16-2">from airflow.utils.edgemodifier import Label</span>
<span id="cb16-3">empty_1 = EmptyOperator(</span>
<span id="cb16-4">    task_id ='empty_1'</span>
<span id="cb16-5">)</span>
<span id="cb16-6"></span>
<span id="cb16-7">empty_2 = EmptyOperator(</span>
<span id="cb16-8">    task_id='empty_2'</span>
<span id="cb16-9">)</span>
<span id="cb16-10">empty_1 &gt;&gt; Label ('1 과 2 사이') &gt;&gt; empty_2</span></code></pre></div>
</section>
<section id="edge-label-실습-2" class="level2" data-number="6.4">
<h2 data-number="6.4" class="anchored" data-anchor-id="edge-label-실습-2"><span class="header-section-number">6.4</span> Edge Label 실습 2</h2>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb17-1"></span>
<span id="cb17-2">from airflow.utils.edgemodifier import Label</span>
<span id="cb17-3">empty_2 = EmptyOperator(</span>
<span id="cb17-4">    task_id = 'empty_2'</span>
<span id="cb17-5">)</span>
<span id="cb17-6"></span>
<span id="cb17-7">empty_3 = EmptyOperator(</span>
<span id="cb17-8">    task_id ='empty_3'</span>
<span id="cb17-9">)</span>
<span id="cb17-10"></span>
<span id="cb17-11">empty_4 = EmptyOperator(</span>
<span id="cb17-12">    task_id ='empty_4'</span>
<span id="cb17-13">)</span>
<span id="cb17-14"></span>
<span id="cb17-15">empty_5 = EmptyOperator(</span>
<span id="cb17-16">    task_id ='empty_5'</span>
<span id="cb17-17">)</span>
<span id="cb17-18"></span>
<span id="cb17-19">empty_6 = EmptyOperator(</span>
<span id="cb17-20">    task_id ='empty_6'</span>
<span id="cb17-21">)</span>
<span id="cb17-22"></span>
<span id="cb17-23">empty_2 &gt;&gt; Label('Start Branch') &gt;&gt; <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">empty_3, empty_4, empty_5 </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> &gt;&gt; Label('End Branch') &gt;&gt; empty_6</span></code></pre></div>
<ul>
<li>이렇게 분기가 펼쳐지고 모아지는 경우 모든 분기 edge에 label이 붙게 된다.</li>
</ul>
</section>
</section>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
</div>



</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/airflow/07.task_handling.html</guid>
  <pubDate>Sun, 30 Apr 2023 15:00:00 GMT</pubDate>
</item>
</channel>
</rss>
