---
title: "Data Preparation"
subtitle: "Simulation"
description: ""
author: Kwangmin Kim
date: 2022-12-20
#image: images/high_dimensions.jpg
format:
  html:
    toc: true
    number-sections: true
    code-fold: true
    code-summary: "Show the code"
    page-layout: full
execute:
  warning: false
---



### To-Be 

```{mermaid}
%%| fig-width: 7.5
flowchart TB
    subgraph Simulation
        direction TB
        subgraph assign_frequency
        direction LR
        Assign_probabilities     
        end
        subgraph generate_multivariate_normal_distribution
            direction TB
            determine_sample_size ---
            determine_number_of_columns---
            create_covariate_correlation_matrix---
            apply_noise_to_the_covariance_matrix
        end
        subgraph create_weight_matrix
            direction LR
            apply_some_noise_to_the_covariance_matrix
        end
        subgraph calculate_score_matrix
            direction LR
            matrix_multiplication_covariance_matrix_weight_matrix---
            used_logistic_function
        end
        subgraph create_response_variable
            direction LR
            result_of_logistic_function
        end
        subgraph creation_some_discrete_variables
            direction LR       
        end
        subgraph join
            direction LR
            all_the_matrix_and_vector_created       
        end
        assign_frequency-->generate_multivariate_normal_distribution-->create_weight_matrix-->
        calculate_score_matrix-->create_response_variable-->creation_some_discrete_variables-->
        join
    end
    subgraph data_analytics
        direction LR
        exploratory_data_analysis---
        statistical_analysis---
        machine_learning
    end
    subgraph conclusion
        direction LR
    end
    Simulation-->data_analytics-->conclusion
```


<ul class="nav nav-pills" id="language-tab" role="tablist">

<li class="nav-item" role="presentation">

<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" role="tab" aria-controls="Korean" aria-selected="true">

Korean

</button>

</li>

<li class="nav-item" role="presentation">

<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" role="tab" aria-controls="knitr" aria-selected="false">

English

</button>

</li>

<div class="tab-content" id="language-tabcontent">

::: {#Korean .tab-pane .fade .show .active role="tabpanel" aria-labelledby="Korean-tab"}

## 준비중

please, read the English section first. 

:::

::: {#English .tab-pane .fade role="tabpanel" aria-labelledby="English-tab"}
## Data Preparation

### Package Loading and Option Settings

```{r}
#| message: false
#| code-fold: true
#| warning: false
rm(list=ls())
library(tidyverse)
library(tidymodels)
library(glmnet)
library(MASS)
library(mixOmics)
set.seed(20230121) # the date writing this
knitr::opts_chunk$set(message=FALSE,warning=FALSE)

## Function List

scale_function=function(vector=x,min=a,max=b,method="customized"){
    if(method=="min-max"){
        result=(vector-min(vector))(max(vector)-min(vector))
    }else if(method=="customized"){
        result=(max-min)*(vector-min(vector))/(max(vector)-min(vector))+min
    }else{
        result=(vector-mean(vector))/sd(vector)
    }
  return(result)
}

genotype_data_generator=function(temp_data,fun=scale_function,start_quantile,end_quantile){
    temp=temp_data%>%
    pull%>%
    fun(vector=.,min=0,max=1,method="customized")
    return(ifelse(temp>temp%>%quantile(.,probs=start_quantile)&temp<temp%>%quantile(.,probs=end_quantile),1,0))
}
```


### Data Simulation

```{r}
#| eval: false
#| message: false
#| code-fold: true
#| warning: false

# the number of samples
sample_size <- 1000
# the number of predictors
predictor_size <- 5000
# the number of groups
group_size <- sample(6:10,1) # at least more than 6, the number of the genotypes
# the number of predictors truly associated with a response variable
significant_predictors <- floor(predictor_size*sample((50:100)/1000,1)) 

## set the predictors associated with an outcome
### the number of predictors positively associated with an outcome
### the number of predictors negatively associated with an outcome
positively_associated_predictors<-floor(significant_predictors*0.4) 
negatively_associated_predictors<-significant_predictors-positively_associated_predictors 

## set the proportion of the groups in which the predictors are correlated with one another
### randomly sampling proportions to become their sum equal to 1
group_proportion_list<-sample(seq(1,1+2*(100-group_size)/group_size,
                            by=2*(100-group_size)/(group_size*(group_size-1)))/100,
                        group_size,replace=FALSE)%>%round(3) 
names(group_proportion_list)<-paste0("group",1:length(group_proportion_list))
### initialize a matrix with a size as sample_size by predictor_size
predictor_matrix <- matrix(0, ncol = predictor_size, nrow = sample_size)
### initialize a data frame and assign meta information used to generate simulated data
group_meta_data<-
    data.frame(
        group_name=c(names(group_proportion_list)),
        proportion=group_proportion_list)%>%
        mutate(
            group_n=(predictor_size*group_proportion_list)%>%round(0), # the number of predictors within each group 
            first_index=c(1,cumsum(group_n[-length(group_proportion_list)])+1), # the 1st index of predictors in each group
            last_index=cumsum(group_n), # the last index of predictors in each group
            group_correlation=sample((0:700)/1000,length(group_proportion_list),replace=TRUE), # within-group correlations among the within-group predictors
            group_effect=sample((-40:30)/100,length(group_proportion_list),replace=TRUE)) # effect of each group on an outcome variable
### set a group effect as 0.7 into a group with the smallest group number 
group_meta_data[which.min(group_meta_data[,"group_n"]),"group_effect"]<-0.7

### set a group effect as -0.5 into a group with the second smallest group number 
group_meta_data[group_meta_data[,"group_n"]==(sort(group_meta_data[,"group_n"])[2]),"group_effect"]<-(-0.5)



# initialize a data matrix to assign simulated values
## add some noise to data
data<-matrix(rnorm(sample_size*predictor_size,mean=0,sd=0.01), 
             nrow = sample_size, ncol = predictor_size)

# initialize a covariance matrix to assign simulated values
covariance_matrix<-matrix(rnorm(predictor_size*predictor_size,mean=0,sd=0.05),
                          nrow=predictor_size, ncol=predictor_size)
beta_coefficients <- rnorm(predictor_size,0,0.05)

# generate simulation data using multivariate normal distribution
for (i in 1:nrow(meta_data)) {
    
    group_range <- meta_data[i, "first_index"]:meta_data[i, "last_index"]
    for (j in group_range){
        for(k in group_range){
        covariance_matrix[j, k] <- meta_data[i, "group_correlation"]
        }
    }
    #covariance_matrix[group_range, group_range]+meta_data[i, "group_correlation"]    
    diag(covariance_matrix) <- 1
    data[, group_range] <- 
        mvrnorm(n = sample_size, 
                mu = rep(0,meta_data[i,"group_n"]),
                Sigma = covariance_matrix[group_range, group_range])
    data=as.data.frame(data)
    beta_coefficients[meta_data[i, "first_index"]:meta_data[i, "last_index"]] <-
        beta_coefficients[meta_data[i, "first_index"]:meta_data[i, "last_index"]]+
        meta_data[i,"group_effect"]
    predictor_names<-paste0(meta_data[i,"group_name"],"_",1:meta_data[i,"group_n"])
    names(beta_coefficients)[meta_data[i, "first_index"]:meta_data[i, "last_index"]] <- predictor_names
    names(data)[meta_data[i, "first_index"]:meta_data[i, "last_index"]]<-predictor_names
        
}
score=as.matrix(data)%*%beta_coefficients # score of each sample

# logistic function to get a probability, intercept = 0, 
## set probabilities-0.2 to apply noise and negative probabilities into 0
probabilities <- ((1/(1+exp(-(0+score))))-rnorm(sample_size,m=0.2,sd=0.05))%>%
    ifelse(.>1,1,
    ifelse(.<0,0,.))
response <- rbinom(sample_size, 1, probabilities) 


answer_list<-list(
    'sample size'=sample_size,
    'predictor size'=predictor_size,
    'group size'=group_size,
    'significant predictors'=significant_predictors,
    'positively associated predictors'=positively_associated_predictors,
    'negatively associated predictors'=negatively_associated_predictors,
    'group proportion list'=group_proportion_list,
    'group meta data'=group_meta_data,
    'data noise intensity'=c('distribution'='rnorm','mean'=0,'sd'=0.01),
    'covariance noise intensity'=c('distribution'='rnorm','mean'=0,'sd'=0.05),
    'effect noise intensity on response'=c('distribution'='rnorm','mean'=0,'sd'=0.05),
    'link function' = 'logistic function',
    'link function noise intensity' = c('distribution'='rnorm','mean'=0.2,'sd'=0.05),
    'age_distirbution'='used data of a variable with the highest effect on outcome',
    'sex_distribution'='rbinom(n=sample size,p=0.5)',
    'genotype_distirbution'=list(
        'e2/e2'='8%, used data of a variable within the group with the lowest effect on the outcome',
        'e2/e3'='15%, used data of a variable within the group with the second lowest effect on the outcome',
        'e2/e4'='8.6%, used data of a variable within the group with the most neural effect on the outcome',
        'e3/e3'='30%, used data of a variable within the group with the most neutral effect on the outcome',
        'e3/e4'='25%,,used data of a variable within the group with the second highest effect on the outcome',
        'e4/e4'='13.4%, used data of a variable within the group with the highest effect on the outcome'),
    'treatment_distirbution'=list(
        'treatment1'='used data of a variable within the group with the most neural effect on the outcome',
        'treatment2'='used data of a variable within the group with the second lowest effect on the outcome',
        'treatment3'='used data of a variable within the group with the most lowest effect on the outcome'
    ));answer_list

# used data of a variable with the highest effect on outcome
age_distribution=data%>%
dplyr::select(grep(group_meta_data[,"group_name"][group_meta_data[,"group_effect"]==0.7],names(data))[1])%>%
pull()%>%
scale_function(vector=.,min=65,max=105,method="customized")%>%round(0)

#rbinom(n=sample size,p=0.5)
sex_distribution=rbinom(sample_size,1,0.5)

# genotype_distribution

e2e2=data%>%
dplyr::select(grep(group_meta_data[which.min(group_meta_data[,"group_effect"]),"group_name"],names(data))[1])%>%
genotype_data_generator(.,scale_function,0,0.08)

e2e3=data%>%
dplyr::select(grep(group_meta_data[group_meta_data[,"group_effect"]==
(sort(group_meta_data[,"group_effect"])[2]),"group_name"],names(data))[1])%>%
mutate(
    e2e2=as.numeric(e2e2==1))

quantile(pull(e2e3),probs=seq(0,1,by=1/1000))

genotype_data_generator(.,scale_function,0,0.15)

e2e4=data%>%
dplyr::select(grep(group_meta_data[which.min(abs(group_meta_data[,"group_effect"])),"group_name"],names(data))[1])%>%
genotype_data_generator(.,scale_function,0.7-0.086/2,0.7+0.086/2)

e3e3=data%>%
dplyr::select(grep(group_meta_data[which.min(abs(group_meta_data[,"group_effect"])),"group_name"],names(data))[2])%>%
genotype_data_generator(.,scale_function,0.5-0.3/2,0.5+0.3/2)

e3e4=data%>%
dplyr::select(grep(group_meta_data[group_meta_data[,"group_effect"]==
(sort(group_meta_data[,"group_effect"])[length(group_meta_data[,"group_effect"])-1]),"group_name"],names(data))[1])%>%
genotype_data_generator(.,scale_function,1-0.25,1)

e4e4=data%>%
dplyr::select(grep(group_meta_data[which.max(group_meta_data[,"group_effect"]),"group_name"],names(data))[1])%>%
genotype_data_generator(.,scale_function,1-0.134,1)

genotype_distribution=cbind(e2e2,e2e3,e2e4,e3e3,e3e4,e4e4)%>%
as.data.frame()%>%
mutate(genotype=ifelse())

treatment_distribution=sample(c(0:2),sample_size,replace=TRUE,prob = c(0.7,0.2,0.1))

phenotype_data<-
    data.frame(
        id=1:sample_size,
        outcome=response,
        probabilities=probabilities,
        age=ifelse(probabilities<0.15,age_distribution-4,
                   ifelse(probabilities<0.3,age_distribution-2,
                          ifelse(probabilities>0.5,age_distribution+3,
                                 ifelse(probabilities>0.7,age_distribution+6,age_distribution)))))%>%
    mutate(age=sapply(age,
                   function(x)(x-min(age))/(max(age)-min(age))*(105-65)+65)%>%round(0),
           sex=sex_distribution,
           country=country_distribution,
           treatment=treatment_distribution,
           treatment=ifelse(probabilities>0.7,1,
                            ifelse(probabilities>0.8,2,treatment)),
           genotype=genotype_distribution,
           genotype=ifelse(probabilities<0.1,0,
                           ifelse(probabilities<0.15,1,
                                  ifelse(probabilities>0.7,3,
                                         ifelse(probabilities>0.8,4,
                                                ifelse(probabilities>0.9,5,genotype))))),
           age=ifelse(outcome==0&genotype==0,age+10,
                      ifelse(outcome==0&genotype==1,age+5,
                             ifelse(genotype==4,age-3,
                                    ifelse(genotype==5,age-2,age)))),
           genotype=ifelse(outcome==1&genotype==3&age>83&age<92,4,genotype),
           genotype=ifelse(outcome==1&genotype==4&age>87,5,genotype))


all_data=inner_join(phenotype_data,data%>%mutate(id=1:n()),by="id")

#write_rds(all_data,"./docs/projects/data/llfs_simulated_data.rds")
```

### Load Data

```{r}
#| code-fold: true
#| message: false
#| warning: false

datapath<-"C:/Users/kmkim/Desktop/my_project/website/docs/projects/data/llfs_simulated_data.rds"
#datapath<-"C:/Users/kkm/Desktop/projects/website/docs/projects/data/llfs_simulated_data.rds"
 simulated_data=read_rds(datapath)%>%
     dplyr::select(-1,-probabilities)
 all_data=simulated_data%>%
 mutate(
      outcome=ifelse(outcome==0,"negative","positive"),
      outcome=factor(outcome,levels=c("negative","positive")),
      sex=ifelse(sex==0,"man","woman"),
      sex=factor(sex,levels=c("man","woman")),
      country=ifelse(country==0,"center_a",ifelse(country==1,"center_b",ifelse(country==2,"center_c","center_d"))),
      country=factor(country,levels=c("center_a","center_b","center_c","center_d")),
      treatment=ifelse(treatment==0,"trmnt1",ifelse(treatment==1,"trmnt2","trmnt3")),
      treatment=factor(treatment,levels=c("trmnt1","trmnt2","trmnt3")),
      genotype=ifelse(genotype==0,"e2/e2",
      ifelse(genotype==1,"e2/e3",
      ifelse(genotype==2,"e2/e4",
      ifelse(genotype==3,"e3/e3",
      ifelse(genotype==4,"e3/e4","e4/e4"))))),
      genotype=factor(genotype,levels=c("e2/e2","e2/e3","e2/e4","e3/e3","e3/e4","e4/e4"))
      )
 names(all_data)[7:ncol(all_data)]<-paste0("meta",1:10000)
```



```{r}
#| echo: false
#| eval: false

### Add Missing Values -> To be Deleted 
# assume there are some missing values in data
missing_percent <- sample(5:15/100,1,replace = TRUE)
na_row <- sample(1:nrow(all_data), nrow(all_data)*ncol(all_data)*missing_percent, replace = TRUE)
na_col <- sample(1:ncol(all_data), nrow(all_data)*ncol(all_data)*missing_percent, replace = TRUE)
na_matrix <- as.matrix(all_data[,7:ncol(all_data)])

# fill these NA values in X
na_matrix[cbind(na_row, na_col)] <- NA
sum(is.na(X.na)) # number of cells with NA
```

## Data Description

This data include `r dim(all_data)[1]` samples and `r dim(all_data)[2]` variables:

-   `r names(all_data)[1]`: a disease status (`r unique(all_data[,"outcome"])`), `r unique(all_data[,"outcome"])[1]` is an affected status, `r unique(all_data[,"outcome"])[2]` is an unaffected status, and the reference group is `r unique(all_data[,"outcome"])[2]`.
-   `r names(all_data)[2]`: an age
-   `r names(all_data)[3]`: a sex status (`r unique(all_data[,"sex"])`) and the reference group is `r unique(all_data[,"sex"])[2]`.
-   `r names(all_data)[4]`: a country where data were collected (`r unique(all_data[,"country"])`) and the reference group is `r unique(all_data[,"country"])[3]`.
-   `r names(all_data)[5]`: a treatment for the disease (`r unique(all_data[,"treatment"])`) and the reference group is `r unique(all_data[,"treatment"])[2]`.
-   `r names(all_data)[6]`: a genotype of APOE.
    -   the apolipoprotein $\epsilon$ (APOE) is a protein produced in the metabolic pathway of fats in mammals, a genotype of which seems to be related to Alzheimer's disease (AD). APOE is polymorphic and has three major alleles, $\epsilon 2$ (e2), $\epsilon 3$(e3), and $\epsilon 4$ (e4). The statistics of the polymorphism are 8.4% for e2, 77.9% for e3, and 13.7% for e4 in worldwide allel frequency, respectively. It is known that the e2, e3, and e4 allels are associated with the protective factor, the neutral one, and the risk one with regard to AD. However, this finding has not been replicated in a large population. Therefore, it is known that we do not know their true associations with AD in the true population. [(from Wiki)](https://en.wikipedia.org/wiki/Apolipoprotein_E)
    -   There are 6 combinations of the genotypes:
        -   e2/e2
        -   e2/e3
        -   e2/e4
        -   e3/e3 (reference group)
        -   e3/e4
        -   e4/e4
-   `r names(all_data)[7]` \~ `r names(all_data)[ncol(all_data)]`: a list of metabolites that were blood-sampled from the APOE carriers.
:::
