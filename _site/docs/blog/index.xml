<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Kwangmin Kim</title>
<link>kmink3225.netlify.app/docs/blog/index.html</link>
<atom:link href="kmink3225.netlify.app/docs/blog/index.xml" rel="self" type="application/rss+xml"/>
<description>A great sample blog</description>
<generator>quarto-1.2.313</generator>
<lastBuildDate>Mon, 30 Jan 2023 15:00:00 GMT</lastBuildDate>
<item>
  <title>Function</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/index.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="definition" class="level2">
<h2 class="anchored" data-anchor-id="definition">Definition</h2>
<section id="구성-요소" class="level3">
<h3 class="anchored" data-anchor-id="구성-요소">구성 요소</h3>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay=f(x;%5Calpha)%0A"></p>
<ul>
<li>독립변수 (independent variable): <img src="https://latex.codecogs.com/png.latex?x">, 함수의 출력값을 결정하는 변수로서, feature, decision variable 등으로도 표현</li>
<li>매개변수 (parameter): <img src="https://latex.codecogs.com/png.latex?%5Calpha">, 함수의 모양을 결정하기 위한 변수</li>
<li>종속 변수 (dependent variable): <img src="https://latex.codecogs.com/png.latex?y"> or <img src="https://latex.codecogs.com/png.latex?f(x)"> 독립변수와 매개 변수에 의해 값이 결정되는 변수</li>
</ul>
</section>
<section id="confusing-terms-about-rectangular-data" class="level3">
<h3 class="anchored" data-anchor-id="confusing-terms-about-rectangular-data">Confusing Terms about Rectangular Data</h3>
<p>독립 변수와 종속 변수는 각 분야에서 쓰이는 이름이 다르다. 아래 표 참고 (정확하진 않음. 아직도 업데이트 중) See Table&nbsp;1.</p>
<p>(The below table may be incorrect still under researching)</p>
<div id="tbl-letters" class="anchored">
<table class="table">
<caption>Table&nbsp;1: Confusing Terms in Data Science</caption>
<colgroup>
<col style="width: 7%">
<col style="width: 17%">
<col style="width: 41%">
<col style="width: 20%">
<col style="width: 13%">
</colgroup>
<thead>
<tr class="header">
<th>Terms</th>
<th>Mathmatics</th>
<th>Statistics</th>
<th>Computer Science</th>
<th>Data Engineering</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>graph</td>
<td>visulaized plot</td>
<td>visulaized plot</td>
<td>connections among entities</td>
<td>data structure</td>
</tr>
<tr class="even">
<td>variable</td>
<td>independent variable</td>
<td>predictor, experimental variable, explanatory variable</td>
<td>feature, input</td>
<td>attribute, column</td>
</tr>
<tr class="odd">
<td>outcome</td>
<td>dependent variable</td>
<td>response variable, outcome</td>
<td>output, target</td>
<td>target</td>
</tr>
<tr class="even">
<td>Records</td>
<td>pattern, example</td>
<td>case, sample, observation</td>
<td>instance</td>
<td>record, row</td>
</tr>
</tbody>
</table>
</div>
<ul>
<li>예시1 : 2차 함수</li>
</ul>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;">def</span> f(x,a<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>,b<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>,c<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">3</span>): <span class="co" style="color: #5E5E5E;">#x: independent variable, f(x): dependent variable</span></span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;">return</span> a<span class="op" style="color: #5E5E5E;">*</span>x<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">+</span>b<span class="op" style="color: #5E5E5E;">*</span>x<span class="op" style="color: #5E5E5E;">+</span>c <span class="co" style="color: #5E5E5E;"># a,b,c : parameters</span></span>
<span id="cb1-6">x<span class="op" style="color: #5E5E5E;">=</span>np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">1000</span>)</span>
<span id="cb1-7">fig<span class="op" style="color: #5E5E5E;">=</span>plt.figure()</span>
<span id="cb1-8">ax<span class="op" style="color: #5E5E5E;">=</span>plt.axes()</span>
<span id="cb1-9">ax.plot(x,f(x))</span>
<span id="cb1-10">ax.plot(x,f(x,<span class="dv" style="color: #AD0000;">2</span>,<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">3</span>,<span class="dv" style="color: #AD0000;">2</span>))</span>
<span id="cb1-11">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/index_files/figure-html/cell-2-output-1.png" width="575" height="411"></p>
</div>
</div>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?f(x)=2x%5E2-3x+2">
<ul>
<li>함수: <img src="https://latex.codecogs.com/png.latex?f(x;a,b,c)"></li>
<li>종속 변수: <img src="https://latex.codecogs.com/png.latex?f(x)"></li>
<li>독립 변수: <img src="https://latex.codecogs.com/png.latex?x"></li>
<li>매개 변수 (parameter): <img src="https://latex.codecogs.com/png.latex?a=2,%20%5Cspace%20b=-3,%20%5Cspace%20c=2"></li>
</ul></li>
<li>예시2
<ul>
<li>linear regression
<ul>
<li>매개변를 수학적으로 최적화하여 데이터에 맞는 직선의 방정식을 찾는 알고리즘</li>
<li>함수 : <img src="https://latex.codecogs.com/png.latex?f(x;%5Cmathbf%20%5Cbeta)=%5Cbeta_1x+%5Cbeta_0"></li>
<li>종속 변수: <img src="https://latex.codecogs.com/png.latex?f(x)=y"></li>
<li>독립 변수: <img src="https://latex.codecogs.com/png.latex?x"></li>
<li>매개 변수 (parameter): <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20%5Cbeta%20=%20(%5Cbeta_0,%20%5Cspace%20%5Cbeta_1)"></li>
</ul></li>
</ul></li>
</ul>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cbegin%7Baligned%7D%0AL(oss)&amp;=%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bn=1%7D%5E%7BN%7D(y_n-f(x_n,%5Cmathbf%20%5Cbeta))%5E2%20%5C%5C%0A&amp;=%5Cfrac%7B1%7D%7B2%7D%5Csum_%7Bn=1%7D%5E%7BN%7D(y_n-%5Cbeta_1x_n-%5Cbeta_0)%5E2%0A%5Cend%7Baligned%7D%0A"></p>
</section>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
<section id="blog-guide-map-link" class="level2">
<h2 class="anchored" data-anchor-id="blog-guide-map-link">Blog Guide Map Link</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Statistics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Blog</a></li>
<li><a href="../../../../../docs/blog/posts/DL/guide_map/index.html">Deep Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/ML/guide_map/index.html">Machine Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Mathematics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Patent/guide_map/index.html">Patent Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Validation/guide_map/index.html">Validation Blog</a></li>
</ul>


</section>

</div></ul> ]]></description>
  <category>Mathematics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/index.html</guid>
  <pubDate>Mon, 30 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Function - Multivariable Scalar Function</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/multivariable_scalar_function.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="multivariable-scalar-function" class="level2">
<h2 class="anchored" data-anchor-id="multivariable-scalar-function">Multivariable Scalar Function</h2>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay=f(%5Cmathbf%20x),%20%5Cspace%20f:%5Cmathbb%20R%5En%20%5Crightarrow%20%5Cmathbb%20R%0A"></p>
<ul>
<li>Many to One</li>
<li>예시)
<ul>
<li><img src="https://latex.codecogs.com/png.latex?y=f(x_1,x_2)=x_1+x_2,%20%5Cspace%20f:%5Cmathbb%20R%5E2%5Crightarrow%20%5Cmathbb%20R">,
<ul>
<li>y값이 곡면의 형태를 띈다</li>
</ul></li>
</ul></li>
</ul>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-3"></span>
<span id="cb1-4">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb1-5">ax <span class="op" style="color: #5E5E5E;">=</span> plt.axes(projection<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'3d'</span>)</span>
<span id="cb1-6">x1<span class="op" style="color: #5E5E5E;">=</span>np.linspace(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb1-7">x2<span class="op" style="color: #5E5E5E;">=</span>np.linspace(<span class="dv" style="color: #AD0000;">0</span>,<span class="dv" style="color: #AD0000;">1</span>,<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb1-8">x1,x2 <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(x1,x2) <span class="co" style="color: #5E5E5E;"># multivariate scalar function 만들 때 사용</span></span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="bu" style="color: null;">print</span>(x2)  <span class="co" style="color: #5E5E5E;">#x 축으로 값이 불변하고 y축으로는 값이 변함</span></span>
<span id="cb1-11"></span>
<span id="cb1-12">z <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">*</span>(x2 <span class="op" style="color: #5E5E5E;">-</span> x1<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>)<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">-</span>x1)<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb1-13"><span class="bu" style="color: null;">print</span>(z)</span>
<span id="cb1-14"></span>
<span id="cb1-15">ax.scatter3D(x1, x2, z, marker<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'.'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'gray'</span>)</span>
<span id="cb1-16">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[[0.   0.   0.   0.   0.  ]
 [0.25 0.25 0.25 0.25 0.25]
 [0.5  0.5  0.5  0.5  0.5 ]
 [0.75 0.75 0.75 0.75 0.75]
 [1.   1.   1.   1.   1.  ]]
[[ 4.         3.2578125  5.375     17.3828125 51.       ]
 [ 7.125      4.8203125  2.25       6.4453125 29.125    ]
 [16.5       12.6328125  5.375      1.7578125 13.5      ]
 [32.125     26.6953125 14.75       3.3203125  4.125    ]
 [54.        47.0078125 30.375     11.1328125  1.       ]]</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/multivariable_scalar_function_files/figure-html/cell-2-output-2.png" width="546" height="537"></p>
</div>
</div>
</section>
<section id="음함수-implicit-function-형태" class="level2">
<h2 class="anchored" data-anchor-id="음함수-implicit-function-형태">음함수 (implicit function) 형태</h2>
<ul>
<li>Contour Graph 한쪽 변이 상수로 고정</li>
<li><img src="https://latex.codecogs.com/png.latex?f(x,y)=c"> (x 와 y의 관계가 가려져 있어서 음함수)</li>
<li>bivariate scalar function <img src="https://latex.codecogs.com/png.latex?f(x_1,x_2)=c">, 등고선 그래프</li>
</ul>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">fig <span class="op" style="color: #5E5E5E;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">7</span>))</span>
<span id="cb3-2">ax <span class="op" style="color: #5E5E5E;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb3-3">ax.xaxis.set_tick_params(labelsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>)</span>
<span id="cb3-4">ax.yaxis.set_tick_params(labelsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">18</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6">x1 <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">51</span>)</span>
<span id="cb3-7">x2 <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">51</span>)</span>
<span id="cb3-8">X1, X2 <span class="op" style="color: #5E5E5E;">=</span> np.meshgrid(x1, x2)</span>
<span id="cb3-9">Z <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">50</span><span class="op" style="color: #5E5E5E;">*</span>(X2 <span class="op" style="color: #5E5E5E;">-</span> X1<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>)<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> (<span class="dv" style="color: #AD0000;">2</span><span class="op" style="color: #5E5E5E;">-</span>X1)<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span></span>
<span id="cb3-10"></span>
<span id="cb3-11">contours <span class="op" style="color: #5E5E5E;">=</span> ax.contour(X1, X2, Z, levels<span class="op" style="color: #5E5E5E;">=</span>[<span class="dv" style="color: #AD0000;">30</span>, <span class="dv" style="color: #AD0000;">200</span>, <span class="dv" style="color: #AD0000;">600</span>],  colors<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'k'</span>, </span>
<span id="cb3-12">            linestyles<span class="op" style="color: #5E5E5E;">=</span>[<span class="st" style="color: #20794D;">'solid'</span>,<span class="st" style="color: #20794D;">'dashed'</span>, <span class="st" style="color: #20794D;">'dotted'</span>])</span>
<span id="cb3-13"></span>
<span id="cb3-14">ax.clabel(contours, contours.levels, fmt<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">"</span><span class="sc" style="color: #5E5E5E;">%d</span><span class="st" style="color: #20794D;">"</span>, inline<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb3-15"></span>
<span id="cb3-16">ax.set_xlabel(<span class="vs" style="color: #20794D;">r'$x_1$'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>)</span>
<span id="cb3-17">ax.set_ylabel(<span class="vs" style="color: #20794D;">r'$x_2$'</span>, fontsize<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">25</span>)</span>
<span id="cb3-18"></span>
<span id="cb3-19"><span class="co" style="color: #5E5E5E;">#if file_print == True :</span></span>
<span id="cb3-20"><span class="co" style="color: #5E5E5E;">#    fig.savefig("imgs/chap3/fig3-6.png", dpi=300, bbox_inches='tight')</span></span>
<span id="cb3-21"><span class="co" style="color: #5E5E5E;">#    fig.savefig("imgs/chap3/fig3-6.pdf", format='pdf', bbox_inches='tight')</span></span>
<span id="cb3-22"><span class="co" style="color: #5E5E5E;">#    </span></span>
<span id="cb3-23">plt.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/multivariable_scalar_function_files/figure-html/cell-3-output-1.png" width="654" height="617"></p>
</div>
</div>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
<section id="blog-guide-map-link" class="level2">
<h2 class="anchored" data-anchor-id="blog-guide-map-link">Blog Guide Map Link</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Statistics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Blog</a></li>
<li><a href="../../../../../docs/blog/posts/DL/guide_map/index.html">Deep Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/ML/guide_map/index.html">Machine Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Mathematics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Patent/guide_map/index.html">Patent Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Validation/guide_map/index.html">Validation Blog</a></li>
</ul>


</section>

</div></ul> ]]></description>
  <category>Mathematics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/multivariable_scalar_function.html</guid>
  <pubDate>Mon, 30 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Multivariate Scalar Function</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/mutivariable_vector_function.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">

</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
<div class="cell" data-execution_count="1">
<div class="cell-output cell-output-display">
<p>The radius of the circle is 10.</p>
</div>
</div>
<section id="blog-guide-map-link" class="level2">
<h2 class="anchored" data-anchor-id="blog-guide-map-link">Blog Guide Map Link</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Statistics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Blog</a></li>
<li><a href="../../../../../docs/blog/posts/DL/guide_map/index.html">Deep Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/ML/guide_map/index.html">Machine Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Mathematics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Patent/guide_map/index.html">Patent Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Validation/guide_map/index.html">Validation Blog</a></li>
</ul>


</section>

</div></ul> ]]></description>
  <category>Mathematics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/mutivariable_vector_function.html</guid>
  <pubDate>Mon, 30 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Function - Univariable Scalar Function</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/univariable_scalar_function.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="univariable-scalar-function" class="level2">
<h2 class="anchored" data-anchor-id="univariable-scalar-function">Univariable Scalar Function</h2>
<p><img src="https://latex.codecogs.com/png.latex?%0Ay=f(x),%20%5Cspace%20f:%20%5Cmathbb%20R%20%5Crightarrow%20%5Cmathbb%20R%0A"></p>
<ul>
<li>One to One</li>
<li><img src="https://latex.codecogs.com/png.latex?f:%5Cmathbb%7BR%7D%20%5Crightarrow%20%5Cmathbb%7BR%7D"> or <img src="https://latex.codecogs.com/png.latex?y=f(x)"> 으로 표현
<ul>
<li><img src="https://latex.codecogs.com/png.latex?f:%5Cmathbb%7BR%7D%20%5Crightarrow%20%5Cmathbb%7BR%7D"> : 입력과 출력의 개수를 직관적으로 알 수 있음</li>
<li>예시: <img src="https://latex.codecogs.com/png.latex?f(x)=x%5E2,%20f(x)=2%5Ex,%20f(x)=log_3x"></li>
</ul></li>
</ul>
<section id="scalar-function" class="level3">
<h3 class="anchored" data-anchor-id="scalar-function">Scalar Function</h3>
<ul>
<li>Polynomials
<ul>
<li>monomial: one term, 상수 또는 변수 항 하나로 이루어진 식
<ul>
<li>ex) <img src="https://latex.codecogs.com/png.latex?2,x,x%5E2,%5Cfrac%7Bx%7D%7B3%7D"></li>
</ul></li>
<li>binomial: two terms, 단항식이 덧셈과 뻴셈으로 연결된 식
<ul>
<li>ex) <img src="https://latex.codecogs.com/png.latex?3x%5E2+2">, coefficient=3. <img src="https://latex.codecogs.com/png.latex?x">= 변수, degree = 2, constant = 2</li>
</ul></li>
<li>trinomial: three terms</li>
<li>quadrinomial: four terms</li>
<li>quintinomial: five terms</li>
<li>multinomial: more than one terms, a combination of nomials with +/-.
<ul>
<li>ex) <img src="https://latex.codecogs.com/png.latex?x%5E2+2x+3"></li>
</ul></li>
</ul></li>
<li>Multinomial Function
<ul>
<li>다항식으로 구성된 함수</li>
<li>ex) <img src="https://latex.codecogs.com/png.latex?f(x)=x%5E2+2x+4"></li>
<li>연속이고 미분 가능</li>
</ul></li>
<li>Exponential Function
<ul>
<li>정의 : <img src="https://latex.codecogs.com/png.latex?y=a%5Ex"> where <img src="https://latex.codecogs.com/png.latex?z%3E0,%20%5Cspace%20a%5Cnot=1"></li>
<li>특징
<ul>
<li><img src="https://latex.codecogs.com/png.latex?a%3E1">: 양의 방향으로 증가</li>
<li><img src="https://latex.codecogs.com/png.latex?0%3Ca%3C1">: 양의 방향으로 갈 수록 감소</li>
<li>지수법칙</li>
<li>입력되는 x 값에 비해 출력되는 y값이 급격히 변화</li>
<li>미분 가능 &amp; 연속</li>
<li><a href="https://www.cuemath.com/algebra/exponent-rules/">Exponent Rule</a></li>
</ul></li>
</ul></li>
<li>Log Function
<ul>
<li>정의 : <img src="https://latex.codecogs.com/png.latex?log_ax=c%20%5Cleftrightarrow%20a%5Ec=x"></li>
<li>특징
<ul>
<li>미분 가능 &amp; 연속</li>
<li>지수함수와 역함수 관계</li>
<li>입력되는 x의 변화량에 비해 출력되는 y의 변화량이 작음
<ul>
<li><img src="https://latex.codecogs.com/png.latex?y=log_%7B10%7Dx"> : x가 10만큼 증가해야 y가 1 증가함</li>
<li><img src="https://latex.codecogs.com/png.latex?y=log_%7Be%7Dx"> : x가 e(약 2.718)만큼 증가해야 y가 1 증가함</li>
</ul></li>
</ul></li>
</ul></li>
<li>Logistic Sigmoid Function
<ul>
<li>정의: <img src="https://latex.codecogs.com/png.latex?%5Csigma(z)=%5Cfrac%7B1%7D%7B1+e%5E%7B-z%7D%7D"></li>
<li>특징
<ul>
<li>미분 가능 &amp; 연속</li>
<li>신경망에서 뉴런의 활성을 결정하는 활성함수로 사용</li>
<li>모든 실수<img src="https://latex.codecogs.com/png.latex?z">를 <img src="https://latex.codecogs.com/png.latex?0~1"> 사이로 변환시킴</li>
<li>입력값을 확률 값으로 출력하기 위해 사용됨</li>
</ul></li>
</ul></li>
</ul>
</section>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
<section id="blog-guide-map-link" class="level2">
<h2 class="anchored" data-anchor-id="blog-guide-map-link">Blog Guide Map Link</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/statistics/guide_map/index.html">Statistics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Blog</a></li>
<li><a href="../../../../../docs/blog/posts/DL/guide_map/index.html">Deep Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/ML/guide_map/index.html">Machine Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Mathematics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Patent/guide_map/index.html">Patent Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Validation/guide_map/index.html">Validation Blog</a></li>
</ul>


</section>

</div></ul> ]]></description>
  <category>template</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/univariable_scalar_function.html</guid>
  <pubDate>Mon, 30 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Multivariate Scalar Function</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/univariable_vector_function.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">

</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>
<div class="cell" data-execution_count="1">
<div class="cell-output cell-output-display">
<p>The radius of the circle is 10.</p>
</div>
</div>
<section id="blog-guide-map-link" class="level2">
<h2 class="anchored" data-anchor-id="blog-guide-map-link">Blog Guide Map Link</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Statistics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Blog</a></li>
<li><a href="../../../../../docs/blog/posts/DL/guide_map/index.html">Deep Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/ML/guide_map/index.html">Machine Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Mathematics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Patent/guide_map/index.html">Patent Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Validation/guide_map/index.html">Validation Blog</a></li>
</ul>


</section>

</div></ul> ]]></description>
  <category>Mathematics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Mathmatics/function/univariable_vector_function.html</guid>
  <pubDate>Mon, 30 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Blog Guide Map, Mathematics</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Mathmatics/guide_map/index.html</link>
  <description><![CDATA[ 



<p><strong>(Draft)</strong></p>
<section id="contents-list" class="level1">
<h1>Contents List</h1>
<section id="basic" class="level2">
<h2 class="anchored" data-anchor-id="basic">Basic</h2>
<ul>
<li>1111-11-11, Function
<ul>
<li>2023-01-31, Univariable Scalar Function (One to One)</li>
<li>2023-01-31, Multi-variable Scalar Function (Many to One)</li>
<li>2023-01-31, Univariable Vector Function (One to Many)</li>
<li>2023-01-31, Multi-variable Vector Function (Many to Many)</li>
</ul></li>
<li>1111-11-11, Vector &amp; Matrix</li>
<li>1111-11-11, Limit, <img src="https://latex.codecogs.com/png.latex?%5Cepsilon-%5Cdelta"> Method</li>
<li>1111-11-11, Differintiation
<ul>
<li>1111-11-11, Univariable Differintiation</li>
<li>1111-11-11, Multivariable Differintiation</li>
</ul></li>
<li>1111-11-11, Chain Rule</li>
<li>1111-11-11, Partial Derivative</li>
<li>1111-11-11, Gradient</li>
<li>1111-11-11, Talyer’s Series</li>
<li>1111-11-11, Gradient Direction</li>
<li>1111-11-11, Random Variable</li>
<li>1111-11-11, Probability Distribution</li>
<li>1111-11-11, Information Theory - Entropy</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
</ul>
</section>
<section id="linear-algebra" class="level2">
<h2 class="anchored" data-anchor-id="linear-algebra">Linear Algebra</h2>
<ul>
<li>1111-11-11, Vector Space</li>
<li>1111-11-11, Subspace</li>
<li>1111-11-11, Inner Product</li>
<li>1111-11-11, Linear Combination</li>
<li>1111-11-11, Quadratic Form</li>
<li>1111-11-11, Linear Independence</li>
<li>1111-11-11, Basis, Dimension, &amp; Rank</li>
<li>1111-11-11, Outer Product</li>
<li>1111-11-11, Eigen Value &amp; Eigen Vector</li>
<li>1111-11-11, Eigen Decomposition</li>
<li>1111-11-11, Singular Value Decomposition (SVD)</li>
<li>1111-11-11, Gram-Schmidt</li>
<li>1111-11-11, Group</li>
<li>1111-11-11, Orthogonal Matrix</li>
<li>1111-11-11, Rotation &amp; Group</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
</ul>
</section>
<section id="optimization" class="level2">
<h2 class="anchored" data-anchor-id="optimization">Optimization</h2>
<ul>
<li>1111-11-11, Convex Set</li>
<li>1111-11-11, Convex Function</li>
<li>1111-11-11, Unconstrained Optimization</li>
<li>1111-11-11, Non-linear Least Square</li>
<li>1111-11-11, Largrange Multiplier Method
<ul>
<li>1111-11-11, Largrange Primal Function</li>
<li>1111-11-11, Largrange Dual Function</li>
<li>1111-11-11, KKT conditions</li>
</ul></li>
<li>1111-11-11, Gradient Descent Optimizers</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
<li>1111-11-11,</li>
</ul>


</section>
</section>

 ]]></description>
  <category>Mathematics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Mathmatics/guide_map/index.html</guid>
  <pubDate>Sat, 28 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Structure (8) Binary Search Tree</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-20_binary_search_tree/index.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="트리tree" class="level2">
<h2 class="anchored" data-anchor-id="트리tree">트리(Tree)</h2>
<ul>
<li>트리는 가계도와 같이 <strong>계층적인 구조</strong>를 표현할 때 사용할 수 있는 자료구조다.</li>
<li>나무(tree)의 형태를 뒤집은 것과 같이 생겼다.</li>
<li>다수의 데이터를 관리하기에 적합한 트리 자료 구조의 가장 기본적인 형태</li>
</ul>
</section>
<section id="트리-용어-정리" class="level2">
<h2 class="anchored" data-anchor-id="트리-용어-정리">트리 용어 정리</h2>
<ul>
<li>루트 노드(root node): 부모가 없는 최상위 노드</li>
<li>단말 노드(leaf node): 자식이 없는 노드</li>
<li>트리(tree)에서는 부모와 자식 관계가 성립한다 (직계).</li>
<li>형제 관계 (sibling, 방계): 부모 node로 부터 왼쪽 자식과 오른쪽 자식과의 관계</li>
<li>깊이(depth): 루트 노드에서의 길이(length), 루트 노드로부터 손자까지의 depth=2
<ul>
<li>이때, 길이란 출발 노드에서 목적지 노드까지 거쳐야 하는 간선의 수를 의미한다.</li>
</ul></li>
<li>트리의 높이(height)은 루트 노드에서 가장 깊은 노드까지의 길이를 의미한다.</li>
</ul>
</section>
<section id="이진-트리binary-tree" class="level2">
<h2 class="anchored" data-anchor-id="이진-트리binary-tree">이진 트리(Binary Tree)</h2>
<ul>
<li>이진 트리는 최대 2개의 자식을 가질 수 있는 트리를 말한다.</li>
</ul>
</section>
<section id="이진-탐색-트리binary-search-tree" class="level2">
<h2 class="anchored" data-anchor-id="이진-탐색-트리binary-search-tree">이진 탐색 트리(Binary Search Tree)</h2>
<ul>
<li>다수의 데이터를 관리(조회, 저장, 삭제)하기 위한 가장 기본적인 자료구조 중 하나다.</li>
<li>이진 탐색 트리의 성질: 순서가 있음
<ul>
<li>왼쪽 자식 노드 &lt; 부모 노드 &lt; 오른쪽 자식 노드</li>
<li>루트 노드 기준 모든 왼쪽 노드들은 루트 노드보다 작음</li>
<li>루트 노드 기준 모든 오른쪽 노드들은 루트 노드보다 큼</li>
<li>2진 탐색을 가능하게 하는 구조</li>
</ul></li>
</ul>
<section id="이진-탐색-트리binary-search-tree의-성질" class="level3">
<h3 class="anchored" data-anchor-id="이진-탐색-트리binary-search-tree의-성질">이진 탐색 트리(Binary Search Tree)의 성질</h3>
<ul>
<li>특정한 노드의 <strong>키(key) 값</strong>보다 그 왼쪽 자식 노드의 <strong>키(key) 값</strong>이 더 작다.</li>
<li>특정한 노드의 키(key) 값보다 그 오른쪽 자식 노드의 키(key) 값이 더 크다.</li>
<li>특정한 노드의 왼쪽 서브 트리, 오른쪽 서브 트리 모두 이진 탐색 트리다.</li>
<li>worst case: 찾는게 없을 때 혹은 찾고자 하는 데이터가 가장 마지막에 있을 때
<ul>
<li>탐색시 재귀적으로 중앙값을 기준으로 오른쪽만 찾음</li>
<li>매 실행마다 데이터의 개수가 절반씩 줄어듬</li>
<li>그러면, 몇 번만에 사이즈가 1이 되는가?</li>
<li>수식 유도, input size를 N이라고 가정했을때</li>
<li><img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%20%7B(%5Cfrac%7B1%7D%7B2%7D)%7D%5E%7Bk%7D=1%20%5Crightarrow%20N=2%5Ek%20%5Crightarrow%20k%20=%20log_2N"></li>
<li>위의 수식을 점근적 표기법으로 표현하면 <img src="https://latex.codecogs.com/png.latex?%5CTheta(logN)"></li>
</ul></li>
<li>best case: 한번에 찾았을 때
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5CTheta(1)"></li>
</ul></li>
<li>그러므로, lower bound = <img src="https://latex.codecogs.com/png.latex?%5CTheta(1)">, upper bound = <img src="https://latex.codecogs.com/png.latex?O(logN)"></li>
</ul>
</section>
<section id="삽입-연산" class="level3">
<h3 class="anchored" data-anchor-id="삽입-연산">삽입 연산</h3>
<ul>
<li>루트 노드에서 출발하여 아래쪽으로 내려오면서, 삽입할 위치를 찾는다.
<ol type="1">
<li>삽입할 노드의 키(key)가 작으면 왼쪽으로,</li>
<li>삽입할 노드의 키(key)가 크면 오른쪽으로 삽입</li>
</ol></li>
<li>삽입할 노드 목록 예시: [7,4,5,9,6,2,3,2,8]으로 트리 생성해보기</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-20_binary_search_tree/Binary_tree.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Binary Tree</figcaption><p></p>
</figure>
</div>
<p><a href="https://www.youtube.com/watch?v=i5yHkP1jQmo">Sorcue: 코딩 테스트를 위한 트리(Tree) 자료구조 10분 핵심 요약 By 동빈나</a></p>
</section>
<section id="조회-연산" class="level3">
<h3 class="anchored" data-anchor-id="조회-연산">조회 연산</h3>
<ul>
<li>루트 노드에서 출발하여 아래쪽으로 내려오면서, 찾고자 하는 원소를 조회한다. 삽입 연산과 같은 로직을 따름</li>
<li>1 삽입할 노드의 키(key)가 작으면 왼쪽으로, 2 삽입할 노드의 키(key)가 크면 오른쪽으로 조회</li>
<li>조회할 노드 목록 예시: 5번 노드</li>
</ul>
</section>
<section id="삭제-연산" class="level3">
<h3 class="anchored" data-anchor-id="삭제-연산">삭제 연산</h3>
<ul>
<li>루트 노드에서 출발하여 아래쪽으로 내려오면서, 삭제할 원소에 접근한다.</li>
<li>삭제할 노드 목록 예시: 7번 노드
<ul>
<li>Case #1 왼쪽 자식이 없는 경우 → 오른쪽 자식으로 대체</li>
<li>Case #2 오른쪽 자식이 없는 경우 → 왼쪽 자식으로 대체</li>
<li>Case #3 왼쪽, 오른쪽이 모두 있는 경우 → 오른쪽 서브</li>
</ul></li>
<li>트리에서 가장 작은 노드로 대체</li>
<li>삭제할 노드 목록 예시: 4번 노드</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-20_binary_search_tree/binary_tree_deletion.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Binary Tree Deletion</figcaption><p></p>
</figure>
</div>
<p><a href="https://www.youtube.com/watch?v=i5yHkP1jQmo">Sorcue: 코딩 테스트를 위한 트리(Tree) 자료구조 10분 핵심 요약 By 동빈나</a></p>
</section>
</section>
<section id="트리의-순회" class="level2">
<h2 class="anchored" data-anchor-id="트리의-순회">트리의 순회</h2>
<ul>
<li>트리에 포함되어 있는 정보를 모두 출력하고자 할 때, 어떤 방식을 사용할 수 있을까?</li>
<li>바로 순회(traversal)를 사용할 수 있다.</li>
<li>트리의 모든 노드를 특정한 순서(조건)에 따라서 방문하는 방법을 순회(traversal)라고 한다.</li>
</ul>
<ol type="1">
<li>전위 순회(pre-order traverse): 루트 방문 → 왼쪽 자식 방문 → 오른쪽 자식 방문</li>
<li>중위 순회(in-order traverse): 왼쪽 자식 방문 → 루트 방문 → 오른쪽 자식 방문</li>
<li>후위 순회(post-order traverse): 왼쪽 자식 방문 → 오른쪽 자식 방문 → 루트 방문</li>
</ol>
<section id="트리의-순회-한-눈에-보기" class="level3">
<h3 class="anchored" data-anchor-id="트리의-순회-한-눈에-보기">트리의 순회 한 눈에 보기</h3>
<ul>
<li>전위 순회(pre-order traverse): A → B → D → E → C → F → G</li>
<li>중위 순회(in-order traverse): D → B → E → A → F → C → G</li>
<li>후위 순회(post-order traverse): D → E → B → F → G → C → A</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-20_binary_search_tree/binary_tree_traverse.png" class="img-fluid figure-img"></p>
<p></p><figcaption class="figure-caption">Binary Tree Traverse</figcaption><p></p>
</figure>
</div>
<p><a href="https://www.youtube.com/watch?v=i5yHkP1jQmo">Sorcue: 코딩 테스트를 위한 트리(Tree) 자료구조 10분 핵심 요약 By 동빈나</a></p>
</section>
<section id="전위-순회pre-order-traverse" class="level3">
<h3 class="anchored" data-anchor-id="전위-순회pre-order-traverse">전위 순회(pre-order traverse)</h3>
<p>• 방문 방법: 현재 노드 → 왼쪽 자식 노드 → 오른쪽 자식 노드</p>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">def</span> _preorder(<span class="va" style="color: #111111;">self</span>, node):</span>
<span id="cb1-2">  <span class="cf" style="color: #003B4F;">if</span> node:</span>
<span id="cb1-3">    <span class="bu" style="color: null;">print</span>(node.key, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb1-4">    <span class="va" style="color: #111111;">self</span>._preorder(node.left)</span>
<span id="cb1-5">    <span class="va" style="color: #111111;">self</span>._preorder(node.right)</span></code></pre></div>
</details>
</div>
</section>
<section id="중위-순회inorder-traversal" class="level3">
<h3 class="anchored" data-anchor-id="중위-순회inorder-traversal">중위 순회(Inorder Traversal)</h3>
<ul>
<li>방문 방법: 왼쪽 자식 노드 → 현재 노드 → 오른쪽 자식 노드</li>
</ul>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;">def</span> _inorder(<span class="va" style="color: #111111;">self</span>, node):</span>
<span id="cb2-2">  <span class="cf" style="color: #003B4F;">if</span> node:</span>
<span id="cb2-3">    <span class="va" style="color: #111111;">self</span>._inorder(node.left)</span>
<span id="cb2-4">    <span class="bu" style="color: null;">print</span>(node.key, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb2-5">    <span class="va" style="color: #111111;">self</span>._inorder(node.right)</span></code></pre></div>
</details>
</div>
</section>
<section id="후위-순회postorder-traversal" class="level3">
<h3 class="anchored" data-anchor-id="후위-순회postorder-traversal">후위 순회(Postorder Traversal)</h3>
<ul>
<li>방문 방법: 왼쪽 자식 노드 → 오른쪽 자식 노드 → 현재 노드</li>
</ul>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">def</span> _postorder(<span class="va" style="color: #111111;">self</span>, node):</span>
<span id="cb3-2">  <span class="cf" style="color: #003B4F;">if</span> node:</span>
<span id="cb3-3">    <span class="va" style="color: #111111;">self</span>._postorder(node.left)</span>
<span id="cb3-4">    <span class="va" style="color: #111111;">self</span>._postorder(node.right)</span>
<span id="cb3-5">    <span class="bu" style="color: null;">print</span>(node.key, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span></code></pre></div>
</details>
</div>
</section>
<section id="레벨-순회level-order-traversal" class="level3">
<h3 class="anchored" data-anchor-id="레벨-순회level-order-traversal">레벨 순회(Level Order Traversal)</h3>
<ul>
<li>낮은 레벨(루트)부터 높은 레벨까지 순차적으로 방문한다.</li>
<li>단순히 루트 노드에서부터 너비 우선 탐색(BST)를 진행하면 된다.</li>
<li>레벨 순회 순회(level-order traverse): A → B → C → D → E → F → G</li>
</ul>
</section>
</section>
<section id="이진-탐색-트리의-구현" class="level2">
<h2 class="anchored" data-anchor-id="이진-탐색-트리의-구현">이진 탐색 트리의 구현</h2>
<ul>
<li>다른 메서드 안에서 사용되는 메서드는 이름 앞에 언더바(_) 기호를 붙인다.</li>
</ul>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> search(<span class="va" style="color: #111111;">self</span>, node, key):</span>
<span id="cb4-2">  <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>._search(<span class="va" style="color: #111111;">self</span>.root, key) <span class="co" style="color: #5E5E5E;"># search: recursively 조회</span></span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="kw" style="color: #003B4F;">def</span> _search(<span class="va" style="color: #111111;">self</span>, node, key):</span>
<span id="cb4-5">  <span class="cf" style="color: #003B4F;">if</span> node <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">or</span> node.key <span class="op" style="color: #5E5E5E;">==</span> key:</span>
<span id="cb4-6">    <span class="cf" style="color: #003B4F;">return</span> node</span>
<span id="cb4-7"></span>
<span id="cb4-8">  <span class="co" style="color: #5E5E5E;"># 현재 노드의 key보다 작은 경우</span></span>
<span id="cb4-9">  <span class="cf" style="color: #003B4F;">if</span> node.key <span class="op" style="color: #5E5E5E;">&gt;</span> key:</span>
<span id="cb4-10">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>._search(node.left, key)</span>
<span id="cb4-11"></span>
<span id="cb4-12">  <span class="co" style="color: #5E5E5E;"># 현재 노드의 key보다 큰 경우</span></span>
<span id="cb4-13">  <span class="cf" style="color: #003B4F;">elif</span> node.key <span class="op" style="color: #5E5E5E;">&lt;</span> key:</span>
<span id="cb4-14">    <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>._search(node.right, key)</span></code></pre></div>
</details>
</div>
<section id="편향-이진-트리skewed-binary-tree" class="level3">
<h3 class="anchored" data-anchor-id="편향-이진-트리skewed-binary-tree">편향 이진 트리(Skewed Binary Tree)</h3>
<ul>
<li>편향 이진 트리는 다음의 두 가지 속성을 가진다.</li>
</ul>
<ol type="1">
<li>같은 높이의 이진 트리 중 최소 개수의 노드 개수를 가진다.</li>
<li>왼쪽 혹은 오른쪽으로 한 방향에 대한 서브 트리를 가진다.</li>
</ol>
</section>
<section id="이진-탐색-트리의-시간-복잡도" class="level3">
<h3 class="anchored" data-anchor-id="이진-탐색-트리의-시간-복잡도">이진 탐색 트리의 시간 복잡도</h3>
<ul>
<li>노드의 개수가 N개일 때, 시간 복잡도는 다음과 같다.</li>
<li>트리의 높이(height)을 H라고 할 때, 엄밀한 시간 복잡도는 <img src="https://latex.codecogs.com/png.latex?O(H)"> 다.</li>
<li>이상적인 경우 H = log2 N로 볼 수 있다.</li>
<li>하지만 최악의 경우(편향된 경우) H = N로 볼 수 있다.</li>
</ul>
<div id="tbl-letters" class="anchored">
<table class="table">
<caption>Table&nbsp;1: a list of the time complexity of the binary search trees in Python</caption>
<colgroup>
<col style="width: 11%">
<col style="width: 33%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 13%">
</colgroup>
<thead>
<tr class="header">
<th>Number</th>
<th>Methods</th>
<th>조회</th>
<th>삽입</th>
<th>삭제</th>
<th>수정</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>균형 잡힌 이진 탐색 트리</td>
<td><img src="https://latex.codecogs.com/png.latex?O(logN)"></td>
<td><img src="https://latex.codecogs.com/png.latex?O(logN)"></td>
<td><img src="https://latex.codecogs.com/png.latex?O(logN)"></td>
<td><img src="https://latex.codecogs.com/png.latex?O(logN)"></td>
</tr>
<tr class="even">
<td>2</td>
<td>편향 이진 탐색 트리</td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
</tr>
</tbody>
</table>
</div>
<p>See Table&nbsp;1.</p>
</section>
<section id="균형-잡힌-트리-avl-트리" class="level3">
<h3 class="anchored" data-anchor-id="균형-잡힌-트리-avl-트리">균형 잡힌 트리: AVL 트리</h3>
<ul>
<li>AVL stands for <strong>A</strong>delson-<strong>V</strong>elsky and <strong>L</strong>andis</li>
<li>이진 탐색 트리는 편향 트리가 될 수 있으므로, 최악의 경우 <img src="https://latex.codecogs.com/png.latex?O(N)"> 을 요구한다.</li>
<li>반면에 AVL 트리는 균형이 갖춰진 이진 트리다.</li>
<li>간단한 구현 과정으로 완전 이진 트리에 가까운 형태를 유지하도록 한다.</li>
</ul>
<div class="cell" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> deque</span>
<span id="cb5-2"></span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;">class</span> Node:</span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, key):</span>
<span id="cb5-6">        <span class="va" style="color: #111111;">self</span>.key <span class="op" style="color: #5E5E5E;">=</span> key</span>
<span id="cb5-7">        <span class="va" style="color: #111111;">self</span>.left <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb5-8">        <span class="va" style="color: #111111;">self</span>.right <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb5-9"></span>
<span id="cb5-10"></span>
<span id="cb5-11"><span class="kw" style="color: #003B4F;">class</span> BinarySearchTree:</span>
<span id="cb5-12">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-13">        <span class="va" style="color: #111111;">self</span>.root <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb5-14"></span>
<span id="cb5-15">    <span class="kw" style="color: #003B4F;">def</span> search(<span class="va" style="color: #111111;">self</span>, node, key):</span>
<span id="cb5-16">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>._search(<span class="va" style="color: #111111;">self</span>.root, key)</span>
<span id="cb5-17"></span>
<span id="cb5-18">    <span class="kw" style="color: #003B4F;">def</span> _search(<span class="va" style="color: #111111;">self</span>, node, key):</span>
<span id="cb5-19">        <span class="cf" style="color: #003B4F;">if</span> node <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span> <span class="kw" style="color: #003B4F;">or</span> node.key <span class="op" style="color: #5E5E5E;">==</span> key:</span>
<span id="cb5-20">            <span class="cf" style="color: #003B4F;">return</span> node</span>
<span id="cb5-21"></span>
<span id="cb5-22">        <span class="co" style="color: #5E5E5E;"># 현재 노드의 key보다 작은 경우</span></span>
<span id="cb5-23">        <span class="cf" style="color: #003B4F;">if</span> node.key <span class="op" style="color: #5E5E5E;">&gt;</span> key:</span>
<span id="cb5-24">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>._search(node.left, key)</span>
<span id="cb5-25">        <span class="co" style="color: #5E5E5E;"># 현재 노드의 key보다 큰 경우</span></span>
<span id="cb5-26">        <span class="cf" style="color: #003B4F;">elif</span> node.key <span class="op" style="color: #5E5E5E;">&lt;</span> key:</span>
<span id="cb5-27">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>._search(node.right, key)</span>
<span id="cb5-28"></span>
<span id="cb5-29">    <span class="kw" style="color: #003B4F;">def</span> insert(<span class="va" style="color: #111111;">self</span>, key):</span>
<span id="cb5-30">        <span class="va" style="color: #111111;">self</span>.root <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>._insert(<span class="va" style="color: #111111;">self</span>.root, key)</span>
<span id="cb5-31"></span>
<span id="cb5-32">    <span class="kw" style="color: #003B4F;">def</span> _insert(<span class="va" style="color: #111111;">self</span>, node, key):</span>
<span id="cb5-33">        <span class="cf" style="color: #003B4F;">if</span> node <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-34">            <span class="cf" style="color: #003B4F;">return</span> Node(key)</span>
<span id="cb5-35"></span>
<span id="cb5-36">        <span class="co" style="color: #5E5E5E;"># 현재 노드의 key보다 작은 경우</span></span>
<span id="cb5-37">        <span class="cf" style="color: #003B4F;">if</span> node.key <span class="op" style="color: #5E5E5E;">&gt;</span> key:</span>
<span id="cb5-38">            node.left <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>._insert(node.left, key)</span>
<span id="cb5-39">        <span class="co" style="color: #5E5E5E;"># 현재 노드의 key보다 큰 경우</span></span>
<span id="cb5-40">        <span class="cf" style="color: #003B4F;">elif</span> node.key <span class="op" style="color: #5E5E5E;">&lt;</span> key:</span>
<span id="cb5-41">            node.right <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>._insert(node.right, key)</span>
<span id="cb5-42"></span>
<span id="cb5-43">        <span class="cf" style="color: #003B4F;">return</span> node</span>
<span id="cb5-44"></span>
<span id="cb5-45">    <span class="kw" style="color: #003B4F;">def</span> delete(<span class="va" style="color: #111111;">self</span>, key):</span>
<span id="cb5-46">        <span class="va" style="color: #111111;">self</span>.root <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>._delete(<span class="va" style="color: #111111;">self</span>.root, key)</span>
<span id="cb5-47"></span>
<span id="cb5-48">    <span class="kw" style="color: #003B4F;">def</span> _delete(<span class="va" style="color: #111111;">self</span>, node, key):</span>
<span id="cb5-49">        <span class="cf" style="color: #003B4F;">if</span> node <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-50">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb5-51"></span>
<span id="cb5-52">        <span class="co" style="color: #5E5E5E;"># 현재 노드의 key보다 작은 경우</span></span>
<span id="cb5-53">        <span class="cf" style="color: #003B4F;">if</span> node.key <span class="op" style="color: #5E5E5E;">&gt;</span> key:</span>
<span id="cb5-54">            node.left <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>._delete(node.left, key)</span>
<span id="cb5-55">        <span class="co" style="color: #5E5E5E;"># 현재 노드의 key보다 큰 경우</span></span>
<span id="cb5-56">        <span class="cf" style="color: #003B4F;">elif</span> node.key <span class="op" style="color: #5E5E5E;">&lt;</span> key:</span>
<span id="cb5-57">            node.right <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>._delete(node.right, key)</span>
<span id="cb5-58">        <span class="co" style="color: #5E5E5E;"># 삭제할 노드를 찾은 경우</span></span>
<span id="cb5-59">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb5-60">            <span class="co" style="color: #5E5E5E;"># 왼쪽 자식이 없는 경우</span></span>
<span id="cb5-61">            <span class="cf" style="color: #003B4F;">if</span> node.left <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-62">                <span class="cf" style="color: #003B4F;">return</span> node.right</span>
<span id="cb5-63">            <span class="co" style="color: #5E5E5E;"># 오른쪽 자식이 없는 경우</span></span>
<span id="cb5-64">            <span class="cf" style="color: #003B4F;">elif</span> node.right <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-65">                <span class="cf" style="color: #003B4F;">return</span> node.left</span>
<span id="cb5-66">            <span class="co" style="color: #5E5E5E;"># 왼쪽과 오른쪽 자식 모두 있는 경우</span></span>
<span id="cb5-67">            node.key <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>._get_min(node.right)</span>
<span id="cb5-68">            node.right <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>._delete(node.right, node.key)</span>
<span id="cb5-69"></span>
<span id="cb5-70">        <span class="cf" style="color: #003B4F;">return</span> node</span>
<span id="cb5-71"></span>
<span id="cb5-72">    <span class="kw" style="color: #003B4F;">def</span> _get_min(<span class="va" style="color: #111111;">self</span>, node):</span>
<span id="cb5-73">        key <span class="op" style="color: #5E5E5E;">=</span> node.key</span>
<span id="cb5-74">        <span class="cf" style="color: #003B4F;">while</span> node.left:</span>
<span id="cb5-75">            key <span class="op" style="color: #5E5E5E;">=</span> node.left.key</span>
<span id="cb5-76">            node <span class="op" style="color: #5E5E5E;">=</span> node.left</span>
<span id="cb5-77">        <span class="cf" style="color: #003B4F;">return</span> key</span>
<span id="cb5-78"></span>
<span id="cb5-79">    <span class="kw" style="color: #003B4F;">def</span> preorder(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-80">        <span class="va" style="color: #111111;">self</span>._preorder(<span class="va" style="color: #111111;">self</span>.root)</span>
<span id="cb5-81"></span>
<span id="cb5-82">    <span class="kw" style="color: #003B4F;">def</span> _preorder(<span class="va" style="color: #111111;">self</span>, node):</span>
<span id="cb5-83">        <span class="cf" style="color: #003B4F;">if</span> node:</span>
<span id="cb5-84">            <span class="bu" style="color: null;">print</span>(node.key, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-85">            <span class="va" style="color: #111111;">self</span>._preorder(node.left)</span>
<span id="cb5-86">            <span class="va" style="color: #111111;">self</span>._preorder(node.right)</span>
<span id="cb5-87"></span>
<span id="cb5-88">    <span class="kw" style="color: #003B4F;">def</span> inorder(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-89">        <span class="va" style="color: #111111;">self</span>._inorder(<span class="va" style="color: #111111;">self</span>.root)</span>
<span id="cb5-90"></span>
<span id="cb5-91">    <span class="kw" style="color: #003B4F;">def</span> _inorder(<span class="va" style="color: #111111;">self</span>, node):</span>
<span id="cb5-92">        <span class="cf" style="color: #003B4F;">if</span> node:</span>
<span id="cb5-93">            <span class="va" style="color: #111111;">self</span>._inorder(node.left)</span>
<span id="cb5-94">            <span class="bu" style="color: null;">print</span>(node.key, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-95">            <span class="va" style="color: #111111;">self</span>._inorder(node.right)</span>
<span id="cb5-96"></span>
<span id="cb5-97">    <span class="kw" style="color: #003B4F;">def</span> postorder(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-98">        <span class="va" style="color: #111111;">self</span>._postorder(<span class="va" style="color: #111111;">self</span>.root)</span>
<span id="cb5-99"></span>
<span id="cb5-100">    <span class="kw" style="color: #003B4F;">def</span> _postorder(<span class="va" style="color: #111111;">self</span>, node):</span>
<span id="cb5-101">        <span class="cf" style="color: #003B4F;">if</span> node:</span>
<span id="cb5-102">            <span class="va" style="color: #111111;">self</span>._postorder(node.left)</span>
<span id="cb5-103">            <span class="va" style="color: #111111;">self</span>._postorder(node.right)</span>
<span id="cb5-104">            <span class="bu" style="color: null;">print</span>(node.key, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-105"></span>
<span id="cb5-106">    <span class="kw" style="color: #003B4F;">def</span> levelorder(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-107">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>._levelorder(<span class="va" style="color: #111111;">self</span>.root)</span>
<span id="cb5-108"></span>
<span id="cb5-109">    <span class="kw" style="color: #003B4F;">def</span> _levelorder(<span class="va" style="color: #111111;">self</span>, node):</span>
<span id="cb5-110">        <span class="cf" style="color: #003B4F;">if</span> node <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-111">            <span class="cf" style="color: #003B4F;">return</span></span>
<span id="cb5-112"></span>
<span id="cb5-113">        result <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb5-114"></span>
<span id="cb5-115">        queue <span class="op" style="color: #5E5E5E;">=</span> deque()</span>
<span id="cb5-116">        queue.append((<span class="dv" style="color: #AD0000;">0</span>, node))  <span class="co" style="color: #5E5E5E;"># (level, node)</span></span>
<span id="cb5-117"></span>
<span id="cb5-118">        <span class="cf" style="color: #003B4F;">while</span> queue:</span>
<span id="cb5-119">            level, node <span class="op" style="color: #5E5E5E;">=</span> queue.popleft()</span>
<span id="cb5-120">            <span class="cf" style="color: #003B4F;">if</span> node:</span>
<span id="cb5-121">                result.append((level, node.key))</span>
<span id="cb5-122">                queue.append((level <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, node.left))</span>
<span id="cb5-123">                queue.append((level <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>, node.right))</span>
<span id="cb5-124"></span>
<span id="cb5-125">        <span class="cf" style="color: #003B4F;">for</span> level, key <span class="kw" style="color: #003B4F;">in</span> result:</span>
<span id="cb5-126">            <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"level: </span><span class="sc" style="color: #5E5E5E;">{</span>level<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">, key: </span><span class="sc" style="color: #5E5E5E;">{</span>key<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span>
<span id="cb5-127"></span>
<span id="cb5-128">    <span class="kw" style="color: #003B4F;">def</span> to_list(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb5-129">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>._to_list(<span class="va" style="color: #111111;">self</span>.root)</span>
<span id="cb5-130"></span>
<span id="cb5-131">    <span class="kw" style="color: #003B4F;">def</span> _to_list(<span class="va" style="color: #111111;">self</span>, node):</span>
<span id="cb5-132">        <span class="cf" style="color: #003B4F;">if</span> node <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb5-133">            <span class="cf" style="color: #003B4F;">return</span> []</span>
<span id="cb5-134">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>._to_list(node.left) <span class="op" style="color: #5E5E5E;">+</span> [node.key] <span class="op" style="color: #5E5E5E;">+</span> <span class="va" style="color: #111111;">self</span>._to_list(</span>
<span id="cb5-135">            node.right)</span>
<span id="cb5-136"></span>
<span id="cb5-137"></span>
<span id="cb5-138">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">8</span>]</span>
<span id="cb5-139">bst <span class="op" style="color: #5E5E5E;">=</span> BinarySearchTree()</span>
<span id="cb5-140"><span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> arr:</span>
<span id="cb5-141">    bst.insert(x)</span>
<span id="cb5-142"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'전위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-143">bst.preorder()</span>
<span id="cb5-144"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">중위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-145">bst.inorder()</span>
<span id="cb5-146"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">후위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-147">bst.postorder()</span>
<span id="cb5-148"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">[레벨 순회]'</span>)</span>
<span id="cb5-149">bst.levelorder()</span>
<span id="cb5-150"></span>
<span id="cb5-151">bst.delete(<span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb5-152"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">전위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-153">bst.preorder()</span>
<span id="cb5-154"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">중위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-155">bst.inorder()</span>
<span id="cb5-156"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">후위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-157">bst.postorder()</span>
<span id="cb5-158"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">[레벨 순회]'</span>)</span>
<span id="cb5-159">bst.levelorder()</span>
<span id="cb5-160"></span>
<span id="cb5-161">bst.delete(<span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb5-162"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">전위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-163">bst.preorder()</span>
<span id="cb5-164"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">중위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-165">bst.inorder()</span>
<span id="cb5-166"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">후위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-167">bst.postorder()</span>
<span id="cb5-168"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">[레벨 순회]'</span>)</span>
<span id="cb5-169">bst.levelorder()</span>
<span id="cb5-170"></span>
<span id="cb5-171">bst.delete(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb5-172"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">전위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-173">bst.preorder()</span>
<span id="cb5-174"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">중위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-175">bst.inorder()</span>
<span id="cb5-176"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">후위 순회:'</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">' '</span>)</span>
<span id="cb5-177">bst.postorder()</span>
<span id="cb5-178"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">'</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">[레벨 순회]'</span>)</span>
<span id="cb5-179">bst.levelorder()</span>
<span id="cb5-180"></span>
<span id="cb5-181"><span class="bu" style="color: null;">print</span>(bst.to_list())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>전위 순회: 7 4 3 2 5 6 9 8 
중위 순회: 2 3 4 5 6 7 8 9 
후위 순회: 2 3 6 5 4 8 9 7 
[레벨 순회]
level: 0, key: 7
level: 1, key: 4
level: 1, key: 9
level: 2, key: 3
level: 2, key: 5
level: 2, key: 8
level: 3, key: 2
level: 3, key: 6

전위 순회: 8 4 3 2 5 6 9 
중위 순회: 2 3 4 5 6 8 9 
후위 순회: 2 3 6 5 4 9 8 
[레벨 순회]
level: 0, key: 8
level: 1, key: 4
level: 1, key: 9
level: 2, key: 3
level: 2, key: 5
level: 3, key: 2
level: 3, key: 6

전위 순회: 8 5 3 2 6 9 
중위 순회: 2 3 5 6 8 9 
후위 순회: 2 3 6 5 9 8 
[레벨 순회]
level: 0, key: 8
level: 1, key: 5
level: 1, key: 9
level: 2, key: 3
level: 2, key: 6
level: 3, key: 2

전위 순회: 8 5 2 6 9 
중위 순회: 2 5 6 8 9 
후위 순회: 2 6 5 9 8 
[레벨 순회]
level: 0, key: 8
level: 1, key: 5
level: 1, key: 9
level: 2, key: 2
level: 2, key: 6
[2, 5, 6, 8, 9]</code></pre>
</div>
</div>
</section>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>



</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-20_binary_search_tree/index.html</guid>
  <pubDate>Thu, 26 Jan 2023 15:00:00 GMT</pubDate>
  <media:content url="kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-20_binary_search_tree/Binary_tree.png" medium="image" type="image/png" height="100" width="144"/>
</item>
<item>
  <title>ANCOVA</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/statistics/2023-01-27_ANCOVA/index.html</link>
  <description><![CDATA[ 



<p>(Draft, 바쁘니까 일단 대충이라도 적어놓음 ㅠ)</p>
<section id="description" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="description"><span class="header-section-number">1</span> Description</h2>
<p>ANCOVA (Analysis of Covariance, ANCOVA)</p>
<ul>
<li>ANOVA에 공변량 (covariate)을 추가하여 분석 수행</li>
<li>공변량을 조정하여 독립변수의 순수한 영향을 검정</li>
<li>공변량: 연속형 변수로 한정</li>
</ul>
</section>
<section id="example" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="example"><span class="header-section-number">2</span> Example</h2>
<section id="load-libraries-and-data" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="load-libraries-and-data"><span class="header-section-number">2.1</span> Load Libraries and Data</h3>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;">library</span>(faraway)</span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;">library</span>(markdown)</span>
<span id="cb1-4"><span class="fu" style="color: #4758AB;">library</span>(effects)</span>
<span id="cb1-5"><span class="fu" style="color: #4758AB;">library</span>(HH)</span>
<span id="cb1-6"><span class="fu" style="color: #4758AB;">library</span>(psych)</span></code></pre></div>
</details>
</div>
</section>
<section id="data-description" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="data-description"><span class="header-section-number">2.2</span> Data Description</h3>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;">str</span>(sexab)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>'data.frame':   76 obs. of  3 variables:
 $ cpa : num  2.048 0.839 -0.241 -1.115 2.015 ...
 $ ptsd: num  9.71 6.17 15.16 11.31 9.95 ...
 $ csa : Factor w/ 2 levels "Abused","NotAbused": 1 1 1 1 1 1 1 1 1 1 ...</code></pre>
</div>
</div>
<p>R console에 <code>?sexab</code>를 입력하면 다음과 같은 설명이 나온다.</p>
<p><strong>Post traumatic stress disorder in abused adult females</strong></p>
<p><em>The data for this example come from a study of the effects of childhood sexual abuse on adult females. 45 women being treated at a clinic, who reported childhood sexual abuse, were measured for post traumatic stress disorder and childhood physical abuse both on standardized scales. 31 women also being treated at the same clinic, who did not report childhood sexual abuse were also measured. The full study was more complex than reported here and so readers interested in the subject matter should refer to the original article.</em></p>
<p>즉, 요약하면 아동기에 성폭력을 겸험한 성인들의 정신 건강을 측정한 데이터로서, 아동기의 성폭력 경험과 학대 경험이 성인기의 정신건강에 유의한 영향을 미치는지에 대한 실험을 한 것이다.</p>
<p>이 data는 3개의 변수와 76개의 samples을 포함한다.</p>
<ul>
<li>cpa : Childhood physical abuse on standard scale, covariate</li>
<li>ptsd : post-traumatic stress disorder on standard scale, response variable</li>
<li>csa : Childhood sexual abuse - abused or not abused, independent variable</li>
</ul>
<p>친절하게 response variable, independent variable 및 covariate을 규명해놓았다.</p>
</section>
</section>
<section id="eda" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="eda"><span class="header-section-number">3</span> EDA</h2>
<section id="descriptive-statistics" class="level3" data-number="3.1">
<h3 data-number="3.1" class="anchored" data-anchor-id="descriptive-statistics"><span class="header-section-number">3.1</span> Descriptive Statistics</h3>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">temp<span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">describeBy</span>(ptsd<span class="sc" style="color: #5E5E5E;">~</span>csa,<span class="at" style="color: #657422;">data=</span>sexab)</span>
<span id="cb4-2">temp<span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">rbind</span>(<span class="st" style="color: #20794D;">'abused'</span><span class="ot" style="color: #003B4F;">=</span>temp<span class="sc" style="color: #5E5E5E;">$</span>Abused,<span class="st" style="color: #20794D;">'notAbused'</span><span class="ot" style="color: #003B4F;">=</span>temp<span class="sc" style="color: #5E5E5E;">$</span>NotAbused)<span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;">as.data.frame</span>()</span>
<span id="cb4-4">temp<span class="sc" style="color: #5E5E5E;">%&gt;%</span>knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">kable</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<colgroup>
<col style="width: 8%">
<col style="width: 4%">
<col style="width: 2%">
<col style="width: 8%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 8%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 7%">
<col style="width: 8%">
<col style="width: 8%">
<col style="width: 8%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: left;"></th>
<th style="text-align: right;">vars</th>
<th style="text-align: right;">n</th>
<th style="text-align: right;">mean</th>
<th style="text-align: right;">sd</th>
<th style="text-align: right;">median</th>
<th style="text-align: right;">trimmed</th>
<th style="text-align: right;">mad</th>
<th style="text-align: right;">min</th>
<th style="text-align: right;">max</th>
<th style="text-align: right;">range</th>
<th style="text-align: right;">skew</th>
<th style="text-align: right;">kurtosis</th>
<th style="text-align: right;">se</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">abused</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">45</td>
<td style="text-align: right;">11.941093</td>
<td style="text-align: right;">3.440151</td>
<td style="text-align: right;">11.31277</td>
<td style="text-align: right;">11.883422</td>
<td style="text-align: right;">3.857355</td>
<td style="text-align: right;">5.98491</td>
<td style="text-align: right;">18.99251</td>
<td style="text-align: right;">13.00760</td>
<td style="text-align: right;">0.1556159</td>
<td style="text-align: right;">-0.9124483</td>
<td style="text-align: right;">0.5128275</td>
</tr>
<tr class="even">
<td style="text-align: left;">notAbused</td>
<td style="text-align: right;">1</td>
<td style="text-align: right;">31</td>
<td style="text-align: right;">4.695874</td>
<td style="text-align: right;">3.519743</td>
<td style="text-align: right;">5.79447</td>
<td style="text-align: right;">4.903441</td>
<td style="text-align: right;">1.978841</td>
<td style="text-align: right;">-3.34921</td>
<td style="text-align: right;">10.91447</td>
<td style="text-align: right;">14.26368</td>
<td style="text-align: right;">-0.6589170</td>
<td style="text-align: right;">-0.2008051</td>
<td style="text-align: right;">0.6321645</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>위의 요약된 기술 통계량들 중 표준 편차는 유사하지만 평균 ptsd가 약 7.245219의 차이를 보여준다. 아래의 histogram역시 성폭력을 경험한 그룹과 경험하지 않은 그룹간의 PTSD 수치가 다른것을 볼 수 있다.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">data=</span>sexab,<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>ptsd,<span class="at" style="color: #657422;">color=</span>csa,<span class="at" style="color: #657422;">fill=</span>csa))<span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">geom_histogram</span>(<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">y=</span>..density..),<span class="at" style="color: #657422;">position=</span><span class="st" style="color: #20794D;">"identity"</span>,<span class="at" style="color: #657422;">fill=</span><span class="st" style="color: #20794D;">'white'</span>)<span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">geom_density</span>(<span class="at" style="color: #657422;">alpha=</span><span class="fl" style="color: #AD0000;">0.5</span>)<span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"Histogram, PTSD Grouped by Childhood Sexual Abuse Experience"</span>, <span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">"PTSD"</span>, <span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"Desnsity"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/statistics/2023-01-27_ANCOVA/index_files/figure-html/unnamed-chunk-4-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="one-way-anova" class="level3" data-number="3.2">
<h3 data-number="3.2" class="anchored" data-anchor-id="one-way-anova"><span class="header-section-number">3.2</span> One-Way ANOVA</h3>
<p>성폭력 경험 유무에 따른 PTSD 평균 차이가 통계적으로 유의한지 확인하기 위해 ANOVA를 수행한다.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">sexab_aov<span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">aov</span>(ptsd<span class="sc" style="color: #5E5E5E;">~</span>csa, <span class="at" style="color: #657422;">data=</span>sexab)</span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">summary</span>(sexab_aov)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>            Df Sum Sq Mean Sq F value   Pr(&gt;F)    
csa          1  963.5   963.5    79.9 2.17e-13 ***
Residuals   74  892.4    12.1                     
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>집단간 변수 csa p value가 &lt;0.05 인 것을 확인할 수 있다. csa는 5% 유의수준에서 유의하다.</p>
<p>하지만 PTSD의 변동량은 아동 학대에 의해 설명될 수도 있기 때문에 ptsd의 평균은 csa뿐만 아니라 cpa에 또한 고려되어야한다.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">data=</span>sexab,<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>cpa,<span class="at" style="color: #657422;">y=</span>ptsd))<span class="sc" style="color: #5E5E5E;">+</span><span class="fu" style="color: #4758AB;">geom_point</span>()<span class="sc" style="color: #5E5E5E;">+</span><span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method=</span><span class="st" style="color: #20794D;">"lm"</span>)<span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"Scatter Plot, PTSD vs CPA"</span>, <span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">"CPA"</span>, <span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"PTSD"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/statistics/2023-01-27_ANCOVA/index_files/figure-html/unnamed-chunk-6-1.png" class="img-fluid" width="672"></p>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">correlation<span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">cor.test</span>(sexab<span class="sc" style="color: #5E5E5E;">$</span>cpa,sexab<span class="sc" style="color: #5E5E5E;">$</span>ptsd, <span class="at" style="color: #657422;">method=</span><span class="st" style="color: #20794D;">'pearson'</span>)</span></code></pre></div>
</details>
</div>
<p>그림과 같이 CPA가 증가하면서 PTSD또한 선형적으로 증가하는 패턴을 관찰할 수 있다. 두 변수간의 상관계수 = 0.49이고 p value= 6.2715909^{-6}으로 보아 두 변수 사이에 선형적인 상관관계가 있는 것으로 보인다.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">ggplot</span>(<span class="at" style="color: #657422;">data=</span>sexab,<span class="fu" style="color: #4758AB;">aes</span>(<span class="at" style="color: #657422;">x=</span>cpa,<span class="at" style="color: #657422;">y=</span>ptsd))<span class="sc" style="color: #5E5E5E;">+</span><span class="fu" style="color: #4758AB;">geom_point</span>()<span class="sc" style="color: #5E5E5E;">+</span><span class="fu" style="color: #4758AB;">geom_smooth</span>(<span class="at" style="color: #657422;">method=</span><span class="st" style="color: #20794D;">"lm"</span>)<span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;">facet_wrap</span>(.<span class="sc" style="color: #5E5E5E;">~</span>csa)<span class="sc" style="color: #5E5E5E;">+</span></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;">labs</span>(<span class="at" style="color: #657422;">title=</span><span class="st" style="color: #20794D;">"Scatter Plot, PTSD vs CPA Grouped By CSA"</span>, <span class="at" style="color: #657422;">x=</span><span class="st" style="color: #20794D;">"CPA"</span>, <span class="at" style="color: #657422;">y=</span><span class="st" style="color: #20794D;">"PTSD"</span>)</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/statistics/2023-01-27_ANCOVA/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>아동기 성폭력 경험 유/무에도 PTSD와 CPA와 선형적인 관계가 있는 것으로 보이기 때문에 CSA의 PTSD로의 효과를 검정하기 위해선 CPA를 조정할 필요가 있는것으로 보인다.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="co" style="color: #5E5E5E;"># ptsd로의 순수한 성폭력 경험의 영향도를 얻기 위해서는 아동기 신체적 학대(공변량)에 대해서 고려를 해줘야함</span></span>
<span id="cb11-2"></span>
<span id="cb11-3">sexab_aov<span class="ot" style="color: #003B4F;">&lt;-</span><span class="fu" style="color: #4758AB;">aov</span>(ptsd<span class="sc" style="color: #5E5E5E;">~</span>cpa<span class="sc" style="color: #5E5E5E;">+</span>csa, <span class="at" style="color: #657422;">data=</span>sexab) </span>
<span id="cb11-4"><span class="fu" style="color: #4758AB;">summary</span>(sexab_aov)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>            Df Sum Sq Mean Sq F value   Pr(&gt;F)    
cpa          1  449.8   449.8   41.98 9.46e-09 ***
csa          1  624.0   624.0   58.25 6.91e-11 ***
Residuals   73  782.1    10.7                     
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>아동기의 신체적 학대가 일정하다는 가정하에서 PTSD와 성폭력의 순수한 관계는 5% 유의수준에서 유의하고 공변량, CPA를 조정하기전과 그 유의성이 차이가 있음을 관찰할 수 있다.</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="co" style="color: #5E5E5E;"># CPA가 제거 된 후에 CSA의 순수한 효과를 알아보기</span></span>
<span id="cb13-2"></span>
<span id="cb13-3"><span class="fu" style="color: #4758AB;">ancova</span>(ptsd<span class="sc" style="color: #5E5E5E;">~</span>cpa<span class="sc" style="color: #5E5E5E;">+</span>csa, <span class="at" style="color: #657422;">data=</span>sexab) </span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Analysis of Variance Table

Response: ptsd
          Df Sum Sq Mean Sq F value    Pr(&gt;F)    
cpa        1 449.80  449.80  41.984 9.462e-09 ***
csa        1 624.03  624.03  58.247 6.907e-11 ***
Residuals 73 782.08   10.71                      
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
<div class="cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/statistics/2023-01-27_ANCOVA/index_files/figure-html/unnamed-chunk-9-1.png" class="img-fluid" width="672"></p>
</div>
</div>
<p>두 csa집단에서 두 회귀선의 기울기 같고 절편이 다르게 나타나는 것을 관찰 할 수있다. 기울기가 같은 이유는 cpa가 ptsd에 영향을 미치는 정도가 두집단에서 일정하도록 공변량으로서 통제 했기 때문이다.</p>
</section>
</section>
<section id="blog-guide-map-link" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="blog-guide-map-link"><span class="header-section-number">4</span> Blog Guide Map Link</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/statistics/guide_map/index.html">Statistics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Blog</a></li>
<li><a href="../../../../../docs/blog/posts/DL/guide_map/index.html">Deep Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/ML/guide_map/index.html">Machine Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Mathematics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Patent/guide_map/index.html">Patent Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Validation/guide_map/index.html">Validation Blog</a></li>
</ul>


</section>

 ]]></description>
  <category>Statistics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/statistics/2023-01-27_ANCOVA/index.html</guid>
  <pubDate>Thu, 26 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Repeated Meausres ANOVA</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/statistics/2023-01-27_rmANOVA/index.html</link>
  <description><![CDATA[ 



<p>(Draft, 바쁘니까 일단 대충이라도 적어놓음 ㅠ)</p>
<section id="description" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="description"><span class="header-section-number">1</span> Description</h2>
<p>Repeated Meausres ANOVA (반복 측정 분산 분석)</p>
<ul>
<li>동일한 대상에 대해 여러 번 반복측정하여 반복측정(3번 이상) 집단 간에 차이가 존재하는지 검정
<ul>
<li>대응 표본 검정은 동일한 대상에 2번 반복 측정함 2개의 대응표본에 대한 검정</li>
</ul></li>
<li>이 때, 반복 측정 기간은 집단 내 요인이라 부르고 이를 반복측정 일원분산분석-집단내요인이라고 부름</li>
<li>반복측정 기간외에 대상을 구분하는 집단 변수가 포함되면 반복측정 이원분산분석- 집단내요인 &amp; 집단간 요인</li>
</ul>
</section>
<section id="example" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="example"><span class="header-section-number">2</span> Example</h2>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;">str</span>(CO2)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Classes 'nfnGroupedData', 'nfGroupedData', 'groupedData' and 'data.frame':  84 obs. of  5 variables:
 $ Plant    : Ord.factor w/ 12 levels "Qn1"&lt;"Qn2"&lt;"Qn3"&lt;..: 1 1 1 1 1 1 1 2 2 2 ...
 $ Type     : Factor w/ 2 levels "Quebec","Mississippi": 1 1 1 1 1 1 1 1 1 1 ...
 $ Treatment: Factor w/ 2 levels "nonchilled","chilled": 1 1 1 1 1 1 1 1 1 1 ...
 $ conc     : num  95 175 250 350 500 675 1000 95 175 250 ...
 $ uptake   : num  16 30.4 34.8 37.2 35.3 39.2 39.7 13.6 27.3 37.1 ...
 - attr(*, "formula")=Class 'formula'  language uptake ~ conc | Plant
  .. ..- attr(*, ".Environment")=&lt;environment: R_EmptyEnv&gt; 
 - attr(*, "outer")=Class 'formula'  language ~Treatment * Type
  .. ..- attr(*, ".Environment")=&lt;environment: R_EmptyEnv&gt; 
 - attr(*, "labels")=List of 2
  ..$ x: chr "Ambient carbon dioxide concentration"
  ..$ y: chr "CO2 uptake rate"
 - attr(*, "units")=List of 2
  ..$ x: chr "(uL/L)"
  ..$ y: chr "(umol/m^2 s)"</code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1"><span class="fu" style="color: #4758AB;">names</span>(CO2)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[1] "Plant"     "Type"      "Treatment" "conc"      "uptake"   </code></pre>
</div>
</div>
<p>R console에 <code>?CO2</code>를 입력하면 다음과 같은 설명이 나온다.</p>
<p><em>The CO2 data frame has 84 rows and 5 columns of data from an experiment on the cold tolerance of the grass species Echinochloa crus-galli.The <img src="https://latex.codecogs.com/png.latex?CO_2"> uptake of six plants from Quebec and six plants from Mississippi was measured at several levels of ambient <img src="https://latex.codecogs.com/png.latex?CO_2"> concentration. Half the plants of each type were chilled overnight before the experiment was conducted.</em></p>
<p>즉, 식물이 <strong>저온의 환경에서 견디는 정도를 실험한 데이터</strong>로 퀘벡 지역의 6개의 나무와 미시시피 지역의 6개 나무의 이산화 탄소 흡수율을 7개의 서로 다른 이산화 탄소 농도 하에서 반복적으로 측정했다.</p>
<section id="goals" class="level3" data-number="2.1">
<h3 data-number="2.1" class="anchored" data-anchor-id="goals"><span class="header-section-number">2.1</span> Goals</h3>
<p>분석의 편의를 위해 저온 처리된 나무에 한정하여 분석</p>
<ol type="1">
<li>두 지역간의 CO2흡수율의 차이를 검정</li>
<li>7개의 서로 다른 이산화탄소 농도에 따라서 이산화 탄소의 흡수율 차이를 검정</li>
<li>나무의 출신 지역과 이산화 탄소 흡수율 간의 관계가 이산화탄소 농도에 따라 달라지는 지도 검정</li>
</ol>
</section>
<section id="data-description" class="level3" data-number="2.2">
<h3 data-number="2.2" class="anchored" data-anchor-id="data-description"><span class="header-section-number">2.2</span> Data Description</h3>
<ul>
<li>Plant: plant id</li>
<li>Type: 나무의 출신 지역, 2개의 범주, 집단간 요인</li>
<li>Treatment: 퀘벡 지역 나무와 미시시피 지역 나무dp 각 각 절반씩 실험 전에 저온 처리 했음, 저온 처리 여부가 treatment 변수에 저장됨</li>
<li>conc: co2농도, 7개의 범주, 집단 내 요인</li>
<li>uptake: 종속 변수, 이산화 탄소 흡수율</li>
</ul>
</section>
<section id="load-libraries-and-data" class="level3" data-number="2.3">
<h3 data-number="2.3" class="anchored" data-anchor-id="load-libraries-and-data"><span class="header-section-number">2.3</span> Load Libraries and Data</h3>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb5-1"><span class="fu" style="color: #4758AB;">library</span>(tidyverse)</span>
<span id="cb5-2"><span class="fu" style="color: #4758AB;">library</span>(faraway)</span>
<span id="cb5-3"><span class="fu" style="color: #4758AB;">library</span>(markdown)</span>
<span id="cb5-4"><span class="fu" style="color: #4758AB;">library</span>(effects)</span>
<span id="cb5-5"><span class="fu" style="color: #4758AB;">library</span>(HH)</span>
<span id="cb5-6"><span class="fu" style="color: #4758AB;">library</span>(psych)</span></code></pre></div>
</details>
</div>
</section>
<section id="eda" class="level3" data-number="2.4">
<h3 data-number="2.4" class="anchored" data-anchor-id="eda"><span class="header-section-number">2.4</span> EDA</h3>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">data<span class="ot" style="color: #003B4F;">=</span>CO2<span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;">filter</span>(Treatment<span class="sc" style="color: #5E5E5E;">==</span><span class="st" style="color: #20794D;">'chilled'</span>)<span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;">mutate</span>(<span class="at" style="color: #657422;">conc=</span><span class="fu" style="color: #4758AB;">factor</span>(conc),</span>
<span id="cb6-4"><span class="at" style="color: #657422;">type=</span><span class="fu" style="color: #4758AB;">factor</span>(conc))</span></code></pre></div>
</details>
</div>
</section>
<section id="descriptive-statistics" class="level3" data-number="2.5">
<h3 data-number="2.5" class="anchored" data-anchor-id="descriptive-statistics"><span class="header-section-number">2.5</span> Descriptive Statistics</h3>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb7-1">data<span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-2"><span class="fu" style="color: #4758AB;">group_by</span>(Type)<span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb7-3"><span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count=</span><span class="fu" style="color: #4758AB;">n</span>(),</span>
<span id="cb7-4"><span class="at" style="color: #657422;">mean_uptake=</span><span class="fu" style="color: #4758AB;">mean</span>(uptake),</span>
<span id="cb7-5"><span class="at" style="color: #657422;">sd_uptake=</span><span class="fu" style="color: #4758AB;">sd</span>(uptake)</span>
<span id="cb7-6">)<span class="sc" style="color: #5E5E5E;">%&gt;%</span>knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">kable</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<thead>
<tr class="header">
<th style="text-align: left;">Type</th>
<th style="text-align: right;">count</th>
<th style="text-align: right;">mean_uptake</th>
<th style="text-align: right;">sd_uptake</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Quebec</td>
<td style="text-align: right;">21</td>
<td style="text-align: right;">31.75238</td>
<td style="text-align: right;">9.644823</td>
</tr>
<tr class="even">
<td style="text-align: left;">Mississippi</td>
<td style="text-align: right;">21</td>
<td style="text-align: right;">15.81429</td>
<td style="text-align: right;">4.058976</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>두 지역의 분산과 평균 흡수율이 차이가 남</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">data<span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-2"><span class="fu" style="color: #4758AB;">group_by</span>(conc)<span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb8-3"><span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count=</span><span class="fu" style="color: #4758AB;">n</span>(),</span>
<span id="cb8-4"><span class="at" style="color: #657422;">mean_uptake=</span><span class="fu" style="color: #4758AB;">mean</span>(uptake),</span>
<span id="cb8-5"><span class="at" style="color: #657422;">sd_uptake=</span><span class="fu" style="color: #4758AB;">sd</span>(uptake)</span>
<span id="cb8-6">)<span class="sc" style="color: #5E5E5E;">%&gt;%</span>knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">kable</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<thead>
<tr class="header">
<th style="text-align: left;">conc</th>
<th style="text-align: right;">count</th>
<th style="text-align: right;">mean_uptake</th>
<th style="text-align: right;">sd_uptake</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">95</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">11.23333</td>
<td style="text-align: right;">2.860536</td>
</tr>
<tr class="even">
<td style="text-align: left;">175</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">19.45000</td>
<td style="text-align: right;">5.886510</td>
</tr>
<tr class="odd">
<td style="text-align: left;">250</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">25.28333</td>
<td style="text-align: right;">10.569090</td>
</tr>
<tr class="even">
<td style="text-align: left;">350</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">26.20000</td>
<td style="text-align: right;">10.831251</td>
</tr>
<tr class="odd">
<td style="text-align: left;">500</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">26.65000</td>
<td style="text-align: right;">11.445479</td>
</tr>
<tr class="even">
<td style="text-align: left;">675</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">27.88333</td>
<td style="text-align: right;">10.958361</td>
</tr>
<tr class="odd">
<td style="text-align: left;">1000</td>
<td style="text-align: right;">6</td>
<td style="text-align: right;">29.78333</td>
<td style="text-align: right;">12.410547</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>농도에 따라서 평균 흡수율과 분산이 약간 차이가 나는 것 같음. 다만, 고농도가 될수록 변화량이 줄어드는 것으로 보임</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb9-1">data<span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;">group_by</span>(Type,conc)<span class="sc" style="color: #5E5E5E;">%&gt;%</span></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;">summarise</span>(<span class="at" style="color: #657422;">count=</span><span class="fu" style="color: #4758AB;">n</span>(),</span>
<span id="cb9-4"><span class="at" style="color: #657422;">mean_uptake=</span><span class="fu" style="color: #4758AB;">mean</span>(uptake),</span>
<span id="cb9-5"><span class="at" style="color: #657422;">sd_uptake=</span><span class="fu" style="color: #4758AB;">sd</span>(uptake)</span>
<span id="cb9-6">)<span class="sc" style="color: #5E5E5E;">%&gt;%</span>knitr<span class="sc" style="color: #5E5E5E;">::</span><span class="fu" style="color: #4758AB;">kable</span>()</span></code></pre></div>
</details>
<div class="cell-output-display">
<table class="table table-sm table-striped">
<thead>
<tr class="header">
<th style="text-align: left;">Type</th>
<th style="text-align: left;">conc</th>
<th style="text-align: right;">count</th>
<th style="text-align: right;">mean_uptake</th>
<th style="text-align: right;">sd_uptake</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Quebec</td>
<td style="text-align: left;">95</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">12.86667</td>
<td style="text-align: right;">3.121431</td>
</tr>
<tr class="even">
<td style="text-align: left;">Quebec</td>
<td style="text-align: left;">175</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">24.13333</td>
<td style="text-align: right;">3.150132</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Quebec</td>
<td style="text-align: left;">250</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">34.46667</td>
<td style="text-align: right;">3.927255</td>
</tr>
<tr class="even">
<td style="text-align: left;">Quebec</td>
<td style="text-align: left;">350</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">35.80000</td>
<td style="text-align: right;">2.615339</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Quebec</td>
<td style="text-align: left;">500</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">36.66667</td>
<td style="text-align: right;">3.611556</td>
</tr>
<tr class="even">
<td style="text-align: left;">Quebec</td>
<td style="text-align: left;">675</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">37.50000</td>
<td style="text-align: right;">2.100000</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Quebec</td>
<td style="text-align: left;">1000</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">40.83333</td>
<td style="text-align: right;">1.913984</td>
</tr>
<tr class="even">
<td style="text-align: left;">Mississippi</td>
<td style="text-align: left;">95</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">9.60000</td>
<td style="text-align: right;">1.646208</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Mississippi</td>
<td style="text-align: left;">175</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">14.76667</td>
<td style="text-align: right;">3.302020</td>
</tr>
<tr class="even">
<td style="text-align: left;">Mississippi</td>
<td style="text-align: left;">250</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">16.10000</td>
<td style="text-align: right;">3.292416</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Mississippi</td>
<td style="text-align: left;">350</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">16.60000</td>
<td style="text-align: right;">3.157531</td>
</tr>
<tr class="even">
<td style="text-align: left;">Mississippi</td>
<td style="text-align: left;">500</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">16.63333</td>
<td style="text-align: right;">3.667879</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Mississippi</td>
<td style="text-align: left;">675</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">18.26667</td>
<td style="text-align: right;">4.285246</td>
</tr>
<tr class="even">
<td style="text-align: left;">Mississippi</td>
<td style="text-align: left;">1000</td>
<td style="text-align: right;">3</td>
<td style="text-align: right;">18.73333</td>
<td style="text-align: right;">3.883727</td>
</tr>
</tbody>
</table>
</div>
</div>
<p>농도가 증가함에 따라 지역간 평균 흡수율의 차이가 커지는 것을 관찰할 수 있음</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1"><span class="fu" style="color: #4758AB;">boxplot</span>(uptake<span class="sc" style="color: #5E5E5E;">~</span>Type<span class="sc" style="color: #5E5E5E;">*</span>conc,<span class="at" style="color: #657422;">data=</span>data,<span class="at" style="color: #657422;">col=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"darkblue"</span>,<span class="st" style="color: #20794D;">"darkred"</span>),</span>
<span id="cb10-2">        <span class="at" style="color: #657422;">las=</span><span class="dv" style="color: #AD0000;">2</span>,<span class="at" style="color: #657422;">cex.axis=</span><span class="fl" style="color: #AD0000;">0.7</span>,<span class="at" style="color: #657422;">xlab=</span><span class="st" style="color: #20794D;">""</span>,<span class="at" style="color: #657422;">ylab=</span><span class="st" style="color: #20794D;">"Carbon Dioxide Uptake Rate"</span>,</span>
<span id="cb10-3">        <span class="at" style="color: #657422;">main=</span><span class="st" style="color: #20794D;">"Effects of Plant Ype and CO2 on Carbon Dioxide Uptake"</span>)</span>
<span id="cb10-4"><span class="fu" style="color: #4758AB;">legend</span>(<span class="st" style="color: #20794D;">"topleft"</span>,<span class="at" style="color: #657422;">inset=</span><span class="fl" style="color: #AD0000;">0.025</span>, <span class="at" style="color: #657422;">legend=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"Quebec"</span>,<span class="st" style="color: #20794D;">"Mississippi"</span>),</span>
<span id="cb10-5">       <span class="at" style="color: #657422;">fill=</span><span class="fu" style="color: #4758AB;">c</span>(<span class="st" style="color: #20794D;">"darkblue"</span>,<span class="st" style="color: #20794D;">"darkred"</span>))</span></code></pre></div>
</details>
<div class="cell-output-display">
<p><img src="kmink3225.netlify.app/docs/blog/posts/statistics/2023-01-27_rmANOVA/index_files/figure-html/unnamed-chunk-7-1.png" class="img-fluid" width="672"></p>
</div>
</div>
</section>
<section id="one-wway-anova" class="level3" data-number="2.6">
<h3 data-number="2.6" class="anchored" data-anchor-id="one-wway-anova"><span class="header-section-number">2.6</span> One-Wway ANOVA</h3>
<p>반복 측정 일원분산분석: y~W+Error(subject) where W= a within grouping variable, subject= a sample identifier</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb11-1"><span class="fu" style="color: #4758AB;">aov</span>(uptake<span class="sc" style="color: #5E5E5E;">~</span>Type<span class="sc" style="color: #5E5E5E;">+</span><span class="fu" style="color: #4758AB;">Error</span>(Plant),<span class="at" style="color: #657422;">data=</span>data)<span class="sc" style="color: #5E5E5E;">%&gt;%</span><span class="fu" style="color: #4758AB;">summary</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>
Error: Plant
          Df Sum Sq Mean Sq F value  Pr(&gt;F)   
Type       1 2667.2  2667.2   60.41 0.00148 **
Residuals  4  176.6    44.1                   
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Error: Within
          Df Sum Sq Mean Sq F value Pr(&gt;F)
Residuals 36   2013   55.93               </code></pre>
</div>
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb13-1"><span class="fu" style="color: #4758AB;">aov</span>(uptake<span class="sc" style="color: #5E5E5E;">~</span>conc<span class="sc" style="color: #5E5E5E;">+</span><span class="fu" style="color: #4758AB;">Error</span>(Plant),<span class="at" style="color: #657422;">data=</span>data)<span class="sc" style="color: #5E5E5E;">%&gt;%</span><span class="fu" style="color: #4758AB;">summary</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>
Error: Plant
          Df Sum Sq Mean Sq F value Pr(&gt;F)
Residuals  5   2844   568.8               

Error: Within
          Df Sum Sq Mean Sq F value   Pr(&gt;F)    
conc       6   1472  245.40   13.61 2.09e-07 ***
Residuals 30    541   18.03                     
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>지역간 농도간 평균 흡수율이 차이가 5% 유의수준에서 유의하다.</p>
</section>
<section id="two-wway-anova" class="level3" data-number="2.7">
<h3 data-number="2.7" class="anchored" data-anchor-id="two-wway-anova"><span class="header-section-number">2.7</span> Two-Wway ANOVA</h3>
<p>반복측정 이원분산 분석: y~B*W+Error(subject/W) where W= within grouping variable, B =Between Group Variable, and subject= a sample identifier</p>
<div class="cell">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb15-1"><span class="fu" style="color: #4758AB;">aov</span>(uptake<span class="sc" style="color: #5E5E5E;">~</span>Type<span class="sc" style="color: #5E5E5E;">*</span>conc<span class="sc" style="color: #5E5E5E;">+</span><span class="fu" style="color: #4758AB;">Error</span>(Plant<span class="sc" style="color: #5E5E5E;">/</span>conc),<span class="at" style="color: #657422;">data=</span>data)<span class="sc" style="color: #5E5E5E;">%&gt;%</span><span class="fu" style="color: #4758AB;">summary</span>()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>
Error: Plant
          Df Sum Sq Mean Sq F value  Pr(&gt;F)   
Type       1 2667.2  2667.2   60.41 0.00148 **
Residuals  4  176.6    44.1                   
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1

Error: Plant:conc
          Df Sum Sq Mean Sq F value   Pr(&gt;F)    
conc       6 1472.4  245.40   52.52 1.26e-12 ***
Type:conc  6  428.8   71.47   15.30 3.75e-07 ***
Residuals 24  112.1    4.67                     
---
Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1</code></pre>
</div>
</div>
<p>지역간 농도간 집단간에서 흡수율 차이가 유의한것으로 나타나고 둘의 상호작용 또한 5% 유의수준에서 유의하다.</p>
</section>
</section>
<section id="blog-guide-map-link" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="blog-guide-map-link"><span class="header-section-number">3</span> Blog Guide Map Link</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/statistics/guide_map/index.html">Statistics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Blog</a></li>
<li><a href="../../../../../docs/blog/posts/DL/guide_map/index.html">Deep Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/ML/guide_map/index.html">Machine Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Mathematics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Patent/guide_map/index.html">Patent Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Validation/guide_map/index.html">Validation Blog</a></li>
</ul>


</section>

 ]]></description>
  <category>Statistics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/statistics/2023-01-27_rmANOVA/index.html</guid>
  <pubDate>Thu, 26 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Blog Guide Map, Validation</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Validation/guide_map/index.html</link>
  <description><![CDATA[ 



<section id="sgs" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="sgs"><span class="header-section-number">1</span> SGS</h2>
<ul>
<li>0000-00-00, EN62304</li>
</ul>
</section>
<section id="fda" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="fda"><span class="header-section-number">2</span> FDA</h2>
<ul>
<li>2023-01-27, <a href="../../../../../docs/blog/posts/Validation/2022-12-10_FDA_sw_general_guidance/index.html">General Guidance of SW Validation</a></li>
<li>2023-01-27, <a href="../../../../../docs/blog/posts/Validation/2023-01-27_FDA_sw_general_guidance_presentation/index.html">General Guidance of SW Validation, Diagram Summary</a></li>
</ul>
</section>
<section id="dhf" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="dhf"><span class="header-section-number">3</span> DHF</h2>
</section>
<section id="public-health" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="public-health"><span class="header-section-number">4</span> Public Health</h2>
</section>
<section id="wet-lab" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="wet-lab"><span class="header-section-number">5</span> Wet Lab</h2>
<ul>
<li>0000-00-00, PCR (Polymerase Chain Reaction) Experiment</li>
</ul>


</section>

 ]]></description>
  <category>Validation</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Validation/guide_map/index.html</guid>
  <pubDate>Thu, 26 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Structure (7) Deque</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-19_deque/index.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="덱deque" class="level2">
<h2 class="anchored" data-anchor-id="덱deque">덱(Deque)</h2>
<ul>
<li>덱은 스택(stack)과 큐(queue)의 기능을 모두 가지고 있다.</li>
<li>그래서, 스택과 큐대신 덱을 사용해도 괜찮음</li>
<li>다만, 포인터 변수가 더 많이 필요하기 때문에, 메모리는 상대적으로 더 많이 필요하다.</li>
<li>Python에서는 큐(queue)의 기능이 필요할 때 간단히 덱(deque)을 사용한다.</li>
<li>데이터의 삭제와 삽입 모두에서 <img src="https://latex.codecogs.com/png.latex?O(1)"> 의 시간 복잡도가 소요된다.</li>
<li>덱에 여러 개의 데이터를 삽입하고 삭제하는 예시를 확인해 보자.</li>
</ul>
<p>[12개의 전체 연산]</p>
<ul>
<li>좌측으로부터 삽입 연산이 가능</li>
<li>우측으로부터 삽입 연산이 가능</li>
<li>삭제 연산시 우측/좌측 선택적 삭제가 가능</li>
</ul>
</section>
<section id="덱deque의-시간-복잡도" class="level2">
<h2 class="anchored" data-anchor-id="덱deque의-시간-복잡도">덱(Deque)의 시간 복잡도</h2>
<p>• 데이터의 삭제와 삽입 모두에서 <img src="https://latex.codecogs.com/png.latex?O(1)"> 의 시간 복잡도가 소요된다.</p>
<div id="tbl-letters" class="anchored">
<table class="table">
<caption>Table&nbsp;1: a list of the deque functions in Python</caption>
<colgroup>
<col style="width: 7%">
<col style="width: 16%">
<col style="width: 15%">
<col style="width: 59%">
</colgroup>
<thead>
<tr class="header">
<th>Number</th>
<th>Methods</th>
<th>Time Complexity</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>append left</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td>덱의 가장 왼쪽에 새 데이터를 삽입</td>
</tr>
<tr class="even">
<td>2</td>
<td>pop left</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td>덱의 가장 왼쪽에서 데이터를 추출</td>
</tr>
<tr class="odd">
<td>3</td>
<td>append right</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td>덱의 가장 오른쪽에 새 데이터를 삽입</td>
</tr>
<tr class="even">
<td>4</td>
<td>pop right</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td>덱의 가장 오른쪽에서 데이터를 추출</td>
</tr>
</tbody>
</table>
</div>
<p>See Table&nbsp;1.</p>
</section>
<section id="파이썬의-덱deque-라이브러리" class="level2">
<h2 class="anchored" data-anchor-id="파이썬의-덱deque-라이브러리">파이썬의 덱(Deque) 라이브러리</h2>
<ul>
<li>Python에서는 덱(deque) 라이브러리를 사용할 수 있다.</li>
<li>아래의 모든 메서드는 최악의 경우 시간 복잡도 O 1 을 보장한다.</li>
<li>우측 삽입: append()</li>
<li>좌측 삽입: appendleft()</li>
<li>우측 추출: pop()</li>
<li>좌측 추출: popleft()</li>
</ul>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> collections <span class="im" style="color: #00769E;">import</span> deque</span>
<span id="cb1-2"></span>
<span id="cb1-3"></span>
<span id="cb1-4">d <span class="op" style="color: #5E5E5E;">=</span> deque()</span>
<span id="cb1-5">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>] </span>
<span id="cb1-6"><span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> arr:</span>
<span id="cb1-7">    d.append(x) <span class="co" style="color: #5E5E5E;"># 오른쪽 삽입</span></span>
<span id="cb1-8">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb1-9"><span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> arr:</span>
<span id="cb1-10">    d.appendleft(x) <span class="co" style="color: #5E5E5E;"># 좌측 삽입</span></span>
<span id="cb1-11"><span class="bu" style="color: null;">print</span>(d)</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="cf" style="color: #003B4F;">while</span> d:</span>
<span id="cb1-14">    <span class="bu" style="color: null;">print</span>(d.popleft()) <span class="co" style="color: #5E5E5E;"># 좌측 삭제</span></span>
<span id="cb1-15"></span>
<span id="cb1-16">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>]</span>
<span id="cb1-17"><span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> arr:</span>
<span id="cb1-18">    d.appendleft(x)</span>
<span id="cb1-19"><span class="bu" style="color: null;">print</span>(d)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="cf" style="color: #003B4F;">while</span> <span class="va" style="color: #111111;">True</span>:</span>
<span id="cb1-22">    <span class="bu" style="color: null;">print</span>(d.pop())</span>
<span id="cb1-23">    <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> d:</span>
<span id="cb1-24">        <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb1-25">    <span class="bu" style="color: null;">print</span>(d.popleft())</span>
<span id="cb1-26">    <span class="cf" style="color: #003B4F;">if</span> <span class="kw" style="color: #003B4F;">not</span> d:</span>
<span id="cb1-27">        <span class="cf" style="color: #003B4F;">break</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>deque([1, 2, 3, 4, 5, 6, 7, 8])
1
2
3
4
5
6
7
8
deque([8, 7, 6, 5, 4, 3, 2, 1])
1
8
2
7
3
6
4
5</code></pre>
</div>
</div>
<section id="python에서-deque을-사용하는-경우" class="level3">
<h3 class="anchored" data-anchor-id="python에서-deque을-사용하는-경우">Python에서 Deque을 사용하는 경우</h3>
<ul>
<li>기본적인 Python의 리스트 자료형은 큐(queue)의 기능을 제공하지 않는다.</li>
<li>가능하다면 Python에서 제공하는 덱(deque) 라이브러리를 사용한다.</li>
<li>큐(queue)의 기능이 필요할 때는 덱 라이브러리를 사용하는 것을 추천한다.</li>
<li>삽입과 삭제에 대하여 모두 시간 복잡도 <img src="https://latex.codecogs.com/png.latex?O(1)"> 이 요구된다.</li>
</ul>
</section>
</section>
<section id="연결-리스트로-덱-구현하기" class="level2">
<h2 class="anchored" data-anchor-id="연결-리스트로-덱-구현하기">연결 리스트로 덱 구현하기</h2>
<ul>
<li>덱(deque)을 연결 리스트로 구현하면, 삽입과 삭제에 있어서 O 1 을 보장할 수 있다.</li>
<li>연결 리스트로 구현할 때는 앞(front)과 뒤(rear) 두 개의 포인터를 가진다.</li>
<li>앞(front): 가장 좌측에 있는 데이터를 가리키는 포인터</li>
<li>뒤(rear): 가장 우측에 있는 데이터를 가리키는 포인터</li>
<li>삽입과 삭제의 구현 방법은 스택 및 큐와 유사하다.</li>
<li>앞(front)과 뒤(rear)에 대하여 대칭적으로 로직이 구현될 수 있다.</li>
</ul>
<section id="좌측-삽입-연산" class="level3">
<h3 class="anchored" data-anchor-id="좌측-삽입-연산">좌측 삽입 연산</h3>
<ul>
<li>좌측 삽입할 때는 앞(front) 위치에 데이터를 넣는다.</li>
<li>새로운 데이터가 삽입되었을 때 front data와 연결이 먼저 된 후 front data의 이전 노드가 새로운 데이터가 되도록 설정</li>
</ul>
</section>
<section id="좌측-삭제-연산" class="level3">
<h3 class="anchored" data-anchor-id="좌측-삭제-연산">좌측 삭제 연산</h3>
<ul>
<li>삭제할 때는 앞(front) 위치에서 데이터를 꺼낸다. 즉, 그냥 front를 그 다음 데이터로 설정하면 됨</li>
</ul>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">class</span> Node:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, data):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;">self</span>.data <span class="op" style="color: #5E5E5E;">=</span> data</span>
<span id="cb3-4">        <span class="va" style="color: #111111;">self</span>.prev <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-5">        <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-6"></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;">class</span> Deque:</span>
<span id="cb3-9">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-10">        <span class="va" style="color: #111111;">self</span>.front <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-11">        <span class="va" style="color: #111111;">self</span>.rear <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-12">        <span class="va" style="color: #111111;">self</span>.size <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb3-13"></span>
<span id="cb3-14">    <span class="kw" style="color: #003B4F;">def</span> appendleft(<span class="va" style="color: #111111;">self</span>, data):</span>
<span id="cb3-15">        node <span class="op" style="color: #5E5E5E;">=</span> Node(data)</span>
<span id="cb3-16">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.front <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb3-17">            <span class="va" style="color: #111111;">self</span>.front <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb3-18">            <span class="va" style="color: #111111;">self</span>.rear <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb3-19">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb3-20">            node.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.front</span>
<span id="cb3-21">            <span class="va" style="color: #111111;">self</span>.front.prev <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb3-22">            <span class="va" style="color: #111111;">self</span>.front <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb3-23">        <span class="va" style="color: #111111;">self</span>.size <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-24"></span>
<span id="cb3-25">    <span class="kw" style="color: #003B4F;">def</span> append(<span class="va" style="color: #111111;">self</span>, data):</span>
<span id="cb3-26">        node <span class="op" style="color: #5E5E5E;">=</span> Node(data)</span>
<span id="cb3-27">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.rear <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb3-28">            <span class="va" style="color: #111111;">self</span>.front <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb3-29">            <span class="va" style="color: #111111;">self</span>.rear <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb3-30">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb3-31">            node.prev <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.rear</span>
<span id="cb3-32">            <span class="va" style="color: #111111;">self</span>.rear.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb3-33">            <span class="va" style="color: #111111;">self</span>.rear <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb3-34">        <span class="va" style="color: #111111;">self</span>.size <span class="op" style="color: #5E5E5E;">+=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-35"></span>
<span id="cb3-36">    <span class="kw" style="color: #003B4F;">def</span> popleft(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-37">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.size <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb3-38">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-39">        <span class="co" style="color: #5E5E5E;"># 앞에서 노드 꺼내기</span></span>
<span id="cb3-40">        data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.front.data</span>
<span id="cb3-41">        <span class="va" style="color: #111111;">self</span>.front <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.front.<span class="bu" style="color: null;">next</span></span>
<span id="cb3-42">        <span class="co" style="color: #5E5E5E;"># 삭제로 인해 노드가 하나도 없는 경우</span></span>
<span id="cb3-43">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.front <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb3-44">            <span class="va" style="color: #111111;">self</span>.rear <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-45">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb3-46">            <span class="va" style="color: #111111;">self</span>.front.prev <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-47">        <span class="va" style="color: #111111;">self</span>.size <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-48">        <span class="cf" style="color: #003B4F;">return</span> data</span>
<span id="cb3-49"></span>
<span id="cb3-50">    <span class="kw" style="color: #003B4F;">def</span> pop(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-51">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.size <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb3-52">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-53">        <span class="co" style="color: #5E5E5E;"># 뒤에서 노드 꺼내기</span></span>
<span id="cb3-54">        data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.rear.data</span>
<span id="cb3-55">        <span class="va" style="color: #111111;">self</span>.rear <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.rear.prev</span>
<span id="cb3-56">        <span class="co" style="color: #5E5E5E;"># 삭제로 인해 노드가 하나도 없는 경우</span></span>
<span id="cb3-57">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.rear <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb3-58">            <span class="va" style="color: #111111;">self</span>.front <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-59">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb3-60">            <span class="va" style="color: #111111;">self</span>.rear.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-61">        <span class="va" style="color: #111111;">self</span>.size <span class="op" style="color: #5E5E5E;">-=</span> <span class="dv" style="color: #AD0000;">1</span></span>
<span id="cb3-62">        <span class="cf" style="color: #003B4F;">return</span> data</span>
<span id="cb3-63"></span>
<span id="cb3-64">    <span class="kw" style="color: #003B4F;">def</span> front(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-65">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.size <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb3-66">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-67">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.front.data</span>
<span id="cb3-68"></span>
<span id="cb3-69">    <span class="kw" style="color: #003B4F;">def</span> rear(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-70">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.size <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb3-71">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-72">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.rear.data</span>
<span id="cb3-73"></span>
<span id="cb3-74">    <span class="co" style="color: #5E5E5E;"># 앞에서부터 원소 출력</span></span>
<span id="cb3-75">    <span class="kw" style="color: #003B4F;">def</span> show(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-76">        cur <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.front</span>
<span id="cb3-77">        <span class="cf" style="color: #003B4F;">while</span> cur:</span>
<span id="cb3-78">            <span class="bu" style="color: null;">print</span>(cur.data, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb3-79">            cur <span class="op" style="color: #5E5E5E;">=</span> cur.<span class="bu" style="color: null;">next</span></span>
<span id="cb3-80"></span>
<span id="cb3-81"></span>
<span id="cb3-82">d <span class="op" style="color: #5E5E5E;">=</span> Deque()</span>
<span id="cb3-83">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>]</span>
<span id="cb3-84"><span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> arr:</span>
<span id="cb3-85">    d.append(x)</span>
<span id="cb3-86">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb3-87"><span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> arr:</span>
<span id="cb3-88">    d.appendleft(x)</span>
<span id="cb3-89">d.show()</span>
<span id="cb3-90"></span>
<span id="cb3-91"><span class="bu" style="color: null;">print</span>()</span>
<span id="cb3-92"><span class="cf" style="color: #003B4F;">while</span> d.size <span class="op" style="color: #5E5E5E;">!=</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb3-93">    <span class="bu" style="color: null;">print</span>(d.popleft())</span>
<span id="cb3-94"></span>
<span id="cb3-95">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>]</span>
<span id="cb3-96"><span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> arr:</span>
<span id="cb3-97">    d.appendleft(x)</span>
<span id="cb3-98">d.show()</span>
<span id="cb3-99"></span>
<span id="cb3-100"><span class="bu" style="color: null;">print</span>()</span>
<span id="cb3-101"><span class="cf" style="color: #003B4F;">while</span> <span class="va" style="color: #111111;">True</span>:</span>
<span id="cb3-102">    <span class="bu" style="color: null;">print</span>(d.pop())</span>
<span id="cb3-103">    <span class="cf" style="color: #003B4F;">if</span> d.size <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb3-104">        <span class="cf" style="color: #003B4F;">break</span></span>
<span id="cb3-105">    <span class="bu" style="color: null;">print</span>(d.popleft())</span>
<span id="cb3-106">    <span class="cf" style="color: #003B4F;">if</span> d.size <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb3-107">        <span class="cf" style="color: #003B4F;">break</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>1 2 3 4 5 6 7 8 
1
2
3
4
5
6
7
8
8 7 6 5 4 3 2 1 
1
8
2
7
3
6
4
5</code></pre>
</div>
</div>
</section>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>



</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-19_deque/index.html</guid>
  <pubDate>Wed, 25 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Blog Guide Map, Engineering</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/guide_map/index.html</link>
  <description><![CDATA[ 



<section id="it-terminology" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="it-terminology"><span class="header-section-number">1</span> IT Terminology</h2>
<ul>
<li>0000-00-00, PoC (Proof of Concept)</li>
</ul>
</section>
<section id="data-structure" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="data-structure"><span class="header-section-number">2</span> Data Structure</h2>
<ul>
<li>2023-01-17, <a href="../2023-01-17_data_structure_overview/">Overview</a></li>
<li>2023-01-18, <a href="../2023-01-18_array/">Array</a></li>
<li>2023-01-18, <a href="../2023-01-18_linked_list/">Linked List</a></li>
<li>2023-01-18, <a href="../2023-01-18_python_list/">Python List</a></li>
<li>2023-01-19, <a href="../2023-01-19_stack/">Stack</a></li>
<li>2023-01-19, <a href="../2023-01-19_queue/">Queue</a></li>
<li>2023-01-26, <a href="../2023-01-19_deque/">Deque</a></li>
<li>2023-01-26, <a href="../2023-01-20_binary_search_tree/">Binary Search Tree</a></li>
<li>2023-01-20, <a href="../2023-01-20_priority_queue/">Priority Queue</a></li>
<li>2023-01-20, <a href="../2023-01-20_graph/">Graph</a></li>
</ul>
</section>
<section id="conda" class="level2" data-number="3">
<h2 data-number="3" class="anchored" data-anchor-id="conda"><span class="header-section-number">3</span> Conda</h2>
</section>
<section id="docker" class="level2" data-number="4">
<h2 data-number="4" class="anchored" data-anchor-id="docker"><span class="header-section-number">4</span> Docker</h2>
<ul>
<li>2023-01-30, Docker Install</li>
<li>2023-01-31, Docker Compose</li>
<li>2023-02-01, Docker Container</li>
</ul>
</section>
<section id="dynamic-documentation" class="level2" data-number="5">
<h2 data-number="5" class="anchored" data-anchor-id="dynamic-documentation"><span class="header-section-number">5</span> Dynamic Documentation</h2>
<ul>
<li>2023-01-19, <a href="https://quarto.org/docs/get-started/">Quarto</a></li>
<li>2023-01-19, <a href="https://github.com/yihui/xaringan">xaringan[R]</a></li>
<li>2023-01-19, <a href="https://bookdown.org/yihui/bookdown/get-started.html">Bookdown[R]</a></li>
<li>2023-01-19, <a href="https://decile-team-distil.readthedocs.io/en/latest/index.html">DISTL</a></li>
<li>2023-01-26, <a href="https://www.sphinx-doc.org/en/master/">Sphinx[Python]</a></li>
</ul>
</section>
<section id="aws-cloud" class="level2" data-number="6">
<h2 data-number="6" class="anchored" data-anchor-id="aws-cloud"><span class="header-section-number">6</span> AWS Cloud</h2>
</section>
<section id="azure-cloud" class="level2" data-number="7">
<h2 data-number="7" class="anchored" data-anchor-id="azure-cloud"><span class="header-section-number">7</span> Azure Cloud</h2>
</section>
<section id="data-modeling" class="level2" data-number="8">
<h2 data-number="8" class="anchored" data-anchor-id="data-modeling"><span class="header-section-number">8</span> Data Modeling</h2>
</section>
<section id="apache-airflow" class="level2" data-number="9">
<h2 data-number="9" class="anchored" data-anchor-id="apache-airflow"><span class="header-section-number">9</span> Apache Airflow</h2>
</section>
<section id="apache-spark" class="level2" data-number="10">
<h2 data-number="10" class="anchored" data-anchor-id="apache-spark"><span class="header-section-number">10</span> Apache Spark</h2>
</section>
<section id="front-end" class="level2" data-number="11">
<h2 data-number="11" class="anchored" data-anchor-id="front-end"><span class="header-section-number">11</span> Front End</h2>
</section>
<section id="back-end" class="level2" data-number="12">
<h2 data-number="12" class="anchored" data-anchor-id="back-end"><span class="header-section-number">12</span> Back End</h2>


</section>

 ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/guide_map/index.html</guid>
  <pubDate>Wed, 25 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Structure (10) Graph</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-20_graph/index.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="그래프graph" class="level2">
<h2 class="anchored" data-anchor-id="그래프graph">그래프(Graph)</h2>
<p>• 그래프(graph)란 사물을 정점(vertex)과 간선(edge)으로 나타내기 위한 도구다.</p>
<p>• 그래프는 두 가지 방식으로 구현할 수 있다.</p>
<ol type="1">
<li><p>인접 행렬(adjacency matrix): 2차원 배열을 사용하는 방식</p></li>
<li><p>인접 리스트(adjacency list): 연결 리스트를 이용하는 방식</p></li>
</ol>
</section>
<section id="인접-행렬adjacency-matrix" class="level2">
<h2 class="anchored" data-anchor-id="인접-행렬adjacency-matrix">인접 행렬(Adjacency Matrix)</h2>
<p>• 인접 행렬(adjacency matrix)에서는 그래프를 2차원 배열로 표현한다.</p>
<section id="인접-행렬---무방향-무가중치-그래프" class="level3">
<h3 class="anchored" data-anchor-id="인접-행렬---무방향-무가중치-그래프">인접 행렬 - 무방향 무가중치 그래프</h3>
<p>• 모든 간선이 방향성을 가지지 않는 그래프를 무방향 그래프라고 한다.</p>
<p>• 모든 간선에 가중치가 없는 그래프를 무가중치 그래프라고 한다.</p>
<p>• 무방향 무가중치 그래프가 주어졌을 때 연결되어 있는 상황을 인접 행렬로 출력할 수 있다.</p>
</section>
<section id="인접-행렬---방향-가중치-그래프" class="level3">
<h3 class="anchored" data-anchor-id="인접-행렬---방향-가중치-그래프">인접 행렬 - 방향 가중치 그래프</h3>
<p>• 모든 간선이 방향을 가지는 그래프를 방향 그래프라고 한다.</p>
<p>• 모든 간선에 가중치가 있는 그래프를 가중치 그래프라고 한다.</p>
<p>• 방향 가중치 그래프가 주어졌을 때 연결되어 있는 상황을 인접 행렬로 출력할 수 있다.</p>
</section>
</section>
<section id="인접-리스트adjacency-list" class="level2">
<h2 class="anchored" data-anchor-id="인접-리스트adjacency-list">인접 리스트(Adjacency List)</h2>
<p>• 인접 리스트(adjacency list)에서는 그래프를 리스트로 표현한다.</p>
<section id="인접-리스트---무방향-무가중치-그래프" class="level3">
<h3 class="anchored" data-anchor-id="인접-리스트---무방향-무가중치-그래프">인접 리스트 - 무방향 무가중치 그래프</h3>
<p>• 모든 간선이 방향성을 가지지 않는 그래프를 무방향 그래프라고 한다.</p>
<p>• 모든 간선에 가중치가 없는 그래프를 무가중치 그래프라고 한다.</p>
<p>• 무방향 무가중치 그래프가 주어졌을 때 연결되어 있는 상황을 인접 리스트로 출력할 수 있다.</p>
</section>
<section id="인접-리스트---방향-가중치-그래프" class="level3">
<h3 class="anchored" data-anchor-id="인접-리스트---방향-가중치-그래프">인접 리스트 - 방향 가중치 그래프</h3>
<p>• 모든 간선이 방향을 가지는 그래프를 방향 그래프라고 한다.</p>
<p>• 모든 간선에 가중치가 있는 그래프를 가중치 그래프라고 한다.</p>
<p>• 방향 가중치 그래프가 주어졌을 때 연결되어 있는 상황을 인접 리스트로 출력할 수 있다.</p>
</section>
</section>
<section id="그래프의-시간-복잡도" class="level2">
<h2 class="anchored" data-anchor-id="그래프의-시간-복잡도">그래프의 시간 복잡도</h2>
<ol type="1">
<li>인접 행렬: 모든 정점들의 연결 여부를 저장해 O V</li>
</ol>
<p>2 의 공간을 요구한다.</p>
<p>• 공간 효율성이 떨어지지만, 두 노드의 연결 여부를 O 1 에 확인할 수 있다.</p>
<ol start="2" type="1">
<li>인접 리스트: 연결된 간선의 정보만을 저장하여 O V + E 의 공간을 요구한다.</li>
</ol>
<p>• 공간 효율성이 우수하지만, 두 노드의 연결 여부를 확인하기 위해 O V 의 시간이 필요하다.</p>
<div id="tbl-letters" class="anchored">
<table class="table">
<caption>Table&nbsp;1: a list of the stack functions in Python</caption>
<colgroup>
<col style="width: 11%">
<col style="width: 26%">
<col style="width: 22%">
<col style="width: 39%">
</colgroup>
<thead>
<tr class="header">
<th>Number</th>
<th>Category</th>
<th>필요한 메모리</th>
<th>연결 여부 확인</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>인접 행렬</td>
<td><img src="https://latex.codecogs.com/png.latex?O(V%5E2)"></td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
</tr>
<tr class="even">
<td>2</td>
<td>인접 리스트</td>
<td><img src="https://latex.codecogs.com/png.latex?O(V+E)"></td>
<td><img src="https://latex.codecogs.com/png.latex?O(V)"></td>
</tr>
</tbody>
</table>
</div>
<p>See Table&nbsp;1.</p>
</section>
<section id="인접-행렬-vs.-인접-리스트" class="level2">
<h2 class="anchored" data-anchor-id="인접-행렬-vs.-인접-리스트">인접 행렬 vs.&nbsp;인접 리스트</h2>
<p>• 최단 경로 알고리즘을 구현할 때, 어떤 자료구조가 유용할까?</p>
<p>• 각각 근처의 노드와 연결되어 있는 경우가 많으므로, 간선 개수가 적어 인접 리스트가 유리하다.</p>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>



</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-20_graph/index.html</guid>
  <pubDate>Thu, 19 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Structure (6) Queue</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-19_queue/index.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="queue" class="level2">
<h2 class="anchored" data-anchor-id="queue">Queue</h2>
<ul>
<li>큐(queue)는 먼저 삽입된 데이터가 먼저 추출되는 자료구조(data structure)다. (First-In First-Out)</li>
<li>딥러닝 모델에 들어가는 데이터 순서대로 들어가는데 먼저 들어간 데이터는 먼저 나오게 할때 사용되는 자료 구조이다.</li>
</ul>
</section>
<section id="연결-리스트로-큐-구현" class="level2">
<h2 class="anchored" data-anchor-id="연결-리스트로-큐-구현">연결 리스트로 큐 구현</h2>
<ul>
<li>큐를 연결 리스트로 구현하면, 삽입과 삭제에 있어서 <img src="https://latex.codecogs.com/png.latex?O(1)"> 을 보장할 수 있다.</li>
<li>연결 리스트로 구현할 때는 머리(head)와 꼬리(tail) 두 개의 포인터를 가진다.</li>
<li>머리(head): 남아있는 원소 중 가장 먼저 들어 온 데이터를 가리키는 포인터</li>
<li>꼬리(tail): 남아있는 원소 중 가장 마지막에 들어 온 데이터를 가리키는 포인터</li>
</ul>
<section id="삽입-연산" class="level3">
<h3 class="anchored" data-anchor-id="삽입-연산">삽입 연산</h3>
<ul>
<li>삽입할 때는 꼬리(tail) 위치에 데이터를 넣는다.</li>
<li>값으로 8을 갖는 새로운 데이터가 삽입되었을 때 예시)</li>
</ul>
</section>
<section id="삭제-연산" class="level3">
<h3 class="anchored" data-anchor-id="삭제-연산">삭제 연산</h3>
<ul>
<li>삭제할 때는 머리(head) 위치에서 데이터를 꺼낸다.</li>
<li>하나의 데이터를 삭제할 때의 예시)</li>
</ul>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">class</span> Node:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, data):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;">self</span>.data <span class="op" style="color: #5E5E5E;">=</span> data</span>
<span id="cb1-4">        <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">class</span> Queue:</span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-9">        <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-10">        <span class="va" style="color: #111111;">self</span>.tail <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-11"></span>
<span id="cb1-12">    <span class="kw" style="color: #003B4F;">def</span> enqueue(<span class="va" style="color: #111111;">self</span>, data):</span>
<span id="cb1-13">        node <span class="op" style="color: #5E5E5E;">=</span> Node(data)</span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb1-15">            <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb1-16">            <span class="va" style="color: #111111;">self</span>.tail <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb1-17">        <span class="co" style="color: #5E5E5E;"># 꼬리(tail) 위치에 새로운 노드 삽입</span></span>
<span id="cb1-18">        <span class="cf" style="color: #003B4F;">else</span>:</span>
<span id="cb1-19">            <span class="va" style="color: #111111;">self</span>.tail.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb1-20">            <span class="va" style="color: #111111;">self</span>.tail <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.tail.<span class="bu" style="color: null;">next</span></span>
<span id="cb1-21"></span>
<span id="cb1-22">    <span class="kw" style="color: #003B4F;">def</span> dequeue(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-23">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb1-24">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-25"></span>
<span id="cb1-26">        <span class="co" style="color: #5E5E5E;"># 머리(head) 위치에서 노드 꺼내기</span></span>
<span id="cb1-27">        data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head.data</span>
<span id="cb1-28">        <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head.<span class="bu" style="color: null;">next</span></span>
<span id="cb1-29"></span>
<span id="cb1-30">        <span class="cf" style="color: #003B4F;">return</span> data</span>
<span id="cb1-31"></span>
<span id="cb1-32">    <span class="kw" style="color: #003B4F;">def</span> show(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-33">        cur <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head</span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;">while</span> cur:</span>
<span id="cb1-35">            <span class="bu" style="color: null;">print</span>(cur.data, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb1-36">            cur <span class="op" style="color: #5E5E5E;">=</span> cur.<span class="bu" style="color: null;">next</span></span>
<span id="cb1-37"></span>
<span id="cb1-38"></span>
<span id="cb1-39">queue <span class="op" style="color: #5E5E5E;">=</span> Queue()</span>
<span id="cb1-40">data_list <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">7</span>]</span>
<span id="cb1-41"></span>
<span id="cb1-42"><span class="cf" style="color: #003B4F;">for</span> data <span class="kw" style="color: #003B4F;">in</span> data_list:</span>
<span id="cb1-43">    queue.enqueue(data)</span>
<span id="cb1-44"></span>
<span id="cb1-45"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">전체 노드 출력:"</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb1-46">queue.show()</span>
<span id="cb1-47"></span>
<span id="cb1-48"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">[원소 삭제]"</span>)</span>
<span id="cb1-49"><span class="bu" style="color: null;">print</span>(queue.dequeue())</span>
<span id="cb1-50"><span class="bu" style="color: null;">print</span>(queue.dequeue())</span>
<span id="cb1-51"><span class="bu" style="color: null;">print</span>(queue.dequeue())</span>
<span id="cb1-52"></span>
<span id="cb1-53"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"[원소 삽입]"</span>)</span>
<span id="cb1-54">queue.enqueue(<span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-55">queue.enqueue(<span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb1-56">queue.enqueue(<span class="dv" style="color: #AD0000;">3</span>)</span>
<span id="cb1-57"></span>
<span id="cb1-58"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"전체 노드 출력:"</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb1-59">queue.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>
전체 노드 출력: 3 5 9 8 5 6 1 7 
[원소 삭제]
3
5
9
[원소 삽입]
전체 노드 출력: 8 5 6 1 7 2 5 3 </code></pre>
</div>
</div>
</section>
<section id="큐-동작-속도-연결-리스트-vs.-리스트-자료형" class="level3">
<h3 class="anchored" data-anchor-id="큐-동작-속도-연결-리스트-vs.-리스트-자료형">큐 동작 속도: 연결 리스트 vs.&nbsp;리스트 자료형</h3>
<ul>
<li>다수의 데이터를 삽입 및 삭제할 때에 대하여, 수행 시간을 측정할 수 있다.</li>
<li>단순히 Python의 리스트 자료형을 이용할 때보다 수행 시간 관점에서 효율적이다.</li>
</ul>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;">import</span> time</span>
<span id="cb3-2"></span>
<span id="cb3-3">data_list <span class="op" style="color: #5E5E5E;">=</span> [i <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">100000</span>)]</span>
<span id="cb3-4"></span>
<span id="cb3-5">start_time <span class="op" style="color: #5E5E5E;">=</span> time.time()</span>
<span id="cb3-6"></span>
<span id="cb3-7">queue <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb3-8"><span class="cf" style="color: #003B4F;">for</span> data <span class="kw" style="color: #003B4F;">in</span> data_list:</span>
<span id="cb3-9">    queue.append(data)</span>
<span id="cb3-10"><span class="cf" style="color: #003B4F;">while</span> queue:</span>
<span id="cb3-11">    queue.pop(<span class="dv" style="color: #AD0000;">0</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Elapsed time: </span><span class="sc" style="color: #5E5E5E;">{</span>time<span class="sc" style="color: #5E5E5E;">.</span>time() <span class="op" style="color: #5E5E5E;">-</span> start_time<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> seconds."</span>)</span>
<span id="cb3-14"><span class="bu" style="color: null;">print</span>(queue)</span>
<span id="cb3-15"></span>
<span id="cb3-16">start_time <span class="op" style="color: #5E5E5E;">=</span> time.time()</span>
<span id="cb3-17"></span>
<span id="cb3-18">queue <span class="op" style="color: #5E5E5E;">=</span> Queue()</span>
<span id="cb3-19"><span class="cf" style="color: #003B4F;">for</span> data <span class="kw" style="color: #003B4F;">in</span> data_list:</span>
<span id="cb3-20">    queue.enqueue(data)</span>
<span id="cb3-21"><span class="cf" style="color: #003B4F;">while</span> queue.head <span class="op" style="color: #5E5E5E;">!=</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb3-22">    queue.dequeue()</span>
<span id="cb3-23"></span>
<span id="cb3-24"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"Elapsed time: </span><span class="sc" style="color: #5E5E5E;">{</span>time<span class="sc" style="color: #5E5E5E;">.</span>time() <span class="op" style="color: #5E5E5E;">-</span> start_time<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> seconds."</span>)</span>
<span id="cb3-25">queue.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Elapsed time: 0.8138220310211182 seconds.
[]
Elapsed time: 0.14721250534057617 seconds.</code></pre>
</div>
</div>
</section>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>



</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-19_queue/index.html</guid>
  <pubDate>Wed, 18 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Structure (5) Stack</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-19_stack/index.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="stack" class="level2">
<h2 class="anchored" data-anchor-id="stack">Stack</h2>
<ul>
<li>다양한 알고리즘과 프로그램에서 사용됨</li>
<li>스택: 먼저 들어온 데이터가 나중에 나가는 자료구조</li>
<li>흔히 박스가 쌓인 형태를 스택(stack)이라고 한다. 예) ‘Deep Learning 알고리즘의 구조가 stacked 되어 있는 구조다’ 라고 표현
<ul>
<li>우리가 박스를 쌓은 뒤에 꺼낼 때는, 가장 마지막에 올렸던 박스부터 꺼내야 한다.</li>
</ul></li>
<li>새로운 원소를 삽입할 때는 마지막 위치에 삽입한다. (가장 최근에 삽입된 원소가 가장 끝에 위치)</li>
<li>새로운 원소를 삭제할 때는 마지막 원소가 삭제된다. (가장 최근에 삽입된 원소가 제거됨)</li>
<li>head = 최상위 원소 = 가장 최근에 삽입이된 원소</li>
</ul>
</section>
<section id="스택-자료구조의-중요성" class="level2">
<h2 class="anchored" data-anchor-id="스택-자료구조의-중요성">스택 자료구조의 중요성</h2>
<ul>
<li>스택은 굉장히 기본적인 자료구조이다.</li>
<li>기계 학습 분야뿐 아니라 다양한 프로그램을 개발할 때 빠지지 않고 사용된다.</li>
</ul>
</section>
<section id="스택-자료구조의-시간-복잡도" class="level2">
<h2 class="anchored" data-anchor-id="스택-자료구조의-시간-복잡도">스택 자료구조의 시간 복잡도</h2>
<ul>
<li>스택은 여러 가지 연산을 제공한다.</li>
</ul>
<div id="tbl-letters" class="anchored">
<table class="table">
<caption>Table&nbsp;1: a list of the stack functions in Python</caption>
<colgroup>
<col style="width: 7%">
<col style="width: 16%">
<col style="width: 15%">
<col style="width: 59%">
</colgroup>
<thead>
<tr class="header">
<th>Number</th>
<th>Methods</th>
<th>Time Complexity</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>삽입(Push)</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td>스택에 원소를 삽입하는 연산</td>
</tr>
<tr class="even">
<td>2</td>
<td>추출(Pop)</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td>스택에서 원소를 추출하는 연산</td>
</tr>
<tr class="odd">
<td>3</td>
<td>최상위 원소 (Top)</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td>스택의 최상위 원소(마지막에 들어온 원소) 를 확인(조회)하는 연산</td>
</tr>
<tr class="even">
<td>4</td>
<td>Empty</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td>스택이 비어 있는지 확인하는 연산</td>
</tr>
</tbody>
</table>
</div>
<p>See Table&nbsp;1.</p>
</section>
<section id="python에서-스택을-구현하는-방법-1-리스트-자료형" class="level2">
<h2 class="anchored" data-anchor-id="python에서-스택을-구현하는-방법-1-리스트-자료형">Python에서 스택을 구현하는 방법 1: 리스트 자료형</h2>
<ul>
<li>파이썬의 기본적인 리스트 자료형은 다음의 두 가지 메서드를 제공한다.</li>
<li>append() 메서드: 마지막 위치에 원소를 삽입하며, 시간 복잡도는 <img src="https://latex.codecogs.com/png.latex?O(1)"> 이다.</li>
<li>pop() 메서드: 마지막 위치에서 원소를 추출하며, 시간 복잡도는 <img src="https://latex.codecogs.com/png.latex?O(1)"> 이다.</li>
<li>따라서 일반적으로 스택을 구현할 때, 파이썬의 리스트(list) 자료형을 사용한다.</li>
</ul>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">class</span> Stack:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;">self</span>.stack <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb1-4"></span>
<span id="cb1-5">    <span class="kw" style="color: #003B4F;">def</span> push(<span class="va" style="color: #111111;">self</span>, data):</span>
<span id="cb1-6">        <span class="co" style="color: #5E5E5E;"># 마지막 위치에 원소 삽입</span></span>
<span id="cb1-7">        <span class="va" style="color: #111111;">self</span>.stack.append(data)</span>
<span id="cb1-8"></span>
<span id="cb1-9">    <span class="kw" style="color: #003B4F;">def</span> pop(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-10">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.is_empty():</span>
<span id="cb1-11">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-12">        <span class="co" style="color: #5E5E5E;"># 마지막 원소 추출</span></span>
<span id="cb1-13">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.stack.pop()</span>
<span id="cb1-14"></span>
<span id="cb1-15">    <span class="kw" style="color: #003B4F;">def</span> top(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-16">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.is_empty():</span>
<span id="cb1-17">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb1-18">        <span class="co" style="color: #5E5E5E;"># 마지막 원소 반환</span></span>
<span id="cb1-19">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.stack[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]</span>
<span id="cb1-20"></span>
<span id="cb1-21">    <span class="kw" style="color: #003B4F;">def</span> is_empty(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-22">        <span class="cf" style="color: #003B4F;">return</span> <span class="bu" style="color: null;">len</span>(<span class="va" style="color: #111111;">self</span>.stack) <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"></span>
<span id="cb1-25">stack <span class="op" style="color: #5E5E5E;">=</span> Stack()</span>
<span id="cb1-26">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb1-27"><span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> arr:</span>
<span id="cb1-28">    stack.push(x)</span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="cf" style="color: #003B4F;">while</span> <span class="kw" style="color: #003B4F;">not</span> stack.is_empty():</span>
<span id="cb1-31">    <span class="bu" style="color: null;">print</span>(stack.pop())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>2
4
6
5
2
7
9</code></pre>
</div>
</div>
</section>
<section id="연결-리스트로-스택-구현하기" class="level2">
<h2 class="anchored" data-anchor-id="연결-리스트로-스택-구현하기">연결 리스트로 스택 구현하기</h2>
<ul>
<li>스택을 연결 리스트로 구현하면, 삽입과 삭제에 있어서 <img src="https://latex.codecogs.com/png.latex?O(1)"> 을 보장한다.</li>
<li>연결 리스트로 구현할 때는 머리(head)를 가리키는 하나의 포인터만 가진다.</li>
<li>머리(head): 남아있는 원소 중 가장 마지막에 들어 온 데이터를 가리키는 포인터</li>
</ul>
<section id="삽입-연산" class="level3">
<h3 class="anchored" data-anchor-id="삽입-연산">삽입 연산</h3>
<ul>
<li>삽입할 때는 기존의 머리 뒤에 데이터가 들어가고 포인터가 가장 최근에 삽입된 데이터를 가리키도록 머리(head) 위치를 바꿔준다.</li>
<li>삭제할 때는 머리(head) 위치에서 데이터를 꺼낸다.
<ul>
<li>즉, 포인터를 삭제할 데이터에 앞에 있는 데이터로 머리 위치를 바꾸는 것만으로 삭제는 이루어진다.</li>
</ul></li>
</ul>
</section>
<section id="삭제-연산" class="level3">
<h3 class="anchored" data-anchor-id="삭제-연산">삭제 연산</h3>
<ul>
<li>삭제할 때는 머리(head) 위치에서 데이터를 꺼낸다.</li>
</ul>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;">class</span> Node:</span>
<span id="cb3-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, data):</span>
<span id="cb3-3">        <span class="va" style="color: #111111;">self</span>.data <span class="op" style="color: #5E5E5E;">=</span> data</span>
<span id="cb3-4">        <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-5"></span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="kw" style="color: #003B4F;">class</span> Stack:</span>
<span id="cb3-8">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-9">        <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-10"></span>
<span id="cb3-11">    <span class="co" style="color: #5E5E5E;"># 원소 삽입</span></span>
<span id="cb3-12">    <span class="kw" style="color: #003B4F;">def</span> push(<span class="va" style="color: #111111;">self</span>, data):</span>
<span id="cb3-13">        node <span class="op" style="color: #5E5E5E;">=</span> Node(data)</span>
<span id="cb3-14">        node.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head</span>
<span id="cb3-15">        <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">=</span> node</span>
<span id="cb3-16"></span>
<span id="cb3-17">    <span class="co" style="color: #5E5E5E;"># 원소 추출하기</span></span>
<span id="cb3-18">    <span class="kw" style="color: #003B4F;">def</span> pop(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-19">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.is_empty():</span>
<span id="cb3-20">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-21"></span>
<span id="cb3-22">        <span class="co" style="color: #5E5E5E;"># 머리(head) 위치에서 노드 꺼내기</span></span>
<span id="cb3-23">        data <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head.data</span>
<span id="cb3-24">        <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head.<span class="bu" style="color: null;">next</span></span>
<span id="cb3-25"></span>
<span id="cb3-26">        <span class="cf" style="color: #003B4F;">return</span> data</span>
<span id="cb3-27"></span>
<span id="cb3-28">    <span class="co" style="color: #5E5E5E;"># 최상위 원소(top)</span></span>
<span id="cb3-29">    <span class="kw" style="color: #003B4F;">def</span> top(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-30">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.is_empty():</span>
<span id="cb3-31">            <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-32">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.head.data</span>
<span id="cb3-33"></span>
<span id="cb3-34">    <span class="co" style="color: #5E5E5E;"># 먼저 추출할 원소부터 출력</span></span>
<span id="cb3-35">    <span class="kw" style="color: #003B4F;">def</span> show(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-36">        cur <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head</span>
<span id="cb3-37">        <span class="cf" style="color: #003B4F;">while</span> cur:</span>
<span id="cb3-38">            <span class="bu" style="color: null;">print</span>(cur.data, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb3-39">            cur <span class="op" style="color: #5E5E5E;">=</span> cur.<span class="bu" style="color: null;">next</span></span>
<span id="cb3-40"></span>
<span id="cb3-41">    <span class="co" style="color: #5E5E5E;"># 스택이 비어있는지 확인</span></span>
<span id="cb3-42">    <span class="kw" style="color: #003B4F;">def</span> is_empty(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb3-43">        <span class="cf" style="color: #003B4F;">return</span> <span class="va" style="color: #111111;">self</span>.head <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span></span>
<span id="cb3-44"></span>
<span id="cb3-45"></span>
<span id="cb3-46">stack <span class="op" style="color: #5E5E5E;">=</span> Stack()</span>
<span id="cb3-47">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb3-48"><span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> arr:</span>
<span id="cb3-49">    stack.push(x)</span>
<span id="cb3-50">stack.show()</span>
<span id="cb3-51"><span class="bu" style="color: null;">print</span>()</span>
<span id="cb3-52"></span>
<span id="cb3-53"><span class="cf" style="color: #003B4F;">while</span> <span class="kw" style="color: #003B4F;">not</span> stack.is_empty():</span>
<span id="cb3-54">    <span class="bu" style="color: null;">print</span>(stack.pop())</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>2 4 6 5 2 7 9 
2
4
6
5
2
7
9</code></pre>
</div>
</div>
</section>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>



</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-19_stack/index.html</guid>
  <pubDate>Wed, 18 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Structure (2) Array</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-18_array/index.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="배열의-개요" class="level2">
<h2 class="anchored" data-anchor-id="배열의-개요">배열의 개요</h2>
<ul>
<li>가장 기본적인 자료구조다.</li>
<li>여러 개의 변수를 담는 공간으로 이해할 수 있다.</li>
<li>data가 연속적으로 들어가는 형태여서 배열은 인덱스(index)가 존재하며, 인덱스는 0부터 시작한다.</li>
<li>특정한 인덱스에 직접적으로 접근 가능하여 수행 시간은 빠른 속도인 <img src="https://latex.codecogs.com/png.latex?O(1)"> 이다.</li>
</ul>
</section>
<section id="배열의-특징" class="level2">
<h2 class="anchored" data-anchor-id="배열의-특징">배열의 특징</h2>
<ul>
<li>컴퓨터의 메인 메모리에서 배열의 공간은 연속적으로 할당된다.</li>
<li>장점: Cache memory(속도면에서, <img src="https://latex.codecogs.com/png.latex?RAM%3CCache%3CCPU">, 공간면에서, <img src="https://latex.codecogs.com/png.latex?CPU%3CRAM%3CCache">, CPU옆에 위치) 히트(RAM에 있는 data를 Cache에 일부 옮기는 현상) 가능성이 높으며, 조회가 빠르다. 배열 같은 경우는 공간적으로 또는 연속적으로 붙어 있기때문에 cache memory 묶어서 옮길 수 있다.
<ul>
<li>Cache Hit: 원하는 data가 Cache Memory존재하는 것을 의미.</li>
<li>특정 index에 접근하는 속도가 매우 빠르다, <img src="https://latex.codecogs.com/png.latex?O(1)">.</li>
</ul></li>
<li>단점: 배열의 크기를 미리 지정해야 하는 것이 일반적이므로, 데이터의 추가 및 삭제에 한계가 있다.</li>
</ul>
</section>
<section id="연결리스트-linked-list" class="level2">
<h2 class="anchored" data-anchor-id="연결리스트-linked-list">연결리스트 (LINKED LIST)</h2>
<ul>
<li>컴퓨터의 메인 메모리(RAM)상에서 주소가 연속적이지 않다.</li>
<li>배열과 다르게 크기가 정해져 있지 않고, 리스트의 크기는 동적으로 변경 가능하다.</li>
<li>장점: 포인터(pointer)를 통해 다음 데이터의 위치를 가리킨다는 점에서 삽입과 삭제가 간편하다.</li>
<li>단점: 원소를 검색할 때는 포인터가 앞에서부터 원소를 찾아야 하므로, 데이터 검색 속도가 느리다.</li>
</ul>
</section>
<section id="파이썬의-리스트-list-자료형" class="level2">
<h2 class="anchored" data-anchor-id="파이썬의-리스트-list-자료형">파이썬의 리스트 (list) 자료형</h2>
<p>파이썬의 리스트(List) 자료형</p>
<ul>
<li>파이썬에서는 리스트 자료형을 제공한다. (컴퓨터 공학에서의 연결 리스트와는 다른 의미)</li>
<li>일반적인 프로그래밍 언어에서의 배열로 이해할 수 있다. 그러므로, 파이썬의 리스트는 배열이라고 생각해야한다.
<ul>
<li>파이썬의 리스트는 배열처럼 임의의 인덱스를 이용해 직접적인 접근이 가능하다.</li>
</ul></li>
<li>파이썬의 리스트 자료형은 동적 배열이다.
<ul>
<li>append를 이용해 데이터를 삽입할 때 배열의 용량이 가득 차면, 자동으로 크기를 증가시킨다.</li>
</ul></li>
<li>내부적으로 포인터(pointer)를 사용하여, 연결 리스트의 장점도 가지고 있다.</li>
<li>배열(array) 혹은 스택(stack)의 기능이 필요할 때 리스트 자료형을 그대로 사용할 수 있다.</li>
<li>큐(queue)의 기능을 제공하지 못한다. (비효율적)</li>
</ul>
</section>
<section id="리스트-컴프리헨션-list-comprehension" class="level2">
<h2 class="anchored" data-anchor-id="리스트-컴프리헨션-list-comprehension">리스트 컴프리헨션 (List Comprehension)</h2>
<ul>
<li>파이썬에서는 <strong>임의의 크기를 가지는 배열</strong>을 만들 수 있다.</li>
<li>일반적으로 리스트를 초기화할 때 리스트 컴프리헨션(list comprehension)이 자주 사용된다. (<strong>매우 편리</strong>)</li>
<li>크기가 N인 1차원 배열을 만드는 방법은 다음과 같다.</li>
</ul>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;"># [0, 0, 0, 0, 0]</span></span>
<span id="cb1-2">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb1-3">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> n</span>
<span id="cb1-4"><span class="bu" style="color: null;">print</span>(arr)</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;"># [0, 1, 2, 3, 4]</span></span>
<span id="cb1-7">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb1-8">arr <span class="op" style="color: #5E5E5E;">=</span> [i <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n)]</span>
<span id="cb1-9"><span class="bu" style="color: null;">print</span>(arr)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 0, 0, 0, 0]
[0, 1, 2, 3, 4]</code></pre>
</div>
</div>
<ul>
<li>크기가 <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%20M"> 인 2차원 리스트(배열) 만들기 1
<ul>
<li>2차원 배열이 필요할 때는 다음과 같이 초기화한다.</li>
</ul></li>
</ul>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb3-2">m <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb3-3">arr <span class="op" style="color: #5E5E5E;">=</span> [[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> m <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n)]</span>
<span id="cb3-4"><span class="bu" style="color: null;">print</span>(arr)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]</code></pre>
</div>
</div>
<ul>
<li>크기가 <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%20M"> 인 2차원 리스트(배열) 만들기 2</li>
</ul>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb5-2">m <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb5-3">arr <span class="op" style="color: #5E5E5E;">=</span> [[i <span class="op" style="color: #5E5E5E;">*</span> m <span class="op" style="color: #5E5E5E;">+</span> j <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(m)] <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n)]</span>
<span id="cb5-4"><span class="bu" style="color: null;">print</span>(arr)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[[0, 1, 2, 3, 4], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14]]</code></pre>
</div>
</div>
</section>
<section id="배열을-초기화할-때-유의할-점" class="level2">
<h2 class="anchored" data-anchor-id="배열을-초기화할-때-유의할-점">배열을 초기화할 때 유의할 점</h2>
<ul>
<li>리스트는 기본적으로 메모리 주소를 반환한다.</li>
<li>따라서 단순히 <code>[[0]∗m]∗n</code> 형태로 배열을 초기화하면 안 된다.</li>
<li>이렇게 초기화를 하게 되면, n개의 <code>[0]∗m</code> 리스트는 모두 같은 객체로 인식된다.</li>
<li>다시 말해, 같은 메모리를(동일한 리스트를) 가리키는 n개의 원소를 담는 리스트가 된다.</li>
<li>2차원 배열을 초기화할 때는 리스트 컴프리헨션을 이용하는 것이 일반적이다.</li>
</ul>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb7-2">m <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">5</span></span>
<span id="cb7-3">arr1 <span class="op" style="color: #5E5E5E;">=</span> [[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> m] <span class="op" style="color: #5E5E5E;">*</span> n <span class="co" style="color: #5E5E5E;"># 잘못된 방식</span></span>
<span id="cb7-4">arr2 <span class="op" style="color: #5E5E5E;">=</span> [[<span class="dv" style="color: #AD0000;">0</span>] <span class="op" style="color: #5E5E5E;">*</span> m <span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n)] <span class="co" style="color: #5E5E5E;"># 옳은 방식</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">arr1[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">3</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb7-7">arr2[<span class="dv" style="color: #AD0000;">1</span>][<span class="dv" style="color: #AD0000;">3</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">7</span></span>
<span id="cb7-8"></span>
<span id="cb7-9"><span class="bu" style="color: null;">print</span>(arr1)</span>
<span id="cb7-10"><span class="bu" style="color: null;">print</span>(arr2)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[[0, 0, 0, 7, 0], [0, 0, 0, 7, 0], [0, 0, 0, 7, 0]]
[[0, 0, 0, 0, 0], [0, 0, 0, 7, 0], [0, 0, 0, 0, 0]]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="cell-output cell-output-display">
<p>위의 결과를 보면, 잘못된 방식으로 초기화된 배열 <code>arr1</code>은 [[0, 0, 0, 7, 0], [0, 0, 0, 7, 0], [0, 0, 0, 7, 0]]와 같이 7의 삽입이 모든 행에 걸쳐서 적용됐다. 반면에, 올바른 방식으로 초기화된 <code>arr2</code>는 [[0, 0, 0, 0, 0], [0, 0, 0, 7, 0], [0, 0, 0, 0, 0]]는 의도된 대로 하나의 element가 [1][3] index에 삽입이 된 것을 볼 수 있다.</p>
</div>
</div>
</section>
<section id="배열-직접-초기화" class="level2">
<h2 class="anchored" data-anchor-id="배열-직접-초기화">배열 직접 초기화</h2>
<ul>
<li>자신이 원하는 임의의 값을 넣어 곧바로 사용할 수 있다.</li>
</ul>
<div class="cell" data-execution_count="6">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>]</span>
<span id="cb9-2"><span class="bu" style="color: null;">print</span>(arr)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8]</code></pre>
</div>
</div>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>



</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-18_array/index.html</guid>
  <pubDate>Tue, 17 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Structure (3) Linked List</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-18_linked_list/index.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="개요" class="level2">
<h2 class="anchored" data-anchor-id="개요">개요</h2>
<ul>
<li>연결 리스트는 각 노드가 한 줄로 연결되어 있는 자료 구조다.</li>
<li>각 노드는 (데이터, 포인터) 형태를 가진다.</li>
<li>포인터: 다음 노드의 메모리 주소를 가리키는 목적으로 사용된다.</li>
<li>연결성: 각 노드의 포인터는 다음 혹은 이전 노드를 가리킨다.<br>
</li>
<li>연결 리스트를 이용하면 다양한 자료구조를 구현할 수 있다.
<ul>
<li>예시) 스택, 큐 등을 구현 가능</li>
</ul></li>
<li>Python은 연결 리스트를 활용하는 자료구조를 제공한다.</li>
<li>연결 리스트를 실제 구현해야 하는 경우는 적지만, 그 원리 이해는 자료 구조와 클래스를 작성하는데 도움이 된다.</li>
</ul>
</section>
<section id="연결-리스트linked-list-vs.-배열array" class="level2">
<h2 class="anchored" data-anchor-id="연결-리스트linked-list-vs.-배열array">연결 리스트(Linked List) vs.&nbsp;배열(Array)</h2>
<ul>
<li>연결 리스트와 배열(array)을 비교하여 장단점을 이해할 필요가 있다.</li>
<li>특정 위치의 데이터를 삭제할 때, 일반적인 <strong>배열</strong>에서는 <img src="https://latex.codecogs.com/png.latex?O(N)"> 만큼의 시간이 소요된다.</li>
<li>하지만, <strong>연결 리스트</strong>를 이용하면 단순히 연결만 끊어주면 된다.</li>
<li>따라서 삭제할 위치를 정확히 알고 있는 경우 <img src="https://latex.codecogs.com/png.latex?O(1)"> 의 시간이 소요된다.</li>
<li>하지만 삭제할 위치를 정확히 알아내기 위해 앞의 코드를 자세히 보게 되는 소요 시간이 증가할 수 있다.</li>
</ul>
<section id="배열의-삽입-연산" class="level3">
<h3 class="anchored" data-anchor-id="배열의-삽입-연산">배열의 삽입 연산</h3>
<ul>
<li>배열에 새로운 원소를 삽입할 때, 최악의 경우 시간 복잡도를 계산하여라.</li>
<li>예시) 배열에서 인덱스 3에 원소 “59”를 삽입할 경우, 인덱스 4 이후의 공간에 있는 데이터를 한칸씩 밀어내는 <img src="https://latex.codecogs.com/png.latex?O(n)"> 만큼 소요</li>
</ul>
</section>
<section id="배열의-삭제-연산" class="level3">
<h3 class="anchored" data-anchor-id="배열의-삭제-연산">배열의 삭제 연산</h3>
<ul>
<li>배열에 존재하는 원소를 삭제할 때, 최악의 경우 시간 복잡도를 계산하여라.</li>
<li>예시) 배열에서 인덱스 3에 해당하는 원소를 삭제한 후 데이터를 한칸 씩 당겨 이동 시키는 <img src="https://latex.codecogs.com/png.latex?O(n)"> 만큼 소요</li>
<li>따라서, 최악의 경우 시간 복잡도는 <img src="https://latex.codecogs.com/png.latex?O(N)"> 이다.</li>
</ul>
</section>
<section id="연결-리스트linked-list의-삽입insert-연산" class="level3">
<h3 class="anchored" data-anchor-id="연결-리스트linked-list의-삽입insert-연산">연결 리스트(Linked List)의 삽입(Insert) 연산</h3>
<ul>
<li>삽입할 위치를 알고 있다면, 물리적인 위치를 한 칸씩 옮기지 않아도 삽입할 수 있다.</li>
<li>인덱스 2의 위치에 원소를 삽입할 경우 인덱스 1의 Node에서 인덱스 2에 위치할 데이터를 가리키고 인덱스 2의 node가 인덱스 3의 node를 가리키도록 만들면 된다.</li>
</ul>
</section>
<section id="연결-리스트linked-list의-삭제delete-연산" class="level3">
<h3 class="anchored" data-anchor-id="연결-리스트linked-list의-삭제delete-연산">연결 리스트(Linked List)의 삭제(Delete) 연산</h3>
<ul>
<li>삭제할 위치를 알고 을 경우 연결 리스트 사용</li>
<li>인덱스 2의 위치에 원소를 삭제할 경우 인덱스 1의 Node가 인덱스 3의 node를 가리키게 만들면 됨</li>
</ul>
</section>
<section id="연결-리스트linked-list의-붙이기append-연산" class="level3">
<h3 class="anchored" data-anchor-id="연결-리스트linked-list의-붙이기append-연산">연결 리스트(Linked List)의 붙이기(Append) 연산</h3>
<ul>
<li>뒤에 붙일 때는 남는 공간에 마지막 노드의 다음 위치에 원소를 할당 시키면 된다.</li>
<li>마지막 위치에 새로운 원소를 추가</li>
</ul>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;">class</span> Node:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>, data):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;">self</span>.data <span class="op" style="color: #5E5E5E;">=</span> data <span class="co" style="color: #5E5E5E;"># 데이터 할당</span></span>
<span id="cb1-4">        <span class="va" style="color: #111111;">self</span>.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span> <span class="co" style="color: #5E5E5E;"># 다음 노드</span></span>
<span id="cb1-5"></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;">class</span> LinkedList:</span>
<span id="cb1-8">    <span class="kw" style="color: #003B4F;">def</span> <span class="fu" style="color: #4758AB;">__init__</span>(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-9">        <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">None</span> <span class="co" style="color: #5E5E5E;"># 첫 번째  node</span></span>
<span id="cb1-10"></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;"># 가장 뒤에 노드 삽입</span></span>
<span id="cb1-12">    <span class="kw" style="color: #003B4F;">def</span> append(<span class="va" style="color: #111111;">self</span>, data):</span>
<span id="cb1-13">        </span>
<span id="cb1-14">        <span class="cf" style="color: #003B4F;">if</span> <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">==</span> <span class="va" style="color: #111111;">None</span>: <span class="co" style="color: #5E5E5E;"># 헤드(head)가 비어있는 경우</span></span>
<span id="cb1-15">            <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">=</span> Node(data)</span>
<span id="cb1-16">            <span class="cf" style="color: #003B4F;">return</span></span>
<span id="cb1-17">        </span>
<span id="cb1-18">        currrent <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head <span class="co" style="color: #5E5E5E;"># 그렇지 않다면 마지막 노드에 새로운 노드 추가</span></span>
<span id="cb1-19"></span>
<span id="cb1-20">        <span class="cf" style="color: #003B4F;">while</span> currrent.<span class="bu" style="color: null;">next</span> <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>: <span class="co" style="color: #5E5E5E;"># 다음 노드가 없을 때까지  </span></span>
<span id="cb1-21">            currrent <span class="op" style="color: #5E5E5E;">=</span> currrent.<span class="bu" style="color: null;">next</span> <span class="co" style="color: #5E5E5E;"># 다음 원소로 넘어감</span></span>
<span id="cb1-22">        currrent.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> Node(data) <span class="co" style="color: #5E5E5E;"># 다음 노드가 없으면 새로운 데이터를 추가 </span></span>
<span id="cb1-23"></span>
<span id="cb1-24">    <span class="co" style="color: #5E5E5E;"># 모든 노드를 하나씩 출력</span></span>
<span id="cb1-25">    <span class="kw" style="color: #003B4F;">def</span> show(<span class="va" style="color: #111111;">self</span>):</span>
<span id="cb1-26">        currrent <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head</span>
<span id="cb1-27">        <span class="cf" style="color: #003B4F;">while</span> currrent <span class="kw" style="color: #003B4F;">is</span> <span class="kw" style="color: #003B4F;">not</span> <span class="va" style="color: #111111;">None</span>:</span>
<span id="cb1-28">            <span class="bu" style="color: null;">print</span>(currrent.data, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb1-29">            currrent <span class="op" style="color: #5E5E5E;">=</span> currrent.<span class="bu" style="color: null;">next</span></span>
<span id="cb1-30"></span>
<span id="cb1-31">    <span class="co" style="color: #5E5E5E;"># 특정 인덱스(index)의 노드 찾기</span></span>
<span id="cb1-32">    <span class="kw" style="color: #003B4F;">def</span> search(<span class="va" style="color: #111111;">self</span>, index):</span>
<span id="cb1-33">        node <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head</span>
<span id="cb1-34">        <span class="cf" style="color: #003B4F;">for</span> _ <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(index):</span>
<span id="cb1-35">            node <span class="op" style="color: #5E5E5E;">=</span> node.<span class="bu" style="color: null;">next</span></span>
<span id="cb1-36">        <span class="cf" style="color: #003B4F;">return</span> node</span>
<span id="cb1-37"></span>
<span id="cb1-38">    <span class="co" style="color: #5E5E5E;"># 특정 인덱스(index)에 노드 삽입</span></span>
<span id="cb1-39">    <span class="kw" style="color: #003B4F;">def</span> insert(<span class="va" style="color: #111111;">self</span>, index, data):</span>
<span id="cb1-40">        new <span class="op" style="color: #5E5E5E;">=</span> Node(data)</span>
<span id="cb1-41">        <span class="co" style="color: #5E5E5E;"># 첫 위치에 추가하는 경우</span></span>
<span id="cb1-42">        <span class="cf" style="color: #003B4F;">if</span> index <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb1-43">            new.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head</span>
<span id="cb1-44">            <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">=</span> new</span>
<span id="cb1-45">            <span class="cf" style="color: #003B4F;">return</span></span>
<span id="cb1-46">        <span class="co" style="color: #5E5E5E;"># 삽입할 위치의 앞 노드</span></span>
<span id="cb1-47">        node <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.search(index <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-48">        <span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> node.<span class="bu" style="color: null;">next</span></span>
<span id="cb1-49">        node.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> new</span>
<span id="cb1-50">        new.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">next</span></span>
<span id="cb1-51"></span>
<span id="cb1-52">    <span class="co" style="color: #5E5E5E;"># 특정 인덱스(index)의 노드 삭제</span></span>
<span id="cb1-53">    <span class="kw" style="color: #003B4F;">def</span> remove(<span class="va" style="color: #111111;">self</span>, index):</span>
<span id="cb1-54">        <span class="co" style="color: #5E5E5E;"># 첫 위치를 삭제하는 경우</span></span>
<span id="cb1-55">        <span class="cf" style="color: #003B4F;">if</span> index <span class="op" style="color: #5E5E5E;">==</span> <span class="dv" style="color: #AD0000;">0</span>:</span>
<span id="cb1-56">            <span class="va" style="color: #111111;">self</span>.head <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.head.<span class="bu" style="color: null;">next</span></span>
<span id="cb1-57">            <span class="cf" style="color: #003B4F;">return</span></span>
<span id="cb1-58">        <span class="co" style="color: #5E5E5E;"># 삭제할 위치의 앞 노드</span></span>
<span id="cb1-59">        front <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">self</span>.search(index <span class="op" style="color: #5E5E5E;">-</span> <span class="dv" style="color: #AD0000;">1</span>)</span>
<span id="cb1-60">        front.<span class="bu" style="color: null;">next</span> <span class="op" style="color: #5E5E5E;">=</span> front.<span class="bu" style="color: null;">next</span>.<span class="bu" style="color: null;">next</span></span>
<span id="cb1-61"></span>
<span id="cb1-62"></span>
<span id="cb1-63">linked_list <span class="op" style="color: #5E5E5E;">=</span> LinkedList()</span>
<span id="cb1-64">data_list <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">9</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">7</span>]</span>
<span id="cb1-65"></span>
<span id="cb1-66"><span class="cf" style="color: #003B4F;">for</span> data <span class="kw" style="color: #003B4F;">in</span> data_list:</span>
<span id="cb1-67">    linked_list.append(data)</span>
<span id="cb1-68"></span>
<span id="cb1-69"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"전체 노드 출력:"</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb1-70">linked_list.show()</span>
<span id="cb1-71"></span>
<span id="cb1-72">linked_list.insert(<span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">4</span>)</span>
<span id="cb1-73"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">전체 노드 출력:"</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb1-74">linked_list.show()</span>
<span id="cb1-75"></span>
<span id="cb1-76">linked_list.remove(<span class="dv" style="color: #AD0000;">7</span>)</span>
<span id="cb1-77"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">전체 노드 출력:"</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb1-78">linked_list.show()</span>
<span id="cb1-79"></span>
<span id="cb1-80">linked_list.insert(<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb1-81"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"</span><span class="ch" style="color: #20794D;">\n</span><span class="st" style="color: #20794D;">전체 노드 출력:"</span>, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb1-82">linked_list.show()</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>전체 노드 출력: 3 5 9 8 5 6 1 7 
전체 노드 출력: 3 5 9 8 4 5 6 1 7 
전체 노드 출력: 3 5 9 8 4 5 6 7 
전체 노드 출력: 3 5 9 8 4 5 6 2 7 </code></pre>
</div>
</div>
</section>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>



</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-18_linked_list/index.html</guid>
  <pubDate>Tue, 17 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Data Structure (1) Overview</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-17_data_structure_overview/index.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<section id="data-structure" class="level2">
<h2 class="anchored" data-anchor-id="data-structure">Data Structure</h2>
<p>딥러닝은 다양한 알고리즘의 조합으로 수행되기 때문에 다양한 알고리즘을 정확하게 작성하기 위해서는 다수의 다양한 자료(data)를 담기 위해 사용되는 자료 구조를 이해할 필요가 있다. 즉, 자료구조는 정확한 알고리즘을 구현하기 위해 다수의 자료(data)를 담기 위한 구조이다.</p>
<ul>
<li>딥러닝 유저들간에도 자료구조를 이해하는 것에 대한 의견이 분분하지만</li>
<li>올바른 자료구조를 사용하는 것은 프로그램을 조직적으로 만들 수 있는 능력을 키울 수 있다.</li>
<li>데이터의 수가 많아질수록 효율적인 자료구조가 필요하다.</li>
<li>예시) 학생 수가 1,000,000명 이상인 학생 관리 프로그램
<ul>
<li>매일 자료 조회가 1억번 이상 발생한다면 더 빠르게 동작하는 자료 구조를 사용해야 프로그램의 효율성을 올릴 수 있다.</li>
</ul></li>
</ul>
<section id="자료구조의-개요" class="level3">
<h3 class="anchored" data-anchor-id="자료구조의-개요">자료구조의 개요</h3>
<ul>
<li>자료구조의 필요성에 대해서 이해할 필요가 있다.</li>
<li>성능 비교: 자료구조/알고리즘의 성능 측정 방법에 대해 이해할 필요가 있다.
<ul>
<li>A: 적당한 속도의 삽입 &amp; 적당한 속도의 추출 (삽입: <img src="https://latex.codecogs.com/png.latex?O%20(log%20N)"> / 추출: <img src="https://latex.codecogs.com/png.latex?O(log%20N)">)</li>
<li>B: 느린 삽입 &amp; 빠른 추출 (삽입: <img src="https://latex.codecogs.com/png.latex?O%20(N)"> / 추출: <img src="https://latex.codecogs.com/png.latex?O%20(1)">)</li>
<li>A vs B? 상황에 따라 A를 만들지 B를 만들지 선택해야 한다. 삽입 연산이 많으면 A를, 추출 연산이 많으면 B를 택해야 한다. (속도 비교: <img src="https://latex.codecogs.com/png.latex?O%20(N)%20%3C%20O%20(log%20N)%3C%20O%20(1)">)</li>
<li>하지만, 실무적으로 많은 개발자들이 A를 택한다. 왜냐면 log 복잡도는 상수 복잡도와 속도가 비슷하기 때문</li>
</ul></li>
</ul>
</section>
</section>
<section id="자료-구조의-필요성" class="level2">
<h2 class="anchored" data-anchor-id="자료-구조의-필요성">자료 구조의 필요성</h2>
<ul>
<li>이처럼 상황에 맞게 알고리즘의 연산 속도를 결정해야 하므로 데이터를 효과적으로 저장하고, 처리하는 방법에 대해 바르게 이해할 필요가 있다.</li>
<li>자료구조를 제대로 이해해야 불필요하게 메모리와 계산을 낭비하지 않는다.</li>
<li>C언어를 기준으로 정수(int) 형식의 데이터가 100만 개가량이 존재한다고 가정하자.</li>
<li>해당 프로그램을 이용하면, 내부적으로 하루에 데이터 조회가 1억 번 이상 발생한다.</li>
<li>이때 원하는 데이터를 가장 빠르게 찾도록 해주는 자료구조는 무엇일까?
<ul>
<li>트리(tree)와 같은 자료구조를 활용할 수 있다.</li>
</ul></li>
</ul>
</section>
<section id="자료-구조의-종류" class="level2">
<h2 class="anchored" data-anchor-id="자료-구조의-종류">자료 구조의 종류</h2>
<ol type="1">
<li><p>선형 자료 구조(linear data structure) 선형 자료구조는 하나의 데이터 뒤에 다른 데이터가 하나 존재하는 자료구조이며 데이터가 일렬로 연속적으로(순차적으로) 연결되어 있다.</p>
<ul>
<li>배열(array)</li>
<li>연결 리스트(linked list)</li>
<li>스택(stack)</li>
<li>큐(queue)</li>
</ul></li>
<li><p>비선형 자료 구조(non-linear data structure)<br>
비선형 자료구조는 하나의 데이터 뒤에 다른 데이터가 여러 개 올 수 있는 자료구조이며 데이터가 일직선상으로 연결되어 있지 않아도 된다.</p>
<ul>
<li>트리(tree)</li>
<li>그래프(graph)</li>
</ul></li>
</ol>
</section>
<section id="자료구조와-알고리즘" class="level2">
<h2 class="anchored" data-anchor-id="자료구조와-알고리즘">자료구조와 알고리즘</h2>
<ol type="1">
<li>효율적인 자료구조 설계를 위해 알고리즘 지식이 필요하다.</li>
<li>효율적인 알고리즘을 작성하기 위해서 문제 상황에 맞는 적절한 자료구조가 사용되어야 한다.</li>
<li>프로그램을 작성할 때 자료구조와 알고리즘 모두 고려해야 한다.</li>
</ol>
</section>
<section id="프로그램의-성능-측정-방법" class="level2">
<h2 class="anchored" data-anchor-id="프로그램의-성능-측정-방법">프로그램의 성능 측정 방법</h2>
<ul>
<li>시간 복잡도(time complexity): 알고리즘에 사용되는 연산 횟수를 측정 (시간 측정)</li>
<li>공간 복잡도(space complexity): 알고리즘에 사용되는 메모리의 양을 측정 (공간 측정)</li>
<li>공간을 많이 사용하는 대신 <strong>시간을 단축</strong>하는 방법이 흔히 사용된다.</li>
<li>프로그램의 성능 측정 방법: Big-O 표기법
<ul>
<li>복잡도를 표현할 때는 Big-O 표기법을 사용한다.
<ol type="1">
<li>특정한 알고리즘이 얼마나 효율적인지 수치적으로 표현할 수 있다.</li>
<li>가장 빠르게 증가하는 항만을 고려하는 표기법이다.</li>
</ol></li>
<li>아래의 알고리즘은 <img src="https://latex.codecogs.com/png.latex?O(n)"> 의 시간 복잡도를 가진다. 왜냐면, n에 따라 <code>summary += i</code>의 연산 횟수가 정해지기 때문이다.</li>
</ul></li>
</ul>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb1-2">summary <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">0</span></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(n):</span>
<span id="cb1-4">    summary <span class="op" style="color: #5E5E5E;">+=</span> i</span>
<span id="cb1-5"><span class="bu" style="color: null;">print</span>(summary)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>45</code></pre>
</div>
</div>
<ul>
<li>다음 알고리즘은 <img src="https://latex.codecogs.com/png.latex?O%20(n%5E2)"> 의 시간 복잡도를 가진다. 2 중 for loop은 i와 j가 n에 따라 각 각 n 번씩 연산되기때문에 <img src="https://latex.codecogs.com/png.latex?n%20%5Ctimes%20n"> 회 만큼 연산된다.</li>
</ul>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">n <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">3</span></span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;">for</span> i <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, n <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;">for</span> j <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">range</span>(<span class="dv" style="color: #AD0000;">1</span>, n <span class="op" style="color: #5E5E5E;">+</span> <span class="dv" style="color: #AD0000;">1</span>):</span>
<span id="cb3-4">        <span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"</span><span class="sc" style="color: #5E5E5E;">{</span>i<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> X </span><span class="sc" style="color: #5E5E5E;">{</span>j<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;"> = </span><span class="sc" style="color: #5E5E5E;">{</span>i <span class="op" style="color: #5E5E5E;">*</span> j<span class="sc" style="color: #5E5E5E;">}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>1 X 1 = 1
1 X 2 = 2
1 X 3 = 3
2 X 1 = 2
2 X 2 = 4
2 X 3 = 6
3 X 1 = 3
3 X 2 = 6
3 X 3 = 9</code></pre>
</div>
</div>
<ul>
<li><p>일반적으로 연산 횟수가 10억 (<img src="https://latex.codecogs.com/png.latex?1.0%20%5Ctimes%2010%5E9">)을 넘어가면 1초 이상의 시간이 소요된다.</p>
<p>[예시] n이 1,000일 때를 고려해 보자.</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?O(n)">: 약 1,000번의 연산</li>
<li><img src="https://latex.codecogs.com/png.latex?O(nlogn%20)">: 약 10,000번의 연산 (약 <img src="https://latex.codecogs.com/png.latex?log10=10">)</li>
<li><img src="https://latex.codecogs.com/png.latex?O(n%5E2)">: 약 1,000,000번의 연산</li>
<li><img src="https://latex.codecogs.com/png.latex?O(n%5E3)">: 약 1,000,000,000번의 연산</li>
</ul></li>
<li><p>그러므로, 알고리즘 짤 때 코딩 레벨로 연산 횟수를 계산해서 연산 시간을 어림잡아 추정할 수 있다.</p></li>
<li><p>시간 복잡도 속도 비교</p>
<p><img src="kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-17_data_structure_overview/Comparison_computational_complexity.svg" class="img-fluid" alt="Time Complexity from Wiki"> <a href="https://commons.wikimedia.org/w/index.php?curid=50321072">By Cmglee - Own work, CC BY-SA 4.0</a></p></li>
<li><p>Big-O 표기법으로 시간 복잡도를 표기할 때는 가장 영향력이 큰 항만을 표시한다.</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?O(3n%5E2%20+%20n)%20=%20O(n%5E2)"></li>
<li>현실 세계에서는 동작 시간이 1초 이내인 알고리즘을 설계할 필요가 있다.</li>
<li>실무적으로 프로그램 동작 시간이 <strong>1초 이상이면 매우 느린 것으로 간주</strong>.</li>
</ul></li>
<li><p>공간 복잡도를 나타낼 때는 MB 단위로 표기한다.</p>
<p>int a[1000]: 4KB int a[1000000]: 4MB int a[2000][2000]: 16MB</p></li>
<li><p>자료구조를 적절히 활용하기</p>
<ul>
<li>자료구조의 종류로는 스택, 큐, 트리 등이 있다.</li>
<li>프로그램을 작성할 때는 자료구조를 적절히 활용하여 시간 복잡도를 최소화하여야 한다.</li>
</ul></li>
</ul>
</section>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>



</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-17_data_structure_overview/index.html</guid>
  <pubDate>Mon, 16 Jan 2023 15:00:00 GMT</pubDate>
  <media:content url="kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-17_data_structure_overview/Comparison_computational_complexity.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Data Structure (4) Python List</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-18_python_list/index.html</link>
  <description><![CDATA[ 



<ul class="nav nav-pills" id="language-tab">
<li class="nav-item">
<button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" aria-controls="Korean" aria-selected="true">
Korean
</button>
</li>
<li class="nav-item">
<button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" aria-controls="knitr" aria-selected="false">
English
</button>
</li>
<div class="tab-content" id="language-tabcontent">

<div id="Korean" class="tab-pane fade show active" aria-labelledby="Korean-tab">
<div id="tbl-letters" class="anchored">
<table class="table">
<caption>Table&nbsp;1: a list of the list functions in Python</caption>
<colgroup>
<col style="width: 6%">
<col style="width: 13%">
<col style="width: 13%">
<col style="width: 17%">
<col style="width: 49%">
</colgroup>
<thead>
<tr class="header">
<th>Number</th>
<th>Methods</th>
<th>Time Complexity</th>
<th>Examples</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>1</td>
<td>Indexing</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td><code>arr[i]</code></td>
<td>특정 i th 인덱스의 값 반환</td>
</tr>
<tr class="even">
<td>2</td>
<td>Storing</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td><code>arr[i] = 1</code></td>
<td>특정 i th 인덱스에 값 (=1) 할당</td>
</tr>
<tr class="odd">
<td>3</td>
<td>Append</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td><code>arr.append(5)</code></td>
<td>리스트의 가장 뒤에 데이터 추가</td>
</tr>
<tr class="even">
<td>4</td>
<td>Pop</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td><code>arr.pop()</code></td>
<td>리스트의 가장 뒤에서 원소 꺼내기</td>
</tr>
<tr class="odd">
<td>5</td>
<td>Length</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td><code>len(arr)</code></td>
<td>리스트의 길이 얻기</td>
</tr>
<tr class="even">
<td>6</td>
<td>Clear</td>
<td><img src="https://latex.codecogs.com/png.latex?O(1)"></td>
<td><code>arr.clear()</code></td>
<td>리스트 내 모든 원소 제거하기</td>
</tr>
<tr class="odd">
<td>7</td>
<td>Slicing</td>
<td><img src="https://latex.codecogs.com/png.latex?O(b-a)"></td>
<td><code>arr[a:b]</code></td>
<td>리스트에서 인덱스 a부터 b-1까지의 원소만 꺼내 새 리스트 만들기</td>
</tr>
<tr class="even">
<td>8</td>
<td>Extend</td>
<td><img src="https://latex.codecogs.com/png.latex?O(len(other))"></td>
<td><code>arr.extend(list2)</code></td>
<td>기존 리스트, list1에 다른 리스트, list2를 이어 붙이기</td>
</tr>
<tr class="odd">
<td>9</td>
<td>Insertion</td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><code>arr.insert(index, x)</code></td>
<td>특정 인덱스에 데이터 x를 삽입하기, 즉 i th index를 뒤로 밀고 추가</td>
</tr>
<tr class="even">
<td>10</td>
<td>Delete</td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><code>del arr[index]</code></td>
<td>특정 인덱스의 데이터 삭제하기</td>
</tr>
<tr class="odd">
<td>11</td>
<td>Construction</td>
<td><img src="https://latex.codecogs.com/png.latex?O(len(other))"></td>
<td><code>arr = list(other)</code></td>
<td>다른 자료구조의 원소들을 이용해 리스트로 만들기</td>
</tr>
<tr class="even">
<td>12</td>
<td>In</td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><code>x in arr</code></td>
<td>데이터 x가 리스트에 존재하는지 확인</td>
</tr>
<tr class="odd">
<td>13</td>
<td>Not in</td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><code>x not in arr</code></td>
<td>데이터 x가 리스트에 존재하지 않는지 확인</td>
</tr>
<tr class="even">
<td>14</td>
<td>Pop</td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><code>arr.pop(index)</code></td>
<td>특정 인덱스의 데이터를 꺼내기 / 단, 가장 뒤 원소를 꺼내는 경우 O(1)</td>
</tr>
<tr class="odd">
<td>15</td>
<td>Remove</td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><code>arr.remove(x)</code></td>
<td>리스트 내에 존재하는 데이터 x를 삭제</td>
</tr>
<tr class="even">
<td>16</td>
<td>Copy</td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><code>arr.copy()</code></td>
<td>리스트를 복제</td>
</tr>
<tr class="odd">
<td>17</td>
<td>Min</td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><code>min(arr)</code></td>
<td>리스트 내에 존재하는 가장 작은 원소</td>
</tr>
<tr class="even">
<td>18</td>
<td>Max</td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><code>max(arr)</code></td>
<td>리스트 내에 존재하는 가장 큰 원소</td>
</tr>
<tr class="odd">
<td>19</td>
<td>Iteration</td>
<td><img src="https://latex.codecogs.com/png.latex?O(N)"></td>
<td><code>for x in arr</code></td>
<td>리스트 내에 존재하는 모든 원소 순회</td>
</tr>
<tr class="even">
<td>20</td>
<td>Multiply</td>
<td><img src="https://latex.codecogs.com/png.latex?O(k*N)"></td>
<td><code>arr * k</code></td>
<td>리스트를 k번 반복하여 길게 만들기</td>
</tr>
<tr class="odd">
<td>21</td>
<td>Sort</td>
<td><img src="https://latex.codecogs.com/png.latex?O(NlogN)"></td>
<td><code>arr.sort()</code></td>
<td>리스트 내 존재하는 원소를 정렬</td>
</tr>
</tbody>
</table>
</div>
<p>See Table&nbsp;1.</p>
<ul>
<li>1~6: 파이썬의 list는 동적 배열의 특징이 있다. 시간 복잡도는 모두 <img src="https://latex.codecogs.com/png.latex?O(1)"> 이다.
<ul>
<li>3~4: 사실상 stack의 기능과 동일</li>
</ul></li>
</ul>
<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>]</span>
<span id="cb1-2"><span class="bu" style="color: null;">print</span>(arr[<span class="dv" style="color: #AD0000;">4</span>]) <span class="co" style="color: #5E5E5E;"># 인덱싱(indexing)</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;"># 저장(storing)</span></span>
<span id="cb1-5">arr[<span class="dv" style="color: #AD0000;">7</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="dv" style="color: #AD0000;">10</span></span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="co" style="color: #5E5E5E;"># 뒤에 붙이기(append)</span></span>
<span id="cb1-8">arr.append(<span class="dv" style="color: #AD0000;">10</span>)</span>
<span id="cb1-9"><span class="bu" style="color: null;">print</span>(arr)</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;"># 뒤에서 꺼내기(pop)</span></span>
<span id="cb1-12">arr.pop()</span>
<span id="cb1-13"><span class="bu" style="color: null;">print</span>(arr)</span>
<span id="cb1-14"></span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;"># 길이(length)</span></span>
<span id="cb1-16"><span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">len</span>(arr))</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;"># 배열 비우기(clear)</span></span>
<span id="cb1-19">arr.clear()</span>
<span id="cb1-20"><span class="bu" style="color: null;">print</span>(arr)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>4
[0, 1, 2, 3, 4, 5, 6, 10, 8, 9, 10]
[0, 1, 2, 3, 4, 5, 6, 10, 8, 9]
10
[]</code></pre>
</div>
</div>
<ul>
<li>7~11</li>
</ul>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>]</span>
<span id="cb3-2">new_arr <span class="op" style="color: #5E5E5E;">=</span> arr[<span class="dv" style="color: #AD0000;">2</span>:<span class="dv" style="color: #AD0000;">7</span>] <span class="co" style="color: #5E5E5E;"># 슬라이싱(slicing)</span></span>
<span id="cb3-3"><span class="bu" style="color: null;">print</span>(new_arr)</span>
<span id="cb3-4"></span>
<span id="cb3-5">arr1 <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>]</span>
<span id="cb3-6">arr2 <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">6</span>, <span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>]</span>
<span id="cb3-7">arr1.extend(arr2) <span class="co" style="color: #5E5E5E;"># 확장(extend)</span></span>
<span id="cb3-8"><span class="bu" style="color: null;">print</span>(arr1)</span>
<span id="cb3-9"></span>
<span id="cb3-10">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>]</span>
<span id="cb3-11">arr.insert(<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">7</span>) <span class="co" style="color: #5E5E5E;"># 삽입(insertion)</span></span>
<span id="cb3-12"><span class="bu" style="color: null;">print</span>(arr)</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;">del</span> arr[<span class="dv" style="color: #AD0000;">3</span>] <span class="co" style="color: #5E5E5E;"># 삭제(delete)</span></span>
<span id="cb3-15"><span class="bu" style="color: null;">print</span>(arr)</span>
<span id="cb3-16"></span>
<span id="cb3-17">data <span class="op" style="color: #5E5E5E;">=</span> {<span class="dv" style="color: #AD0000;">7</span>, <span class="dv" style="color: #AD0000;">8</span>, <span class="dv" style="color: #AD0000;">9</span>}</span>
<span id="cb3-18">arr <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">list</span>(data) <span class="co" style="color: #5E5E5E;"># 다른 자료구조로 리스트 만들기</span></span>
<span id="cb3-19"><span class="bu" style="color: null;">print</span>(arr)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>[2, 3, 4, 5, 6]
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 2, 7, 3, 4]
[0, 1, 2, 3, 4]
[8, 9, 7]</code></pre>
</div>
</div>
<ul>
<li>12~16</li>
</ul>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">0</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>, <span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">4</span>]</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="bu" style="color: null;">print</span>(<span class="dv" style="color: #AD0000;">3</span> <span class="kw" style="color: #003B4F;">in</span> arr) <span class="co" style="color: #5E5E5E;"># 존재 여부(in)</span></span>
<span id="cb5-4"><span class="bu" style="color: null;">print</span>(<span class="dv" style="color: #AD0000;">7</span> <span class="kw" style="color: #003B4F;">not</span> <span class="kw" style="color: #003B4F;">in</span> arr) <span class="co" style="color: #5E5E5E;"># 비존재 여부(not in)</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">arr.pop(<span class="dv" style="color: #AD0000;">1</span>) <span class="co" style="color: #5E5E5E;"># 인덱스 1에 해당하는 원소 꺼내기(pop)</span></span>
<span id="cb5-7"><span class="bu" style="color: null;">print</span>(arr)</span>
<span id="cb5-8"></span>
<span id="cb5-9">arr.remove(<span class="dv" style="color: #AD0000;">3</span>) <span class="co" style="color: #5E5E5E;"># 리스트의 특정 원소 삭제(remove)</span></span>
<span id="cb5-10"><span class="bu" style="color: null;">print</span>(arr)</span>
<span id="cb5-11"></span>
<span id="cb5-12">new_arr <span class="op" style="color: #5E5E5E;">=</span> arr.copy() <span class="co" style="color: #5E5E5E;"># 복제(copy)</span></span>
<span id="cb5-13"><span class="bu" style="color: null;">print</span>(new_arr)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>True
True
[0, 2, 3, 4]
[0, 2, 4]
[0, 2, 4]</code></pre>
</div>
</div>
<ul>
<li>17~21</li>
</ul>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">arr <span class="op" style="color: #5E5E5E;">=</span> [<span class="dv" style="color: #AD0000;">3</span>, <span class="dv" style="color: #AD0000;">5</span>, <span class="dv" style="color: #AD0000;">4</span>, <span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">2</span>]</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">min</span>(arr)) <span class="co" style="color: #5E5E5E;"># 최소(min)</span></span>
<span id="cb7-4"><span class="bu" style="color: null;">print</span>(<span class="bu" style="color: null;">max</span>(arr)) <span class="co" style="color: #5E5E5E;"># 최대(max)</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="cf" style="color: #003B4F;">for</span> x <span class="kw" style="color: #003B4F;">in</span> arr: <span class="co" style="color: #5E5E5E;"># 원소 순회(iteration)</span></span>
<span id="cb7-7">    <span class="bu" style="color: null;">print</span>(x, end<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">" "</span>)</span>
<span id="cb7-8"><span class="bu" style="color: null;">print</span>()</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="bu" style="color: null;">print</span>(arr <span class="op" style="color: #5E5E5E;">*</span> <span class="dv" style="color: #AD0000;">2</span>) <span class="co" style="color: #5E5E5E;"># 리스트 반복하여 곱하기(multiply)</span></span>
<span id="cb7-11"></span>
<span id="cb7-12">arr.sort() <span class="co" style="color: #5E5E5E;"># 정렬(sorting)</span></span>
<span id="cb7-13"><span class="bu" style="color: null;">print</span>(arr)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>1
5
3 5 4 1 2 
[3, 5, 4, 1, 2, 3, 5, 4, 1, 2]
[1, 2, 3, 4, 5]</code></pre>
</div>
</div>
</div>
<div id="English" class="tab-pane fade" aria-labelledby="English-tab">

</div>



</div></ul> ]]></description>
  <category>Engineering</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/Engineering/2023-01-18_python_list/index.html</guid>
  <pubDate>Mon, 16 Jan 2023 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Normality Check</title>
  <dc:creator>Kwangmin Kim</dc:creator>
  <link>kmink3225.netlify.app/docs/blog/posts/statistics/2023-01-16_normality/index.html</link>
  <description><![CDATA[ 



<section id="shapiro-wilk-test" class="level2" data-number="1">
<h2 data-number="1" class="anchored" data-anchor-id="shapiro-wilk-test"><span class="header-section-number">1</span> Shapiro-Wilk Test</h2>
<p><a href="https://en.wikipedia.org/wiki/Shapiro%E2%80%93Wilk_test">Wiki</a></p>
<p><a href="https://bios.unc.edu/~mhudgens/bios/662/2008fall/Backup/wilkshapiro1965.pdf">논문</a></p>
<p>원래는 표본의 크기가 50이하인 작은 데이터 셋의 정규성 검정을 위해 고안됨. R 에서는 3~5천개 사이의 표본까지 다룰 수 있도록 조정됨</p>
<ul>
<li><p>정규 분포 전용 검정: 모든 검정 대비 최고의 검정력을 보임 (Power), 이상치가 있으면 p value가 너무 작아짐</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?H_0">: 데이터가 정규분포를 따른다</p></li>
<li><p><img src="https://latex.codecogs.com/png.latex?H_a">: 데이터가 정규분포를 따르지 않는다.</p></li>
<li><p>검정 통계량 <img src="https://latex.codecogs.com/png.latex?%0A%20%20%20%5Cmathbf%20W=%5Cfrac%7B(%5Csum_%7Bi=1%7D%5E%7Bn%7Da_ix_%7B(i)%7D)%5E2%7D%7B%5Csum_%7Bi=1%7D%5E%7Bn%7D(x_i-%5Coverline%7Bx%7D)%5E2%7D%0A%20%20%20"></p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?a_i"> : 미리 정해진 숫자들, <img src="https://latex.codecogs.com/png.latex?x">의 개수에 의해 정해짐</li>
<li><img src="https://latex.codecogs.com/png.latex?x_%7B(i)%7D"> 들은 순위 표본, 즉 i 번째로 큰 표본</li>
<li>분자는 순서 통계량으로 계산한 정규분포의 분산, 분모는 데이터의 표본 분산 (표본 Sum of Squares)</li>
<li>이미 이론적으로 세팅된 값과 표본 분산의 비율을 보는 것</li>
<li>귀무 가설이 참이면 이론적으로 1 이 나와야 함</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20W%20%5Cin%20(0,1)">, 상관계수의 제곱을 측정한 계량 값이라고 생각해도 된다.<br>
</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%20W"> 값이 1에서 멀어질 수록 정규분포와는 다르게 분포되어 있음을 의미</li>
<li>단점: 너무 민감함, 조그만 달라도 p value가 너무 작게 나와 귀무가설이 기각됨</li>
<li>해결책 : 시각화 기법과 같이 사용해서 보여준다
<ul>
<li>qqplot과 density 같이 사용</li>
</ul></li>
</ul></li>
</ul>
<div class="cell">

</div>
</section>
<section id="blog-guide-map-link" class="level2" data-number="2">
<h2 data-number="2" class="anchored" data-anchor-id="blog-guide-map-link"><span class="header-section-number">2</span> Blog Guide Map Link</h2>
<ul>
<li><a href="../../../../../docs/blog/posts/statistics/guide_map/index.html">Statistics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Engineering/guide_map/index.html">Engineering Blog</a></li>
<li><a href="../../../../../docs/blog/posts/DL/guide_map/index.html">Deep Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/ML/guide_map/index.html">Machine Learning Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Mathmatics/guide_map/index.html">Mathematics Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Patent/guide_map/index.html">Patent Blog</a></li>
<li><a href="../../../../../docs/blog/posts/Validation/guide_map/index.html">Validation Blog</a></li>
</ul>


</section>

 ]]></description>
  <category>Statistics</category>
  <guid>kmink3225.netlify.app/docs/blog/posts/statistics/2023-01-16_normality/index.html</guid>
  <pubDate>Sun, 15 Jan 2023 15:00:00 GMT</pubDate>
</item>
</channel>
</rss>
