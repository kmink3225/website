---
title: "Data Share"
subtitle: DAG Creation, Bash Operator, Task Performance Subject, 
description: |
  template
categories:
  - Engineering
author: Kwangmin Kim
date: 05/01/2023
format: 
  html:
    page-layout: full
    code-fold: true
    toc: true
    number-sections: true
comments: 
  utterances: 
    repo: ./docs/comments
draft: False
---

<ul class="nav nav-pills" id="language-tab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" role="tab" aria-controls="Korean" aria-selected="true">Korean</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" role="tab" aria-controls="knitr" aria-selected="false">English</button>
  </li>

<div class="tab-content" id="language-tabcontent">

<div class="tab-pane fade  show active" id="Korean" role="tabpanel" aria-labelledby="Korean-tab">

::: {#Korean .tab-pane .fade .show .active role="tabpanel" aria-labelledby="Korean-tab"}
# Python 오퍼레이터 With Xcom
## Xcom(Cross Communication)
* Airflow DAG 안 Task 간 데이터 공유를 위해 사용되는 기술
ex) Task1의 수행 중 내용이나 결과를 Task2에서 사용 또는 입력으로 주고 싶은 경우
* 주로 작은 규모의 데이터 공유를 위해 사용
(Xcom 내용은 메타 DB의 xcom 테이블에 값이 저장됨)
1GB 이상의 대용량 데이터 공유를 위해서는 외부 솔루션 사용 필요 (AWS S3, HDFS 등)
# Python 오퍼레이터에서 Xcom 사용하기
* 크게 두 가지 방법으로 Xcom 사용 가능
    1. **kwargs에 존재하는 ti (task_instance) 객체 활용
    ```
    @task(task_id='python_xcom_push_task')
    def xcom_push(**kwargs):
        ti = kwargs['ti']
        ti.xcom_push(key="result1", value="value_1")
        ti.xcom_push(key="result2", value=[1,2,3])
        #template 변수에서 task_instance 라는 객체를 얻을 수 있으며 task_instance 객체가 가진 xcom_push 메서드를 활용할 수 있음

    @task(task_id='python_xcom_pull_task')
    def xcom_pull(**kwargs):
        ti = kwargs['ti']
        value_key1 = ti.xcom_pull(key="result1")
        value_key2 = ti.xcom_pull(key="result2",
        task_ids='python_xcom_push_task')
        print(value_key1)
        print(value_key2)
    ```
    2. 파이썬 함수의 return 값 활용 (1안)
    ```
    @task(task_id='xcom_push_by_return')
    def xcom_push_by_return(**kwargs):
        transaction_value = 'status Good'
        return transaction_value
    @task(task_id='xcom_pull_by_return')
    def xcom_pull_by_return(status, **kwargs):
        print(status)
    xcom_pull_by_return(xcom_push_by_return())
    # 참고) Task 데커레이터 사용시 함수 입력/출력 관계만으로 Task flow 정의가 됨

    @task(task_id='xcom_push_by_return')
    def xcom_push_return(**kwargs):
        transaction_value = 'status Good'
        return transaction_value
        # return 한 값은 자동으로 xcom에 key='return_value', task_ids=task_id 로 저장됨
    @task(task_id='xcom_pull_by_return')
    def xcom_pull_return_by_method(**kwargs):
        ti = kwargs['ti']
        pull_value = ti.xcom_pull(key='return_value', task_ids='xcom_push_by_return')
        # return 한 값을 꺼낼 때는 key를 명시하지 않아도 됨. (자동으로 key=return_value 를 찾음)
        # task_ids='xcom_push_by_return' return한 Task가 여러개 있을 때는 task_ids 를 지정
        print(pull_value)
    xcom_push_by_return() >> xcom_pull_by_return()
    ```
## Summary 
* Xcom push 방법: ti.xcom_push 명시적 사용 + 함수 return
* Xcom pull 방법: ti.xcom_pull 명시적 사용 + return 값을 input으로 사용

# Bash 오퍼레이터 With Xcom

## Bash 오퍼레이터에서 Xcom 사용하기 

* Bash 오퍼레이터는 env, bash_command 파라미터에서 Template 이용하여 push/pull

```
bash_push = BashOperator(
    task_id='bash_push',
    bash_command="echo START && "
                "echo XCOM_PUSHED "
                "{{ ti.xcom_push(key='bash_pushed',value='first_bash_message') }} && "
                "echo COMPLETE" 
                # 마지막 출력문은 자동으로 return_value 에 저장됨
)
bash_pull = BashOperator(
    task_id='bash_pull',
    env={'PUSHED_VALUE':"{{ ti.xcom_pull(key='bash_pushed') }}",
        'RETURN_VALUE':"{{ ti.xcom_pull(task_ids='bash_push') }}"}, 
        # task_ids 만 지정하면 key='return_value' 를 의미함
    bash_command="echo $PUSHED_VALUE && echo $RETURN_VALUE ",
    do_xcom_push=False
)


```

## Summary

* Bash_command에 의해 출력된 값은 자동으로 return_value로 저장된다 (마지막 출력 문장만)
* return_value를 꺼낼 때는 xcom_pull에서 task_ids 값만 줘도 된다.
* 키가 지정된 xcom 값을 꺼낼 때는 key 값만 줘도 된다 (단, 다른 task에서 동일 key로 push 하지 않았을 때만)

# Python & Bash 오퍼레이터 With Xcom
## Python $\rightarrow$ Bash 오퍼레이터 Xcom 전달

```
@task task_id =='python push'
def python_push_xcom
    result_dict = {'status':' Good','data':[1,2,3],'options_cnt': 100}
    return result_dict
bash_pull = BashOperator(
    task_id='bash_pull',
    env={
        'STATUS': '{{ti.xcom_pull(task ids="python push")["status"]}}',
        'DATA': '{{ti.xcom_pull(task ids="python push")["data"]}}',
        'OPTIONS_CNT': '{{ti.xcom_pull(task_ids="python_push")["options_cnt"]}}'
    },
    bash_command = 'echo $STATUS && echo $DATA && echo $OPTIONS_CNT'
)
 
python_push_xcom() >> bash_pull
```
## 2. Bash $\rightarrow$ Python 오퍼레이터 Xcom 전달

```
bash_push = BashOperator(
task_id ='bash_push',
bash_command='echo PUSH_START'
    '{{ti.xcom_push(key="bash_pushed",value=200) }}&& 'echo PUSH_COMPLETE'
)

@task(task_id =='python_pull')
def python_pull_xcom(**kwargs): 
    ti = kwargs ['ti']
    status_value= ti.xcom_pull(key ='bash_pushed')
    return_value= ti.xcom_pull(task_ids ='bash_push')
    print('status_value:'+ str (status_value))
    print('return_value:'+ return_value)
    bash_push>> python_pull_xcom()
```
# Python & Email 오퍼레이터 With Xcom

## Python → Email 오퍼레이터 Xcom 전달
* Email 오퍼레이터는 어떤 파라미터에 Template를 쓸 수 있는가?
* 파라미터
    * to
    * subject
    * html_content
    * files
    * cc
    * bcc
    * nime_subtype
    * mime_charset
    * custom_headers
```
@task(task_id='something_task')
def some_logic(**kwargs):
    from random import choice
    return choice(['Success','Fail'])
send_email = EmailOperator(
    task_id='send_email',
    to='hjkim_sun@naver.com',
    subject='{{ data_interval_end.in_timezone("Asia/Seoul") | ds }} some_logic 처리결과',
    html_content='{{ data_interval_end.in_timezone("Asia/Seoul") | ds }} 처리 결과는 <br> \
        {{ti.xcom_pull(task_ids="something_task")}} 했습니다 <br>'
)

```
# 전역변수 Variable 이용하기

* Xcom: 특정 DAG, 특정 schedule 에 수행되는 Task 간에만 공유
* 모든 DAG 이 공유할 수 있는 전역 변수는 없을까 ?
* Variable 등록하기
    * 실제 Variable 의 Key, Value 값 은 메타 DB 에 저장됨 (variable 테이블)
        1. Variable 라이브러리 이용 , 파이썬 문법을 이용해 미리 가져오기
        ```
        from airflow operators bash import BashOperator
        from airflow models import Variable 
        var_value = Variable.get('sample_key')
        bash_var_1= BashOperator(
            task_id = "bash_var_1",
            bash_command = f "echo variable:{var_value}"" 
        )

        ```
        * 스케줄러의 주기적 DAG 파싱시 Variable.get 개수만큼 DB 연결을 일으켜 불필요한 부하 발생 스케줄러 과부하 원인 중 하나
        2. Jinja 템플릿 이용 , 오퍼레이터 내부에서 가져오기 (권고)
        ```
        from airflow operators bash import BashOperator
        bash_var_2= BashOperator(
            task_id="bash_var_2",
            bash_command= f "echo variable: {{var.value.sample_key}}"
        )
        ```
* 그런데 이 전역변수는 언제 , 어떻게 쓰면 좋을까
    * 협업 환경에서 표준화된 dag 을 만들기 위해 주로 사용. 주로 상수 (CONST) 로 지정해서 사용할 변수들 셋팅
    * 예) base_sh_dir = /opt/airflow/plugins/shell
    * 예) base_file_dir = /opt/airflow/plugins/files
    * 예) email, Alert 메시지를 받을 담당자의 email 주소 정보
:::
</div>

<div class="tab-pane fade" id="English" role="tabpanel" aria-labelledby="English-tab">

::: {#English .tab-pane .fade role="tabpanel" aria-labelledby="English-tab"}

:::


</div>


# Go to Blog Content List

[Blog Content List](../../content_list.qmd)