---
title: "Environment Setting for Airflow"
subtitle: WSL, Docker Installment, Airflow Installment, Development Environment Setting, Python Interpreter Installment, VScode Installment, Git Evnvironment Setting, Airflow Library Installment
description: |
  template
categories:
  - Engineering
author: Kwangmin Kim
date: 05/01/2023
format: 
  html:
    page-layout: full
    code-fold: true
    toc: true
    number-sections: true
comments: 
  utterances: 
    repo: ./docs/comments
draft: False
---

<ul class="nav nav-pills" id="language-tab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" role="tab" aria-controls="Korean" aria-selected="true">Korean</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" role="tab" aria-controls="knitr" aria-selected="false">English</button>
  </li>

<div class="tab-content" id="language-tabcontent">

<div class="tab-pane fade  show active" id="Korean" role="tabpanel" aria-labelledby="Korean-tab">

::: {#Korean .tab-pane .fade .show .active role="tabpanel" aria-labelledby="Korean-tab"}

# WSL Installment

## WSL (Windows Subsystem for Linux)

Windows Subsystem for Linux은 Windows에서 리눅스 실행환경을 지원하는 Windows의 확장 기능

* Windows에서 바로 리눅스 명령어를 실행할 수 있어서, Windows와 리눅스를 함께 사용하는 개발자들에게 편리
* WSL 이전에는 가상 머신 (Virtual Machine, VM)을 많이 사용했었음
    * VM: 컴퓨터 안에 구축된 가상 컴퓨터 개념으로 CPU, Memory, Network Interface, and Storage를 갖춘 온전한 컴퓨터 시스템으로 작동하는 가상환경
    * 하지만 VM은 메모리 overhead가 심한 문제점이 있었음
        * overhead: 컴퓨터가 어떤 연산 및 처리를 하기 위해 들어가는 간접적인 처리시간 메모리등을 말함
        * 예를 들어, VM을 쓰려면 컴퓨터가 디스크와 메모리의 일정 이상 부분을 할당해줘야 VM을 쓸 수 있었음
        * 그래서 VM이 많을 수록 overhead가 심해지는 현상이 발생했는데 WSL 개발 이후로 Linux를 더 가볍게 사용할 수 있게됐음

## Why to install WSL?

* Airflow는 Windows에 직접 설치 불가
* Windows에서 리눅스 작업환경을 만들기 위해서 WSL 설치가 필수
* 여유가 된다면 가상화 VM 또는 Public Cloud (AWS, GCP, Azure)의 컴퓨팅 서비스에서 Linux 및 Airflow 설치 가능

## How to install WSL?

* 설치 전 체크사항 (시작버튼 → 시스템 정보에서 확인)
    * Windows 10 버전 2004 이상
    * Windows 11
* PowerShell 명령어로 설치
    * wsl --install
* ![WSL Install 설명 공식 홈페이지](https://learn.microsoft.com/en-us/windows/wsl/install)
    * Open PowerShell or Windows Command Prompt in administrator mode by right-clicking and selecting "Run as administrator"
    * `wsl --install` 실행
    * Enter New UNIX username/password
    * turn off PowerShell
    * turn on PowerShell again
    * `wsl -l -v` 실행 반드시 version 2가 설치되어 있어야함 (WSL2)
        * WSL1이 설치되었으면 WSL2 업그래이드 해야함 (windows update 해야함)
        * *WSL1은 나중에 사용할 docker가 제대로 작동하지 않음*

## Frequently Used Linux Commands

* `pwd` : (print working directory) 현재 디렉토리 경로 출력
* `ls` : (list) 현재 디렉토리의 파일 목록 출력
    * `ls -a` : -a 옵션은 숨겨진 파일 출력
    * `ls -l` : -l 자세한 정보 출력
    * `ls -al` :  숨김 파일 (.파일명) 까지 볼 수 있음
* `cd` : (change directory) 디렉토리 변경
    * `cd ..` : 상위 디렉토리로 이동
    * `cd ~` or `cd` : 홈 디렉토리로 이동
    * `cd /` : root(최상위) 디렉토리로 이동
* `mkdir` : (make directory) 디렉토리 생성
    * directory와 file의 구분은 `ls -al`에서 파일권한 column에서 맨앞이 file은 `-` directory는 `d`로 표시되어 있음
* `touch` : (touch) 새로운 파일 생성
* `rm` : (remove) 파일 삭제 (디렉토리 포함: 옵션 r, `rm -r`)
    * `rm -rf`: 강제 삭제
* `cp` : (copy) file 및 directory 복사
    * `cp file1-to-copy file2-name-to-be-copied` : `cp file1 file2`
    * `cp -r dir1-to-copy dir2-name-to-be-copied` : `cp dir1 dir2`
* `mv` : (move) 파일 이동 및 이름 변경
    * 파일 이동: `mv file1 dir1`. 이때 dir1은 existing directory
    * 파일명 변경: `mv file2 file3` file2를 file3로 renaming. 이때 file3은 non-existing file
* `tar` : (Tape ARchiver) 파일 및 디렉토리를 압축 (여러 directories 및 files을 하나의 file로 압축) 및 해제
    * 압축 : `tar cvf name.tar file-to-zip` $\rightarrow$ `tar cvf dir_1.tar dir_1`
    * 해제 : `tar xvf name.tar` $\rightarrow$ `tar xvf dir_1.tar`

# Docker Installment

## Docker

* 리눅스내 가상화 관련 커널을 활용하여 어플리케이션을 독립적 환경에서 실행시키는 기술
* 가상화 서버(VM) 대비 Guest OS가 없어 경량화된 가상화 서버로 볼 수 있음
    * VM의 hypervisor요소가 다수의 VM의 Guest OS와 App을 독립적으로 운영될 수 있도록 관리해줌
    * 하지만 VM은 HOST OS의 자원을 할당을 해줘야하는 overhead문제가 있음
    * Docker는 Hypervisor와 Guest OS가 필요없이 Apps을 독립적으로 구동 시킬 수 있음
    * Docker에서는 하나의 App을 container라 부르고 container를 경량화된 가상화 서버라고 생각하면 됨
    * container는 VM만큼 완전히 독립적으로 운영할 수는 없지만 overhead를 최소화한 VM이라고 생각할 수 있음

![Docker Compoenent Architecture](../../../../../images/airflow/docker-installment.PNG)

# Airflow Installment

* Airflow 설치 방법은 여러가지가 존재하며 그 중 하나가 도커 설치임
    * [Docker 설치 링크](https://docs.docker.com/engine/install/ubuntu/)
        * Uninstall old versions: `for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get remove $pkg; done` 실행
        * Install using the apt repository
            * Set up the repository
                * repository update: `sudo apt-get update`
                * Docker 설치에 필요한 사전 libraries: `sudo apt-get install ca-certificates curl gnupg` 실행
                * Add Docker’s official GPG key
                    * `sudo install -m 0755 -d /etc/apt/keyrings`
                    * `curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg`
                    * `sudo chmod a+r /etc/apt/keyrings/docker.gpg`
                * Use the following command to set up the repository:
                    * `echo \ "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \ "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \ sudo tee /etc/apt/sources.list.d/docker.list > /dev/null`
        * Install Docker Engine
            * Update the apt package index: `sudo apt-get update`
            * To install the latest version of community edition (ce), run: `sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin` docker-compose-plugin은 docker-compose 기능을 사용할 수 있게함
        * Verify that the Docker Engine installation is successful by running the hello-world image.
            * `sudo docker run hello-world` : hello world image 다운로드 받음
                * `docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?.` 라고 뜨면 docker demon이 시작이 안되어 있기 때문에 발생하는 에러창. docker demon 띄우면 됨
            * docker demon 실행: `sudo service docker start` WSL2킬때마다 실행해야줘야함
                * 그래도 에러창 뜨면 `sudo service docker status` 실행 시켜 docker demon 켜져있는지 확인
* 도커 컴포즈 (docker compose)를 이용하여 한번에 쉽게 설치 가능
    * [Docker Compose를 이용하여 Airflow 설치 링크](https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html)
    * docker compose: 여러 개의 도커 컨테이너 설정을 한방에 관리하기 위한 도커 확장 기술로 에어플로우를 설치하기 위한 도커 컨테이너 세팅 내용이 들어있음
        * airflow 자체도 여러개의 docker containers로 구성됨
    * Docker Compose를 이용하여 Airflow 설치 링크의 *Fetching docker-compose.yaml* 부터 시작
        * `curl -LfO 'https://airflow.apache.org/docs/apache-airflow/2.6.1/docker-compose.yaml'` 
        * `ls`로 `docker-compose.yaml` 다운로드됐는지 확인
        * `vi *` 로 `docker-compose.yaml` 열어보면 주석처리와 airflow의 설정내용들을 확인할 수 있다.
    * Setting the right Airflow user
        * directories 만들기: `mkdir -p ./dags ./logs ./plugins ./config`
        * .env 파일 만들기: `echo -e "AIRFLOW_UID=$(id -u)" > .env`
        * `vi .env`: `AIRFLOW_UID=1000` 인 이유는 OS 계정의 uid가 1000이라는 뜻
    * Initialize the database
        * `sudo docker compose up airflow-init`: `sudo` 반드시 앞에 붙여야함. `exited with code 0`가 떠야 정상적으로 설치 된 것임
    * Running Airflow
        * service 띄우기: `sudo docker compose up` 실행. `sudo` 반드시 앞에 붙여야함.
        * http 상태가 계속해서 업데이트 되야 airflow가 돌아가고 있는 것임. 계속해서 update되는 http command 닫으면 airflow멈춤. 두번째 터미널 열어서 작업해야함
        * 두 분째 터미널 열고 `sudo docker ps` 실행하여 container list 상태 확인. 총 6개 올라와야 정상
            * airflow-airflow-worker-1
            * airflow-airflow-triggerer-1
            * airflow-airflow-webserver-1
            * airflow-airflow-scheduler-1
            * airflow-postgres-1
            * airflow-redis-1
        * 웹 브라우저 창에 `localhost:8080` 입력하여 airflow service창에 접속
            * default ID/PW: airflow/airflow
            * 웹 브라우저에서 local로 airflow service 접속 원리
                * 웹 브라우저는 local PC에 있음
                * airflow는 WSL안에 docker container로 실행되고 있음
                * 이렇게 2개의 다른 공간이 연결될 수 있는 이유는 WSL은 기본적으로 local PC의 local host IP와 연결이 되어 있음
                * 그래서 웹 브라우저에서 local로 `localhost:8080` 라고 입력하면 WSL에서 8080 port를 입력하는 것과 같은 효과가 있기 때문에 local 웹브라우저에서 WSL container로 들어갈 수 있는 것임.
            * sample DAGs이 만들어져 있는 것을 확인 할 수 있음
        * example_bash_operator DAG을 들어가 보면
            * Grid: 수행 이력을 보여주는 tab
                * DAG 이름 example_bash_operator 옆에 pause toggle를 활성화 시키면 unpaused 됨
                * Auto-regresh toggle 활성화 시키면 DAG이 한번 돌아감
            * Graph: DAG을 구성하고 있는 tasks를 보여주는 tab. 각 각의 task가 색 별로 상태를 보여주고 있음
            * Calendar: 참고할 것
            * Task Duration: 참고할 것
            * Task Tries: 참고할 것
            * Landing Times: 참고할 것
            * Gantt: 참고할 것
            * Details: 참고할 것
            * Code: DAG을 구성하고 있는 python code를 볼 수 있음
            * Audit Log: 참고할 것


# Airflow Development Environment Setting

## 개발 환경 권장 사양

* CPU: 4Core 이상
* Memory: 16GB (권장-문제없음) / 8GB (최소-약간 버벅 거림)
* WSL에서 다수의 컨테이너 실행시 메모리 점유율 상승할 수 있음
    * airflow service창과 WSL 창 닫고 다시 키면 어느 정도 메로리 점유율 낮아짐

## 개발 환경 workflow

* user가 만든 DAG이 airflow까지 전달되는 workflow가 아래와 같이 묘사되어 있다.

![개발 환경 workflow](../../../../../images/airflow/development-workflow.PNG)

* 위의 그림에서 보면 6 containers가 있고 airflow setting 할때 `dags`, `logs`, `plugins`, `config` directories를 만들었는데 모두 airflow containers에 연결되어 있음
    * mount 의미: directory안에 file을 넣으면 containers가 file을 인식할 수 있음
    * **user가 만든 dag을 dags directory에 넣으면 airflow container가 dags안에 있는 dag을 인식하여 서비스에 띄어줌**
* 개발환경 세팅의 목표
    - 로컬 환경에서 만든 dag을 dags directory에 배포하여 containers가 user가 만든 dag을 인식하여 airflow서비스까지 띄우는 것이 목표
    - **다시 말해서, 그냥 로컬 환경에서 만든 dag을 dags directory에 배포하면 됨**
* Actions
    1. 로컬 컴퓨터에 python interpreter 설치
        * **아무 python version을 설치하면 안되고 airflow containers가 쓰고있는 python version과 일치시켜야 함!**
    2. IDE Tool(VScode) 개발환경 설정
    3. Github 레파지토리 생성
    4. 로컬 컴퓨터에 Python Airflow Libraries 설치
    5. WSL에 Git 설치 및 git pull이 가능한 환경구성
        * git repository에 DAG을 만들어 push하여 dags directory에 pull이 되어 dag이 들어가게 하면 됨.

## Python Interpreter Installment

* Actions
    1. 컨테이너에서 사용하는 파이썬 버전 확인
        * container안에 들어가기: `sudo docker exec -it {container-name or container-id} 명령어` $\rightarrow$ `sudo docker exec -it airflow-airflow-worker-1 bash`: `-it`는 session이 안 끊어지도록 유지해주는 옵션
        * `python -V` 실행하여 python version 확인 : 현재 나의 python version은 `Python 3.7.16`
        * `ctrl D`로 exit
    2. 파이썬 인터프리터 다운로드 (https://www.python.org/downloads/)
        * 보안상의 업데이트 말곤 기능이 같기 때문에 `Python 3.7.16`대신 `Python 3.7.9` 설치하면 됨 
    3. 로컬 컴퓨터에 파이썬 설치
        * conda에 설치하고 싶으면 `conda create -n airflow python=3.7.9` or 
        * global 환경에 설치하고 싶으면 [Windows x86-64 executable installer](https://www.python.org/downloads/release/python-379/) 다운로드 및 설치

## VScode Installment

* VScode란?
    - Microsoft사에서 2015년에 제작, 다양한 언어 개발을 돕는 IDE tool
    - Visual Studio 라는 IDE 툴과는 엄연히 다른 툴
* Actions
    1. [VScode 다운로드](https://code.visualstudio.com/download)
        * 설치 마법사에서 추가 작업 선택란에 code로 열기 작업을 windows탐색기 파일의 상황에 맞는 메뉴에 추가 선택할 것. programming file을 열때 VScode가 디폴트가 되도록함
    2. VScode 설치, 파이썬 확장팩 설치
    3. 프로젝트 생성, 파이썬 가상환경 설정
        * VScode가 file이나 directory단위로 관리하는 IDE tool이라 프로젝트 생성 개념이 없음
        * windows에 프로젝트 directory하나 만들고 VScode에서 open folder로 열면 그 folder를 최상위 folder로 인식 (project 생성됨)
    4. python interpreter 설정
        * VScode > Terminal > New Terminal > python version 확인
* 파이썬 가상환경
    - 라이브러리 버전 충돌 방지를 위해 설치/사용되는 파이썬 인터프리터 환경을 격리시키는 기술
    - 파이썬은 라이브러리 설치 시점에 따라서도 설치되는 버전이 상이한 경우가 많음
    ![가상 환경의 필요성](../../../../../images/airflow/virtual-environment.PNG)
    - python을 global 환경에 설치할 경우 위의 그림처럼 C,D프로젝트가 동시에 진행될 때 둘 중하나의 library version이 차이가 나면 old version의 library 로 진행되는 프로젝트는 에러가 발생함 
        - 2개의 다른 프로젝트가 같은 python interpreter를 바라보고 library를 설치하기 때문에 종속성 문제가 생김 (library 충돌 발생)
        - 그래서 다른 가상환경 venv안에 다른 프로젝트를 할당해서 독립적으로 프로젝트를 진행하는게 일반적임
    - python 가상환경 만들기
        - conda로 만들 경우 conda 설치 후 만들면 됨. [설치 링크](https://github.com/conda-forge/miniforge)
        - python에 있는 가상환경 생성 기능으로 만들 경우 `python -m airflow ./venv` 실행
            * `./venv` directory에 python 설치하고 version 관리하겠다는 의미
    - VScode가 python 가상환경 참조하도록 설정
        *  help>show all commands or `ctrl+shift+p` 누른후 `interpreter` 입력하여 가상환경에 있는 python 클릭
    - terminal 에서 가상환경 잘 잡혔는지 확인


## Git Environment Setting

* version 관리 솔루션
    * programming시 version관리 하기 위해 만들어진 시스템
    * 중앙형 솔루션
        * 다수의 user가 원격에 있는 repository에 commit 모든 update는 중앙 repository에 최신화 됨. 
        * 만약, 다수의 유저가 동일한 파일의 동일한 내용을 최신화시켜 commit하면 중앙 repository에 충돌이 발생
        * 대표적인 예로 SVN이 있음
    * 분산형 솔루현
        * 다수의 user가 본인들의 local repository에 commit 모든 update는 local repository에 최신화 됨. 
        * 만약, 다수의 유저가 동일한 파일의 동일한 내용을 최신화시켜 commit하면 local repository에 최신화시키기 떄문에 충돌이 발생하지 않음
        * 한 user가 코드 공유를 하기 위해 원격 repository에 commited updates를 push
        * 다른 user가 최신화된 원격 중앙 repository로부터 updates를 pull 받아 자신의 local repository를 최신화 시킴
        * 만약 다수의 user가 같은 file의 같은 부분을 최신화 시켰다고 해도 local repository에서 충돌이 발생했기 때문에 원격 repository는 온전함
        * 원격 repository는 코드 공유를 위한 저장소의 역할을 할 뿐이다.
        * 대표적인 예로 Git이 있음
* Github Repository 생성
    * Git vs Github
        - Git: 오픈소스 분산형 버전관리 solution, 시스템 또는 프로그램
        - Github: Git을 기반으로 소스를 공유할 수 있도록 만들어진 웹 서비스
    * Git 레파지토리: Github 에서 생성(https://github.com)
* Git Push & Pull
    ![Git Workflow](../../../../../images/airflow/git-docker.PNG)
* [Git 설치 링크](https://git-scm.com/downloads)
* Git Repository 생성
    * github에서 new repository 생성: remote 환경에 repository 생성
    * `git init`: local PC(환경)에 respository 생성. remote repository와 연동시킬 local folder를 만들고 command창에서 해당 위치로 이동후 실행
    * `git status`: local repository의 git status 확인
    * `touch .gitignore`: .gitignore파일이 생성되고 그 안에 commit되지 않기를 바라는 파일명 및 확장자 명을 기입한다.
    * `git add .gitignore`: stage .gitignore(git에 .gitignore가 최신화되었다는 것을 알려줌)
    * `git commit -m "message"`: local repository에 변경사항을 기록을 함 
        * 최초 commit 시 email과 user name을 등록시켜야할 수 있다.
        * `git config --global user.email "abd@sdfsd.com"` 입력
        * `git config --global user.name "name"` 입력
    * `git log`: commit을 하게 되면 log에 남음
    * `git branch -M main`: branch는 local repository의 version. branch를 여러개 둘 수 있는데 각 각 독립적으로 움직인다. 보통 운영용 branch와 개발용 branch를 나눠서 repository를 관리한다.
        * 개발용 branch로 개발 및 코드 공유를 하고 이상이 없다고 판단될 경우 운영용 branch에 merge를 한다.
        * local repository에 merge된 운영용 branch를 최종적으로 remote repository의 운영용 branch에 push한다. 
    * `git remote add origin https://github.com/kmink3225/airflow.git`: local repository와 remote repository를 연동 시켜 주는 것.
    * `git push -u origin master`
* WSL환경에서 remote git reposiotry pull 할 것
    * `git clone {repository address}`: remote git repository를 그대로 복제해서 내려 받음

## Airflow Library Installment

* Airflow 라이브러리 설치 대상과 설치 이유
    * 설치 대상: 로컬 컴퓨터의 파이썬 가상환경(본인의 경우: airflow)
    * Why? Airflow DAG 개발을 위해 Airflow의 python class files 및 라이브러리들이 많기 때문에 필요
* [Airflow 라이브러리 설치 가이드](https://airflow.apache.org/docs/apache-airflow/stable/installation/installing-from-pypi.html)
    * `conda activate airflow` 가상환경으로 들어감
    * `pip install "apache-airflow[celery]==2.6.1" --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-2.6.1/constraints-3.7.txt"`
* 리눅스에서 파이썬 Airflow 라이브러리 설치시 그 자체로 Airflow 서비스 사용 가능
    * 하지만 WSL에서 pip install 명령으로 Airflow를 설치하지 않는 이유?
    * pip install 로 Airflow 설치시 저사양의 아키텍처로 설치되며 여러 제약이 존재함 (Task를 한번에 1개씩만 실행 가능 등)
    * 그러므로 docker로 설치해야 제약이 없음
:::
</div>

<div class="tab-pane fade" id="English" role="tabpanel" aria-labelledby="English-tab">

::: {#English .tab-pane .fade role="tabpanel" aria-labelledby="English-tab"}

:::


</div>


# Go to Blog Content List

[Blog Content List](../../content_list.qmd)