---
title: "FDA Software Validation Guidance Presentation"
subtitle: "Source: General Principles of Software Validation"
date: 2022-12-28
author: "Kwangmin Kim"
description: |
  The purpose of this article is to help understand the summary of the 'General Principles of the 'Software Validation; Final Guidance for Industry and FDA Staff' document issued on 2002-01-11. This article provides short sentences with many diagrams for intuitive understanding.  
categories:
  - Surveilance
theme: dark
toc: true
format: 
  html:
    page-layout: full
    code-fold: true

---

## Table of Contents

::: columns
::: {.column width="34%"}
1. Notice
1. Last Update
1. Introduction
	1. Definition of SW Validation
	1. Some Terminology
	1. Rationale
	1. Objective of SW Validation
	1. What to validate
	1. Main Institutions
1. Quality System Regulation
1. Verification
1. Validation
1. Benefits and Difficulty in SW V&V
1. SW Development as Part of System Design
	1. Overview
	1. Design Reveiw
:::
::: {.column width="33%"}
9. Validation Pinciples
	1. Overview
	1. Conditions
	1. Planning
	1. After SW Change
	1. SW Lifecycle
9. SW Lifecycle Tasks
	1. Overview
	1. Quality Planning
	1. Configuration Management
	1. Task Requirements
	1. Design Overview
		1. Design Consideration
		1. Design Specification
		1. Design Activity and Task
:::
::: {.column width="33%"}

11. Testing Tasks
	1. Overview
	1. Consideration Before Testing Tasks
	1. Code Based Testing
	1. Solution to White Box Testing
	1. Development Testing
	1. User Site Testing
		1. Overview
		1. Testing
11. Maintenance and SW Changes
11. Validation of Quality System SW
	1. Overview
	1. Factors in Validation
:::
:::


## Notice

* I am so sorry not for providing a compfortab visualization. Although I have tried to use *revealjs* provided in the guide section in the *Quarto* website, I am still clumsy at handling it. I will update this article as I get proficient at *revealjs* using *Quarto*. *(it seems that Quarto system has some issues on mermaid diagrams.)*
* The FDA validation guidance document is a bit difficult to understand because its explanations provide abstract, general, and present broad cocepts. For this reason, I compiled and made a summary of the document with many diagrams. However, some diagrams are too small to see. Please, **scroll up your mouse wheel with the 'Ctrl' key on your keyboard pressed to zoom in on the small text in the diagrams**.
* (Writing in Progress) It is hard to say that this version of summary is suitable for representing and covering the original document. Some of the content of this document has been excluded for personal use (less than 10% of it have been excluded).

### Last Update
* 2022-12-28, [Summary of Document](../2022-12-10_FDA_sw_general_guidance/index.qmd)

## Introduction

### Definition of Software Validation
Software Validation is **a requirement of the Quality System regulation**, which was published in the Federal Register on October 7, 1996 and took effect on June 1, 1997.  
(See Title 21 Code of Federal Regulations (CFR) Part 820, and 61 Federal Register (FR) 52602, respectively.)

### Some Terminology
The medical device Quality System regulation (21 CFR 820.3(k)) defines 

* "establish" = "define, document, and implement" 
* "establish" = "established"
* Confusing terminology: requirements, specification, verification, and validation.

### Rationale

FDA has reported the following analysis:

* 242 of 3140 (7.7%) medical device recalls between 1992 and 1998 are attributable to software failures.
* 192 of the 242 (79.3%) failures were caused by software defects that were introduced when changes were made to the software after its initial production and distribution.
* The software validation check is a principal means of avoiding such defects and resultant recalls.

### Objective of SW validation is to ensure

* accuracy
* reliability
* consistent intended performance, and 
* the ability to discern invalid or altered records.

### What to validate

**Any software** used to automate device design, testing, component acceptance, manufacturing, labeling, packaging, distribution, complaint handling, or to automate any other aspect of the quality system, including any off-the-shelf software.

### Main Institutions

* Center for Devices and Radiological Health (CDRH)
* U.S. Department Of Health and Human Services
* Food and Drug Administration
* Center for Biologics Evaluation and Research

## Quality System Regulation

The guidance reflects that the minimum list of the relavant scientific and legal requirements that you must comply with.

```{mermaid}
%%| fig-width: 8

flowchart TB
	subgraph Quality_System_Regulation
		direction LR
		subgraph Requirement
			direction TB
            user_requirements
		end
        subgraph Specification
           direction TB
           document_user_requirements 
        end 
        subgraph Verification
           direction TB
           verify_spacified_requirements
        end
        subgraph Validation
           direction TB
           Confirmation_by_Examinations
           Provision_of_objective_3evidences
        end
        Requirement--> Specification --> Verification --> Validation                    
    end
    subgraph First_Detail
        direction TB
        subgraph User_Requirement
            direction TB
            any_need_for_customer---
            any_need_for_system---
            any_need_for_software
        end
            subgraph Document_User_Requirement
            direction TB
            define_means_for_requirements---
          define_criteria_for_requirements
        end         
        subgraph Verify_Spacified_Requirement
            direction TB
            Objective_Evidence--->|needs|Software_Testing
        end
        subgraph SW_Validation
            direction TB
            subgraph Confirmation_by_Examination
            direction TB
                subgraph Examination_List_of_SW_LifeCycle
                    direction TB
                    comprehensiveness_of_software_testing---
                    inspection_verification_test---
                    analysis_verification_test---
                    other_varification_tests	
                end	
            end             
            subgraph Provision_of_Objective_3evidences
                direction TB
                Software_specifications_conformity---
                Consistent_SW_Implementation---
                Correctness_Completeness_Traceability
            end
        end
        Requirement---User_Requirement
        Specification---Document_User_Requirement
        Verification---Verify_Spacified_Requirement
        Confirmation_by_Examinations---Confirmation_by_Examination
        Provision_of_objective_3evidences---Provision_of_Objective_3evidences             
    end
```

## Verification

```{mermaid}
%%| fig-width: 8

flowchart LR
    subgraph Objective_Evidence
        direction LR
        subgraph Design_Outputs_of_SW_life_cycle_for_Specified_Requirements
		    direction TB
		    Consistency---
		    Completeness---
		    Correctness---
		    Documentation
		end       
        subgraph Software_Testing
			direction LR
			subgraph Testing_Environments
				direction TB
				satisfaction_for_input_requirements
				satisfaction_for_input_requirements---Simulated_Use_Environment
				subgraph User_Site_Testing
					direction TB							
					Installation_Qualification---
					Operational_Qualification---
					Performance_Qualification
				end
			end
			satisfaction_for_input_requirements---User_Site_Testing
			subgraph Testing_Activities
				direction TB
				static_analyses---
				dynamic_analyses---
				code_and_document_inspections---
				walkthroughs
			end	
		Testing_Environments-->Testing_Activities
		end
    Design_Outputs_of_SW_life_cycle_for_Specified_Requirements-->Software_Testing-->Testing_Activities
end    

```

* Installation_Qualification (IQ): documentation of correct installations according to requirements, specifications, vendor’s recommendations, and the FDA’s guidance for all hardware, software, equipment and systems.
* Operational_Qualification (OQ): establishment of confidence that the software shows constant performances according to specified requirements. 
* Performance_Qualification (PQ): confirmation of the performance in the intended use according to the specified requirements for functionality and safety throughout the SW life cycle.

## Validation

```{mermaid}
%%| fig-width: 8
flowchart LR
    subgraph Validation
    direction LR
	    subgraph Confirmation_by_Examination
	    	direction TB
	    	subgraph Examination_List_at_each_stage_of_SW_Life_Cycle
	    		direction TB
	    		comprehensiveness_of_software_testing---
	    		inspection_verification_test---
	    		analysis_verification_test---
	    		other_varification_tests	
	    	end	
	    end
	    subgraph Provision_of_objective_3evidences
	    	direction TB
	    	subgraph Software_specifications_conform_to
	    		direction TB
	    		user_needs 
	    		intended_uses
	    	end
	    	subgraph Consistent_SW_Implementation
	    		direction TB
	    		particular_requirements
	    	end
	    	subgraph Correctness_Completeness_Traceability
	    		direction TB
	    		correct_complete_implementation_by_all_SW_requirements---
	    		traceable_to_system_requirements
	    	end
	    	Software_specifications_conform_to---
	    	Consistent_SW_Implementation---
	    	Correctness_Completeness_Traceability
	    end
	    Confirmation_by_Examination-->
	    Provision_of_objective_3evidences
    end



```

* A conclusion that software is validated is highly dependent upon comprehensive software testing, inspections, analyses, and other verification tasks performed at each stage of the software development life cycle.
* Testing of device software functionality in a simulated* use environment, and user site testing are typically included as components of an overall design validation program for a software automated device.

## Benefits and Difficulty of SW V&V

### Benefits of SW V&V
* Increase the usability and reliability of the device,
* Resulting in decreased failure rates, fewer recalls and corrective actions, less risk to patients and users, and reduced liability to device manufacturers.
* Reduce long term costs by making V&V easier and less costly to reliably modify software and revalidate software changes.

### Difficulty in SW V&V
* a developer cannot test forever, and
    * it is difficult to know how much evidence is enough.
    * a matter of developing a **level of confidence** that the device meets all requirements
* Considerations for an acceptable level of confidence
* measures and estimates such as defects found in specifications documents
* testing coverage, and other techniques are all used before shipping the product.
* a level of confidence varies depending upon the safety risk (hazard) of a SW or device

## SW Development as Part of System Design

### Overview
```{mermaid}
%%| fig-width: 8

flowchart LR
    subgraph Design_Review
        direction LR
        purpose_design_review---
        design_review_types---
        design_review_requirements---
        design_review_outputs
    end
```

Software validation must be considered within the context of the overall design validation for the system. A documented requirements specification represents

* user’s needs
* intended uses from which the product is developed.

**A primary goal of SW validation is to demonstrate that all completed SW products comply with all documented requirements**.


### Design Review

```{mermaid}
%%| fig-width: 8

flowchart LR
    subgraph Design_Review
        direction LR
        subgraph Purpose_Design_Review
	    	direction TB
	    	documented_structured_comprehensive_systematic_examinations---
            adequacy_of_design_requirements---
	    	capability_of_design_for_requirements---
            identification_of_problem	
	    end
	    subgraph Design_Reivew_Types
	    	direction TB
            subgraph Formal_Design_Review
	    	    direction TB
	    	    3rd_parties_outside_development_team
	        end
            subgraph Informal_Design_Review
	            direction TB
                within_development_team
            end
        Formal_Design_Review---Informal_Design_Review    
        end
	    subgraph Design_Review_Requirements
	    	direction TB
               necessary_at_least_one_formal_design_review---
               optinal_informal_design_review---
               recommended_multiple_design_reviews
        end
	    subgraph Formal_Design_Review_Outputs
	    	direction TB
            more_than_10_outputs
        end
	    Purpose_Design_Review--> Design_Reivew_Types--> Design_Review_Requirements
	    Design_Review_Requirements-->Formal_Design_Review_Outputs
    end

```

* Design review is a primary tool for managing and evaluating development projects.
* At least one formal design review must be conducted during the device design process.
* It is recommended that multiple design reviews be conducted.
* Problems found at this point can 
	* be resolved more easily, 
	* save time and money, and 
	* reduce the likelihood of missing a critical issue.

## Validation Principles

### Overview

```{mermaid}
%%| fig-width: 8
flowchart LR
  subgraph Validation_Principles
		direction LR
		subgraph Validation_Starting_Point
			direction TB
			during_design_planning---
			during_development_planning---
			all_results_should_be_supported_by_evidence_collected_from_planning_SW_lifecylce
		end
		subgraph Validation_Conditions
			direction TB
			Requirements---Estabilishment_Confidence---SW_Lifecycle
		end

		subgraph Validation_Planning
			direction TB
			Specify_Areas
			subgraph Validation_Coverage
                direction TB
	        end
			subgraph Validation_Process_Establishment
				direction TB
			end
		Specify_Areas---Validation_Coverage---Validation_Process_Establishment
		end

		subgraph After_Self_Validation
			direction TB
			subgraph Validation_After_SW_Change
        direction TB
	    end

		subgraph Independence_of_Review
        direction TB

	    end
		Validation_After_SW_Change---Independence_of_Review
		end
			Validation_Starting_Point-->Validation_Conditions-->Validation_Planning-->
After_Self_Validation
	end
```

* Preparation for software validation should begin as early as possible because the final conclusion that the software is validated should be based on evidence collected from planned efforts conducted throughout the software lifecycle.


### Conditions
```{mermaid}
%%| fig-width: 8
flowchart LR

subgraph Validation_Conditions
	direction LR
	subgraph SW_Requirments
		direction TB
		subgraph Documented_SW_Requirments_Specification
		    direction TB
            Baseline_Provision_for_V&V---
		    establishment_of_software_requirements_specification
		end
	end
	subgraph Estabilishment_Confidence
	    direction TB
			mixture_of_methods_techinques---
			preventing_SW_errors---
			detecting_SW_errors					
	end
    subgraph SW_Lifecycle
	    direction TB
	    validation_must_be_conducted_within_established_environment_across_lifecycle---
		lifecycle_contains_SW_engineering_tasks_and_documentation---
        V&V_tasks_must_reflect_intended_use
	end
end
SW_Requirments---Estabilishment_Confidence---SW_Lifecycle
```

### Planning
```{mermaid}
%%| fig-width: 8
flowchart LR
	subgraph Validation_Planning
		direction LR
		define_what_to_accomplish
		subgraph Specify_Areas
			direction TB
			scope---
			approach---
			resources---
			schedules_activities---
			types_activitieis---
			extent_of_activities---
			tasks---
			work_items
		end
			define_what_to_accomplish-->Specify_Areas
		subgraph Validation_Coverage
               direction TB
            depending_on_SW_complexity_of_SW_design---
			depending_on_safety_risk_for_specified_intended_use---
			select_activities_tasks_work_items_for_complexity_safety_risk
        end
		subgraph Validation_Process_Establishment
			direction TB
            establish_how_to_conduct-->
			identify_sequence_of_specific_actions-->
			identify_specific_activitieis-->
			identify_specific_tasks-->
			identify_specific_work_items
		end
	Specify_Areas-->Validation_Coverage-->Validation_Process_Establishment
	end
```

### After SW Change
```{mermaid}
%%| fig-width: 8
flowchart LR

subgraph After_Self_Validation
	direction LR
	subgraph Validation_After_SW_Change
        direction TB
        determine_extent_of_change_on_entire_SW_system-->
		determine_impact_of_change_on_entire_SW_system-->
		conduct_SW_regression_testing_on_unchanged_but_vulnerable_modules
	end
	subgraph Independence_of_Review
        direction TB
        follow_basic_quality_assurance_precept_of_independence_of_review---
		avoid_self_validation---
		should_conduct_contracted_3rd_party_independent_V&V---
		or_conduct_blind_test_with_internal_staff
	end
	Validation_After_SW_Change---Independence_of_Review
end
	
```

### SW Lifecycle

```{mermaid}
%%| fig-width: 8

flowchart LR
subgraph SW_Lifecycle
    direction TB
    validation_must_be_conducted_within_the_established_environment_across_lifecycle---
    lifecycle_contains_SW_engineering_tasks_and_documentation---
    V&V_tasks_must_reflect_intended_use
end

subgraph SW_Lifecycle_Activities
    direction TB
    subgraph should_establish_lifecycle_model
		direction TB
		subgraph SW_Lifecycle_Model_List_Defined_in_FDA
            direction TB
            waterfall---
            spiral---
            rapid_prototyping---
            incremental_development---
            etc
	    end		
	end
	subgraph should_cover_SW_birth_to_retirement
		direction TB
		subgraph Lifecycle_Activities
            direction TB
            Quality_Plan-->
            System_Requirements_Definition-->
            Detailed_Software_Requirements_Specification-->
            Software_Design_Specification-->
            Construction_or_Coding-->
            Testing-->
            Installation-->
            Operation_and_Support-->
            Maintenance-->
            Retirement
        end
	end
    should_establish_lifecycle_model-->should_cover_SW_birth_to_retirement
    should_cover_SW_birth_to_retirement-->Lifecycle_Activities
end
subgraph SW_Lifecycle_Tasks
    direction TB
    should_define_and_document_risk_related_tasks---
    should_define_and_document_which_tasks_are_appropriate_in_vice_versa---
    Quality_Planning---
    Quality_Planning_Tasks---
    Inclusion_Task_List_for_Plan---
    Identification_Task_List_for_Plan---
    Configuration_Management---
    Control---
    Management---
    Procedures---
    ensure_proper_communications_and_documentation---
    Task_Requirements
end
SW_Lifecycle-->SW_Lifecycle_Activities-->SW_Lifecycle_Tasks
	
```



## SW Lifecycle Tasks

### Overview

```{mermaid}
%%| fig-width: 8
 
flowchart TB

subgraph SW_Lifecycle_Tasks
    direction LR
	subgraph Define_and_Document_List
		direction TB
		risk_related_tasks---
		whether_or_not_tasks_are_appropriate
	end
	
	subgraph Quality_Planning
		direction TB
		subgraph Quality_Planning_Tasks
			direction TB
		
		end
		subgraph Inclusion_List_for_Plan
			direction TB
			
		end
		subgraph Identification_List_for_Plan
			direction TB
			
		end
	Quality_Planning_Tasks-->Inclusion_List_for_Plan-->Identification_List_for_Plan
	end
	
	subgraph Configuration_Management
		direction TB
		subgraph Control
			direction TB
			
		end
		subgraph Management
			direction TB
		end
		subgraph Procedures
			direction TB
		end
		ensure_proper_communications_and_documentation
		Control-->Management-->Procedures-->ensure_proper_communications_and_documentation 
	end
	subgraph Task_Requirements
		direction TB
		identification---
		analysis---
		predetermined_documentation_about_device_its_intended_use---
		Requirements_Specification_List---
		Verfification_List_by_Evaluation---
		Requirements_Tasks	  
	end
Define_and_Document_List-->Quality_Planning-->Configuration_Management-->Task_Requirements
end		
```

### Quality Planning

```{mermaid}
%%| fig-width: 8
flowchart TB
subgraph Quality_Planning
	direction LR
	subgraph Quality_Planning_Tasks
		direction TB
        Risk_Hazard_Management_Plan---
		Configuration_Management_Plan---
		Software_Quality_Assurance_Plan---
		Software_Verification_and_Validation_Plan---
		Verification_and_Validation_Tasks---
		Acceptance_Criteria---
		Schedule_and_Resource_Allocation_for_V&V_activities---
		Reporting_Requirements---
		Formal_Design_Review_Requirements---
		Other_Technical_Review_Requirements---
		Problem_Reporting_and_Resolution_Procedures---
		Other_Support_Activities
	end
	subgraph Inclusion_List_for_Plan
		direction TB
        specific_tasks_for_each_life_cycle_activity---
    	Enumeration_of_important_quality_factors--- 
    	like_reliability_maintainability_usability---
    	Methods_and_procedures_for_each_task---
    	Task_acceptance_criteria---
    	Criteria_for_defining_and_documenting_outputs_for_input_requirements---
    	Inputs_for_each_task---
    	Outputs_from_each_task---
    	Roles_resources_and_responsibilities_for_each_task---
    	Risks_and_assumptions---
    	Documentation_of_user_needs    
	end
	subgraph Identification_List_for_Plan
		direction TB
		personnel---
		facility_and_equipment_resources_for_each_task---
		role_that_risk_hazard_management		
	end
Quality_Planning_Tasks-->Inclusion_List_for_Plan-->Identification_List_for_Plan
end
```

### Configuration Management

```{mermaid}
%%| fig-width: 8
flowchart LR
subgraph Configuration_Management
	direction LR
	subgraph Control
		direction TB
		control_multiple_parallel_development_activities---
		ensure_positive_and_correct_correspondence_of---
		specifications_documents---
		source_code---
		object_code---
		test_suites---
		ensure_accurate_identification_of_approved_versions---
		ensure_access_to_approved_versions---
		create_procedures_for_reporting---
		create_procedures_for_resolving_SW_anomalies							
	end
	subgraph Management
		direction TB
		identify_reports---
		specify_contents---
		specify_format---
		specify_responsible_organizational_elements_for_each_report
	end
	subgraph Procedures
		direction TB
		necessary_for_review_of_SW_development_results---
		necessary_for_approval_of_SW_development_results
	end
	ensure_proper_communications_and_documentation
	Control-->Management-->Procedures-->ensure_proper_communications_and_documentation 
end
```


### Task Requirements

```{mermaid}
%%| fig-width: 8

flowchart TB
	subgraph Task_Requirements
		direction LR
		subgraph group
			direction TB
			identification---
			analysis---
			predetermined_documentation_about_device_its_intended_use
		end
		
		subgraph Requirements_Specification_List
			direction TB
			All_software_system_inputs---
			All_software_system_outputs---
			All_functions_that_software_system_will_perform---
			All_performance_requirements_that_software_will_meet---
			requirement_example_data_throughput_reliability_timing---
			definition_of_all_external_and_user_interfaces---
			any_internal_software_to_system_interfaces---
			How_users_will_interact_with_system---
			What_constitutes_error---
			how_errors_should_be_handled---
			Required_response_times---
			Intended_operating_environment_for_software---
			All_acceptable_ranges_limits_defaults_specific_values---
			All_safety_related_requirements_that_will_be_implemented_in_SW---
			All_safety_related_specifications_that_will_be_implemented_in_SW---
			All_safety_related_features_that_will_be_implemented_in_SW---
			All_safety_related_functions_that_will_be_implemented_in_SW---
			clearly_identify_potential_hazards---
			risk_evaluation_for_accuracy---
			risk_evaluation_for_completeness---
			risk_evaluation_for_consistency---
			risk_evaluation_for_testability---
			risk_evaluation_for_correctness---
			risk_evaluation_for_clarity
		end
		subgraph Verfification_List_by_Evaluation
			direction TB
			no_internal_inconsistencies_among_requirements---
			All_of_performance_requirements_for_system---
			Complete_correct_Fault_tolerance_safety_security_requirements---
			Accurate_Complete_Allocation_of_software_functions---
			Appropriate_Software_requirements_for_system_hazards---
			mesurable_requirements---
			objectively_verifiable_requirements---
			traceable_requirements
		end
		subgraph Requirements_Tasks
			direction TB
			Preliminary_Risk_Analysis---
			Traceability_Analysis---
			ex_Software_Requirements_to_System_Requirements_vice_versa---
			ex_Software_Requirements_to_Risk_Analysis---
			Description_of_User_Characteristics---
			Listing_of_Characteristics_and_Limitations_of_Memory---
			Software_Requirements_Evaluation---
			Software_User_Interface_Requirements_Analysis---
			System_Test_Plan_Generation---
			Acceptance_Test_Plan_Generation---
			Ambiguity_Review_or_Analysis
		end
	group-->Requirements_Specification_List 
	Verfification_List_by_Evaluation-->Requirements_Tasks
	end
```

### Design Overview


```{mermaid}
%%| fig-width: 8

flowchart TB
	subgraph Deign_Task
		direction LR
    subgraph Design_Consideration_List
        direction TB
        subgraph Description
					direction TB
				end
        subgraph Human_Factors_Engineering
          direction TB
    
        end
        subgraph Safety_Usability_Issues_Conisderation
            direction TB

    		end
		Description---Human_Factors_Engineering---Safety_Usability_Issues_Conisderation
    end
	subgraph Design_Specificiation
		direction TB
		subgraph Performing_List
			direction TB
		end
		subgraph Design_Specification_Inclusion_List
			direction TB
		end
		subgraph Evaludations_Criteria_of_Design
			direction TB
		end
	Performing_List---Design_Specification_Inclusion_List---Evaludations_Criteria_of_Design	
	end
	subgraph Design_Activity_and_Task_List
		direction TB
		subgraph Final_Design_activity
			direction TB
		end
		subgraph Specific_Design_Tasks
			direction TB
		end
		subgraph Coding_Activity
			direction TB
			subgraph traceability_analysis
				direction TB
			end
			subgraph Coding_Tasks
				direction TB
			end
		traceability_analysis-->Coding_Tasks
		end
		Final_Design_activity---Specific_Design_Tasks---Coding_Activity
	end
	Design_Consideration_List---Design_Specificiation---Design_Activity_and_Task_List

	end
```



#### Design Consideration

```{mermaid}
%%| fig-width: 8

flowchart TB
subgraph Design_Consideration_List
    direction LR
		subgraph Requirement_Specification
			direction TB
			logical_representation---
			physical_representation
		end
    subgraph Description
			direction TB
			what_to_do---
			how_to_do					
		end
    subgraph Human_Factors_Engineering
      direction TB
			entire_design_and_development_process---
			device_design_requirements---
			analyses---
			tests
    end
    subgraph Safety_Usability_Issues_Conisderation
        direction TB
				flowcharts--- 
				state_diagrams--- 
				prototyping_tools---
				test_plans
		end
		Requirement_Specification---Description---Human_Factors_Engineering---Safety_Usability_Issues_Conisderation
    end
```


#### Design Specification

```{mermaid}
%%| fig-width: 8

flowchart TB
subgraph Design_Specificiation
		direction LR
		subgraph Conceptual_Specification
			direction TB
			requirements_specification---
			predetermined_criteria---
			Software_risk_analysis---
			Development_procedures---
			coding_guidelines
		end
		subgraph Performing_List
			direction TB
			task---
			function_analyses---
			risk_analyses---
			prototype_tests_and_reviews---
			full_usability_tests
		end
		subgraph Design_Specification_Inclusion_List
			direction TB
			SW_requirements_specification---
			predetermined_criteria_for_SW_acceptance---
			SW_risk_analysis---
			Development_procedure_list---
			coding_guidance---
			Systems_documentation---
			Hardware_to_be_used---
			Parameters_to_be_measured---
			Logical_structure---
			Control_logic---
			logical_processing_steps_aka_algorithms---
			Data_structures_diagram---
			data_flow_diagrams---
			Definitions_of_variables---
			description_of_where_they_are_used---
			Error_alarm_and_warning_messages---
			Supporting_software---
			internal_modules_Communication_links---
			supporting_sw_links---
			link_with_hardware---
			link_with_user---
			physical_Security_measures---
			logical_security_measures
		end
		subgraph Evaludations_Criteria_of_Design
			direction TB
			complete--- 
			correct---
			consistent--- 
			unambiguous--- 
			feasible---
			maintainable---
			analyses_of_control_flow---
			data_flow--- 
			complexity--- 
			timing--- 
			sizing--- 
			memory_allocation---
			module_architecture---
			traceability_analysis_of_modules--- 
			criticality_analysis
		end
	Conceptual_Specification---Performing_List---Design_Specification_Inclusion_List---Evaludations_Criteria_of_Design	
	end
```

#### Design Activity and Task

```{mermaid}
%%| fig-width: 8

flowchart TB
subgraph Design_Activity_and_Task_List
		direction LR
		subgraph Final_Design_activity
			direction TB
			Formal_Design_Review_Before_Design_Implementation---
			correct_consistent_complete_accurate_testable
		end
		subgraph Specific_Design_Tasks
			direction TB
			Updated_Software_Risk_Analysis---
			Traceability_Analysis---
			Software_Design_Evaluation---
			Design_Communication_Link_Analysis---
			Module_Test_Plan_Generation---
			Integration_Test_Plan_Generation---
			module_Test_Design_Generation---
			integration_Test_Design_Generation---
			system_Test_Design_Generation---
			acceptance_Test_Design_Generation	
		end
		subgraph Coding_Activity
			direction TB
			subgraph traceability_analysis
				direction TB
				each_element_implementation---
				each_module_implementation_to_element_and_risk_analysis---
				each_functions_implemented_to_element_and_risk_analysis---
				Tests_for_modules_to_element_and_risk_analysis--- 
				Tests_for_functions_to_element_and_risk_analysis---
				Tests_for_modules_to_source_code---
				Tests_for_functions_to_source_code
			end
			subgraph Coding_Tasks
				direction TB
				Traceability_Analyses---
				Source_Code_to_Design_Specification_and_vice_versa---
				Test_Cases_to_Source_Code_and_to_Design_Specification---
				Source_Code_and_Source_Code_Documentation_Evaluation---
				Source_Code_Interface_Analysis---
				Test_Procedure_and_Test_Case_Generation	
			end
		traceability_analysis-->Coding_Tasks
		end
		Final_Design_activity---Specific_Design_Tasks---Coding_Activity
	end

```



## Testing Task

### Overview

```{mermaid}
%%| fig-width: 8
flowchart TB
	subgraph Testing_Task
		direction LR
		subgraph Consideration_Before_Testing_Tasks
			direction TB
			subgraph Test_Plans
				direction TB
			end
			subgraph Conditions
				direction TB
			end
			subgraph Start_test_planning_as_early_as_possible
				direction TB
			end
			subgraph Testing_Tenets_Inclusion_List
				direction TB
			end
		Test_Plans---Conditions---Start_test_planning_as_early_as_possible---Testing_Tenets_Inclusion_List
		end
		subgraph Code_Based_Testing
			direction TB
			subgraph white_box_testing
				direction TB
			end
			subgraph Evaluation_of_level_of_white_box_testing
				direction TB
			end
			subgraph Coverage_Metrics_of_White_Box_Testing
				direction TB
			end
		white_box_testing---Evaluation_of_level_of_white_box_testing---Coverage_Metrics_of_White_Box_Testing
		end
		subgraph Alternatives_to_White_Box_Testing
			direction TB
			subgraph Types_of_Functional_Software_Testing_Increasing_Cost
				direction TB
			end
			subgraph Weakness_of_functional_and_white_box_testings
				direction TB
			end
			subgraph Advanced_software_testing_methods
				direction TB
			end
			subgraph Change_in_SW
				direction TB	
			end
		Types_of_Functional_Software_Testing_Increasing_Cost---Weakness_of_functional_and_white_box_testings---
		Advanced_software_testing_methods---Change_in_SW
		end
		

		subgraph Development_Testing
			direction TB
			subgraph unit_level_testing
				direction TB	
			end
			subgraph integration_level_testing
				direction TB
			end
			subgraph system_level_testing
				direction TB
			end
			subgraph Error_Detected
				direction TB		
			end
		unit_level_testing-->integration_level_testing-->system_level_testing-->Error_Detected
		end

		subgraph Testing_Tasks
			direction TB
		end
		subgraph User_Site_Testing
			direction TB
			subgraph Quality_System_Rregulation
				direction TB
			end
			subgraph Understand_Terminology
				direction TB
			end
			subgraph Testing
				direction TB
			end
			Quality_System_Rregulation---Understand_Terminology---Testing
		end
Consideration_Before_Testing_Tasks---Code_Based_Testing---Alternatives_to_White_Box_Testing
Development_Testing---Testing_Tasks---User_Site_Testing
    end
```

### Consideration Before Testing Tasks

```{mermaid}
%%| fig-width: 8

flowchart TB
	subgraph Testing_Task
		direction LR
		subgraph Consideration_Before_Testing_Tasks
			direction LR
			subgraph Test_Plans
				direction TB
				should_identify_control_measures_like_traceability_analysis---
				ensure_that_intended_coverage_is_achieved---
				ensure_that_proper_documentation_is_prepared---
				conduct_tests_not_by_SW_developers_but_in_other_sites
			end
			subgraph Conditions
				direction TB
				use_defined_inputs---
				documented_outcomes---
				gonnabe_time_consuming_activity---
				gonnabe_difficult_activity---
				gonnabe_imperfect_activity---
				testing_all_program_functionality---
				does_not_mean_100_prcnt_correction_perfection---
				make_detailed_objective_evaluation---
				requires_sophisticated_definition_specificiation---
				all_test_procedures_data_results_are_documented---
				all_test_procedures_data_results_are_suitable_for_review---
				all_test_procedures_data_results_are_suitable_for_objective_decision_making---
				all_test_procedures_data_results_are_suitable_for_subsequent_regression_testing
			end
			subgraph Start_test_planning_as_early_as_possible
				direction TB
				make_test_plans---
				make_test_cases---
				plan_schedules---
				plan_environments---
				plan_resources_of_personnel_tools---
				plan_methodologies---
				plan_inputs_procedures_outputs_expected_results---
				plan_documentation---
				plan_reporting_criteria
			end
			subgraph Testing_Tenets_Inclusion_List
				direction TB
				expected_test_outcome_is_predefined---
				good_test_case_has_high_probability_of_exposing_errors---
				successful_test_is_one_that_finds_errors---
				There_is_independence_from_coding---
				Both_application_for_user_and_SW_for_programming_expertise_are_employed---
				Testers_use_different_tools_from_coders---
				Examining_only_the_usual_case_is_insufficient---
				Test_documentation_permits_its_reuse---
				Test_documentation_permits_independent_confirmation_---
				of_pass/fail_test_outcome_during_subsequent_review
			end
		Test_Plans---Conditions---Start_test_planning_as_early_as_possible---Testing_Tenets_Inclusion_List
		end

end
```

### Code Based Testing

```{mermaid}
%%| fig-width: 8

flowchart TB
	subgraph Testing_Task
		direction LR
			subgraph Code_Based_Testing
				direction LR
				subgraph white_box_testing
					direction TB
					identify_dead_code_never_executed---
					conduct_unit_test---
					conduct_other_level_tests
				end
				subgraph Evaluation_of_level_of_white_box_testing
					direction TB
					use_coverage_metrics---
					metrics_of_completeness_of_test_selection_criteria---
					coverage_should_be_commensurate_with_level_of_SW_risk---
					coverage_means_100_prcnt_coverage
				end
				subgraph Coverage_Metrics_of_White_Box_Testing
					direction TB
					Statement_Coverage---
					Decision_or_Branch_Coverage---
					Condition_Coverage---
					Multi_Condition_Coverage
					Loop_Coverage---
					Path_Coverage---
					Data_Flow_Coverage
				end
			white_box_testing---Evaluation_of_level_of_white_box_testing---Coverage_Metrics_of_White_Box_Testing
			end
end
```

### Solution to White Box Testing

```{mermaid}
%%| fig-width: 8
 
flowchart TB
	subgraph Testing_Task
		direction LR
		subgraph Alternatives_to_White_Box_Testing
			direction LR
			subgraph Types_of_Testing_Increasing_Cost
				direction TB
					Normal_Case---
					Output_Forcing---
					Robustness---
					Combinations_of_Inputs
			end
			subgraph Weakness_of_functional_and_white_box_testings
				direction TB
				difficulty_in_linking_---
				tests_completion_criteria_to_SW_reliability
			end
			subgraph Advanced_software_testing_methods
				direction TB
				statistical_testing---
				provide_further_assurance_of_reliability---
				generate_randomly_test_data_from_defined_distributions---
				distribution_defined_by_expected_use---
				distribution_defined_by_hazardous_use---
				distribution_defined_by_malicious_use---
				large_test_data_cover_particular_areas_or_concerns---
				statistical_testing_provides_high_structural_coverage---
				statistical_testing_requires_stable_system---
				structural_and_functional_testing_are_prerequisites_for_statistical_testing
			end
			subgraph Change_in_SW
				direction TB
				conduct_regression_analysis_and_testing---
				should_demonstrate_correct_implementation---
				should_demonstrate_no_adverse_impact_on_other_modules	
			end
			subgraph Testing_Tasks
				direction TB
				Test_Planning---
				Structural_Test_Case_Identification---
				Functional_Test_Case_Identification---
				Traceability_Analysis_Testing---
				Unit_Tests_to_Detailed_Design---
				Integration_Tests_to_High_Level_Design---
				System_Tests_to_Software_Requirements---
				Unit_Test_Execution---
				Integration_Test_Execution---
				Functional_Test_Execution---
				System_Test_Execution---
				Acceptance_Test_Execution---
				Test_Results_Evaluation---
				Error_Evaluation_Resolution---
				Final_Test_Report
			end
		Types_of_Testing_Increasing_Cost---Weakness_of_functional_and_white_box_testings---
		Advanced_software_testing_methods---Change_in_SW---Testing_Tasks
		end
end
```

### Development Testing

```{mermaid}
%%| fig-width: 8

flowchart TB
	subgraph Testing_Task
		direction LR
		subgraph Development_Testing
			direction LR
			subgraph unit_level_testing
				direction TB	
				focus_on_early_examination_of_sub_program_functionality---
				ensure_functionality_invisible_at_system_level_examined---
				ensure_quality_software_units_furnished_for_integration
			end
			subgraph integration_level_testing
				direction TB
				focuses_on_transfer_of_data---
				focuses_on_control_across_program's_internal_and_external_interfaces
			end
			subgraph system_level_testing
				direction TB
				demonstrate_all_specified_functionality_exists---
				demonstrate_SW_is_trustworthy---
				verifies_as_built_program's_functionality_and_performance_on_requirements---
				addresses_functional_concerns_and_intended_uses---
				like_Performance_issues---
				like_Responses_to_stress_conditions---
				like_Operation_of_internal_and_external_security_features---
				like_Effectiveness_of_recovery_procedures---
				like_disaster_recovery---
				like_Usability---
				like_Compatibility_with_other_SW---
				like_Behavior_in_each_of_the_defined_hardware_configurations---
				like_Accuracy_of_documentation
			end
			subgraph Error_Detected
				direction TB		
				should_be_logged---
				should_be_classified---
				should_be_reviewed---
				should_be_resolved_before_SW_release
			end
		unit_level_testing-->integration_level_testing-->system_level_testing-->Error_Detected
		end
end
```

### User Site Testing

#### Overview
```{mermaid}
%%| fig-width: 8
%%| 
flowchart TB
	subgraph Testing_Task
		direction LR
		subgraph User_Site_Testing
			direction LR
			subgraph Quality_System_Rregulation
				direction TB
				installation---
				inspection_procedures---
				testing_appropriateness---
				documentation_of_inspection---
				testing_to_demonstrate_proper_installation
			end
			subgraph Understand_Terminology
				direction TB
				beta_test---
				site_validation---
				user_acceptance_test---
				installation_verification---
				installation_testing
			end
			subgraph Testing
				direction TB
				subgraph Requirements
					direction TB
					either_actual_or_simulated_use---
					verification_of_intended_functionality---
					constant_contact_FDA_center
					subgraph Follow_Predefiened_Plan
						direction TB
	
					end
					subgraph Documented_Evidence
						direction TB
		
					end
				  subgraph Evaluation_of_System_Ability
						direction TB
		
					end
				  subgraph Evaluation_of_User_Ability
						direction TB
		
					end	
					subgraph Evaluation_of_Operator_Ability
						direction TB
		
					end
				constant_contact_FDA_center-->Follow_Predefiened_Plan-->Documented_Evidence-->
			Evaluation_of_System_Ability-->Evaluation_of_User_Ability-->Evaluation_of_Operator_Ability	
				end 
						
			
			subgraph User_Site_Testing_Task
				direction TB
				Acceptance_Test_Execution2---
				Test_Results_Evaluation2---
				Error_Evaluation_Resolution2---
				Final_Test_Report2	
			end
		Requirements-->User_Site_Testing_Task
		end
		Quality_System_Rregulation-->	Understand_Terminology-->Testing-->User_Site_Testing_Task
		end
end
```


#### Testing

```{mermaid}
%%| fig-width: 8

flowchart TB
			subgraph Testing
				direction LR
				subgraph Requirements
					direction LR
					subgraph Follow_Predefiened_Plan
						direction TB
						either_actual_or_simulated_use---
						verification_of_intended_functionality---
						constant_contact_FDA_center---
						formal_summary_of_testing---
						record_of_formal_acceptance
					end
					subgraph Documented_Evidence
						direction TB
						testing_plan_of_full_range_of_operating_conditions---
						testing_plan_to_detect_any_latent_faults---
						all_testing_procedures---
						test_input_data---
						test_results---
						hardware_installation_and_configuration---
						software_installation_and_configuration---
						exercising_measure_of_all_system_components---
						versions_of_all_system_components			
					end
					subgraph Evaluation
						direction TB
					  subgraph Evaluation_of_System_Ability
							direction TB
							high_volume_of_data---
							heavy_loads_or_stresses---
							security
							subgraph fault_testing
								direction TB
								avoidance---
								detection---
								tolerance---
								recovery
							end
						security---fault_testing---
						error_message---
						implementation_of_safety_requirements
						end
					  subgraph Evaluation_of_User_Ability
							direction TB
							ability_to_understand_system---
							ability_to_interface_with_system
						end	
						subgraph Evaluation_of_Operator_Ability
							direction TB
							ability_to_perform_intended_functions---
							ability_to_respond_in_alarms---
							ability_to_respond_in_warnings---
							ability_to_respond_in_error_messages
						end

					end
			Follow_Predefiened_Plan-->Documented_Evidence-->
			Evaluation_of_System_Ability-->Evaluation_of_User_Ability-->Evaluation_of_Operator_Ability	
			end 	
			subgraph User_Site_Testing_Task
				direction TB
				Acceptance_Test_Execution2---
				Test_Results_Evaluation2---
				Error_Evaluation_Resolution2---
				Final_Test_Report2	
			end
		Requirements-->User_Site_Testing_Task
		end
	
```

## Maintenance and Software Changes

```{mermaid}
%%| fig-width: 8

flowchart LR
	subgraph Hardware_VS_Software
		direction LR
		subgraph HW_maintenance_Inclusion
			direction TB
			preventive_hardware_maintenance_actions--- 
			component_replacement---
			corrective_changes
		end
		subgraph SW_maintenance_Inclusion
			direction TB
			corrective---
			perfective---
			adaptive_maintenance---
			not_include_preventive_maintenance_actions---
			not_include_software_component_replacement
		end
	end
	subgraph Maintenance_Type
		direction TB
		Corrective_maintenance---
		Perfective_maintenance---
		Adaptive_maintenance---
		Sufficient_regression_analysis---
		Sufficient_regression_testing
	end
	subgraph Factors_of_Validation_for_SW_change
		direction TB
		type_of_change---
		development_products_affected---
		impact_of_those_products_on_operation
	end
	subgraph Factors_of_Limitting_Validation_Effort
		direction TB
		documentation_of_design_structure---
		documentation_of_interrelationships_of_modules---
		documentation_of_interrelationships_of_interfaces---
		test_documentation---
    test_cases---
		results_of_previous_verification_and_validation_testing
	end
	subgraph Maintenance_tasks
		direction TB
		Software_Validation_Plan_Revision---
		Anomaly_Evaluation---
		Problem_Identification_and_Resolution_Tracking---
		Proposed_Change_Assessment---
		Task_Iteration---
		Documentation_Updating
	end
Hardware_VS_Software-->Maintenance_Type-->Factors_of_Validation_for_SW_change-->
Factors_of_Limitting_Validation_Effort-->Maintenance_tasks

```

## Validation of Quality System Software

### Overview

```{mermaid}
%%| fig-width: 8
flowchart LR
	subgraph Use_of_Computers_and_automated_equipment
		direction TB
		medical_device_design---
		laboratory_testing_and_analysis---
		product_inspection_and_acceptance---
		production_and_process_control---
		environmental_controls---
		packaging---
		labeling---
		traceability---
		document_control---
		complaint_management---
		programmable_logic_controllers---
		digital_function_controllers---
		statistical_process_control---
		supervisory_control_and_data_acquisition---
		robotics---
		human_machine_interfaces---
		input_output_devices---
		computer_operating_systems
	end
	subgraph Factors_in_Validation
		direction TB
		subgraph Validation_Factors_of_Quality_System
			direction TB
			subgraph 21_CFR_Part_11_Requirements
				direction TB
			end
		end
		subgraph Validation_Supporting_Factors
			direction TB
		end
		subgraph Factors_of_Validation_Evidence_Level
			direction TB
		end
		subgraph Factors_of_Easing_Validation_Effort
			direction TB
			planning---
			documented_requirments---
			risk_analysis	
		end
	Validation_Factors_of_Quality_System-->Validation_Supporting_Factors-->Factors_of_Validation_Evidence_Level-->
Factors_of_Easing_Validation_Effort
	end
	subgraph Documented_User_Requirements
		direction TB
		intended_use_of_software_or_automated_equipment---
	  level_of_dependency_on_software_or_equipment
	end
	subgraph List_That_Must_Be_Defined_by_User
		direction TB
		
	end
	subgraph Documentation_List
		direction TB
		documented_protocol---
		documented_validation_results
		subgraph Documented_Test_Cases
			direction TB
		
		end
		documented_validation_results---Documented_Test_Cases
	end

	subgraph Manufaturer's_Responsbility
		direction TB
		
	end
Use_of_Computers_and_automated_equipment---Factors_in_Validation---Documented_User_Requirements---
List_That_Must_Be_Defined_by_User---Documentation_List---Manufaturer's_Responsbility
```

### Factors in Validation

```{mermaid}
%%| fig-width: 8
flowchart LR
	subgraph Factors_in_Validation
		direction LR
		subgraph Validation_Factors_of_Quality_System
			direction TB
			subgraph 21_CFR_Part_11_Requirements
				direction TB
				electronic_records_regulation---
				electronic_signatures_regulation---
				regulations_establishment---
				security---
				data_integrity---
				validation_requirements 
			end
		end
		subgraph Validation_Supporting_Factors
			direction TB
			verifications_of_outputs_from_each_stage--- 
			verifications_of_outputs_throught_SW_life_cycle---
			checking_for_proper_operation_in_intended_use_environment
		end
		subgraph Factors_of_Validation_Evidence_Level
			direction TB
			risk_posed_by_automated_operation---
			complexity_of_process_software---
			degree_of_dependence_on_automated_process
		end
		subgraph Factors_of_Easing_Validation_Effort
			direction TB
			planning---
			documented_requirments---
			risk_analysis	
		end
	Validation_Factors_of_Quality_System-->Validation_Supporting_Factors-->Factors_of_Validation_Evidence_Level-->
Factors_of_Easing_Validation_Effort
	end

```
