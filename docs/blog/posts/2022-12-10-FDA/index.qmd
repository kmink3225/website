---
title: "FDA Medical Device Licensing Approval Checklist"
subtitle: "Dcoument: General Principles of Software Validation"
description: |
  The purpose of this blog is to get a rough concept of the FDA approval process by making a summary of the 'General Principles of the 'Software Validation; Final Guidance for Industry and FDA Staff' document issued on 2002-01-11. So far, the document seems to be still valid taking into account that its guidance for the FDA approval are broad, general, and comprehensive, and that many recent FDA documents supplement it.  
categories:
  - Public Health
author: Kwangmin Kim
number-sections: True
date: 12/15/2022
draft: False
---

# Information on the Document

## Source
[FDA: General Principles of Software Validation](https://www.fda.gov/regulatory-information/search-fda-guidance-documents/general-principles-software-validation)

## Rationale
FDA has reported the following Analysis:

* 242 of 3140 (7.7%) medical device recalls between 1992 and 1998 are attributable to software failures. 
* 192 of the 242 (79.3%) failures were caused by software defects that were introduced when changes were made to the software after its initial production and distribution. 
* The software validation check is a principal means of avoiding such defects and resultant recalls.

## Main Institudions

* Center for Devices and Radiological Health (CDRH)
* U.S. Department Of Health and Human Services
* Food and Drug Administration
* Center for Biologics Evaluation and Research

# Document Summary

## Purpose
The purpose is to make a sketch of general validation principle of the validation of medical device software used to design, develop, or manufacture medical devices. 

## Scope
This document does not enumerate all the list of the elements neccesarry for the validation of software. So, the scope of this guidance is broad. The important activities for the software validation include at least planning, verfication, testing, traceability, and configuration management. This document suggests that the they should be integrated and describe software life cycle management and risk management.

It does not necessarily mean that the activities follow any specific life cycle model or any specific technique or method. Rather, the software validation and verification activities should be focused into the entire software life cycle.

### Applicability
The guidance is applicable to any software related to a regulated medical device as defined by Section 201(h) of the Federal Food, Drug, and Cosmetic Act (the Act) and by current FDA software and regulatory policy. The specific examples are like the following:

* Software used as a component, part, or accessory of a medical device;
* Software that is itself a medical device (e.g., blood establishment software);
* Software used in the production of a device (e.g., programmable logic controllers in manufacturing
equipment); and
* Software used in implementation of the device manufacturer's quality system (e.g., software that
records and maintains the device history record).

### Audience
Anyone who is employed in a bio or medical industry.

### The Least Burdensome Approach
The guidance reflects that the minimum list of the relavant scientific and legal requirements that you must comply with. 

### Regulatory Requirements for Software Validation
* Software validation is a requirement of **the Quality System regulation**, which was published in the Federal Register on October 7, 1996 and took effect on June 1, 1997. (See Title 21 Code of Federal Regulations (CFR) Part 820, and 61 Federal Register (FR) 52602, respectively.)
* Specific requirements for validation of device software are found in 21 CFR §820.30(g). Other design controls, such as planning, input, verification, and reviews, are required for medical device software. (See 21 CFR §820.30.) 
* computer systems used to create, modify, and maintain electronic records and to manage electronic signatures are also subject to the validation requirements. (See 21 CFR §11.10(a).) 

#### Objective
The objective of software validation is to ensure:

* accuracy
* reliability
* consistent intended performance, and 
* the ability to discern invalid or altered records.

#### What to validate
Any software used to automate device design, testing, component acceptance, manufacturing, labeling, packaging, distribution, complaint handling, or to automate any other aspect of the quality system, including any off-the-shelf software.

### Quality System Regulation vs Pre-market Submissions
This document **does not address** any specific requirements **but** general ones.
Specific Issues should be addressed to  

* the Office of Device Evaluation (ODE), 
* Center for Devices and Radiological Health (CDRH) 
* the Office of Blood Research and Review, 
* Center for Biologics Evaluation and Research (CBER). 
See the references in Appendix A for applicable FDA guidance documents for pre-market submissions.

## Context for Software Validation

* Validation elements that FDA expects to do for the Quality System regulation, using the principles and tasks are listed in Sections 4 and 5.
* Broad concepts provide an acceptable framework for building a comprehensive approach to software validation. 
* Additional specific information is available from many of the references listed in Appendix A

### Definition and Teminology
The medical device Quality System regulation (21 CFR 820.3(k)) defines 

* "establish" = "define, document, and implement" 
* "establish" = "established"
* Confusing terminology between the medical device Quality System regulation and the software industry: requirements, specification, verification, and validation.

#### Requirements and Specifications
The Quality System regulation states  

1. that design input requirements must be documented and
1. that specified requirements must be verified

* Requirement 
  * any need or expectation for a system or for its software. 
  * Requirements reflect the stated or implied needs of the customer, and may be market-based, contractual, or statutory, as well as an organization's internal requirements. 
  * various examples of requirements 
    * e.g., design, functional, implementation, interface, performance, or physical requirements 
  * Software requirements derived from the system requirements for those aspects of system functionality 
  * Software requirements are typically stated in functional terms and are defined, refined, and updated as a development project progresses. 
  * Success in accurately and completely documenting software requirements is a crucial factor in successful validation of the resulting software.
* Specification
  * defined as “a document that states requirements.” (See 21 CFR §820.3(y).) 
  * It may refer to or include drawings, patterns, or other relevant documents 
  * It usually indicates the means and the criteria whereby conformity with the requirement can be checked. 
  * Various examples of written specifications
    * e.g., system requirements specification, software requirements specification, software design specification, software test specification, software integration specification, etc. 
  * All of these documents are design outputs for which various forms of verification are necessary.

#### Verifiaction and Validation

The Quality System regulation is harmonized with ISO 8402:1994, which treats “verification” and
“validation” as separate and distinct terms.

* Software verification 
  * It provides objective evidence that the design outputs of a particular phase of the software development life cycle meet all of the specified requirements for that phase. 
  * It looks for 
    * consistency, 
    * completeness, and 
    * correctness of the software and its supporting documentation,
    as it is being developed, and provides support for a subsequent conclusion that software is validated. 
  * **Software testing** 
    * one of many verification activities intended to confirm that software development output meets its input requirements. 
  * Types of verification activities include
    * various static and dynamic analyses, 
    * code and document inspections, 
    * walkthroughs, and other techniques.
* Software Validation
  *  Confirmation by examination and provision of the following objective evidence:
    * Evidence 1: software specifications conform to **user needs and intended uses**, and 
    * Evidnece 2: the particular requirements implemented through software can be consistently fulfilled.
    * Evidnece 3: all software requirements have been implemented **correctly and completely and are traceable** to system requirements. 
  * A conclusion that software is validated is highly dependent upon **comprehensive** software testing, inspections, analyses, and other verification tasks performed **at each stage of the software development life cycle**. 
  * **Testing** of device software functionality in a **simulated* use environment**, and **user site testing** are typically included as components of an overall design validation program for a software automated device.
* Difficulty in Software verification and validation 
  * a developer cannot test forever, and 
  * it is hard to know how much evidence is enough. 
  * In large measure, software validation is a matter of developing a **“level of confidence”** that the device meets all requirements and user expectations for the software automated functions and features of the device. 
  * Considerations for an acceptable level of confidence
    * measures such as defects found in specifications documents, 
    * estimates of defects remaining, 
    * testing coverage, and other techniques are all used to develop  before shipping the product. 
    * However, a level of confidence varies depending upon the safety risk (hazard) posed by the automated functions of the device. (Info on safety risk is found in Section 4 and in the international standards ISO/IEC 14971-1 and IEC 60601-1-4 referenced in Appendix A).

### IQ/OQ/PQ
IQ/OQ/PQ are the terminology related to user site software validation

* Installation qualification (IQ)
* Operational qualification (OQ) 
* Performance qualification (PQ). 

Definitions of these terms may be found in FDA’s Guideline on General Principles of Process Validation, dated May 11, 1987, and in FDA’s Glossary of Computerized System and Software Development Terminology, dated August 1995.
Both FDA personnel and device manufacturers need to be aware of these differences in terminology as they ask for
and provide information regarding software validation.

### Software Development as Part of System Design
Software validation must be considered within the context of the overall design validation for the system.
A documented requirements specification represents 

  * the user's needs
  * intended uses from which the product is developed. 

A primary goal of software validation is to then demonstrate that all completed software products comply with all documented software and system requirements.

### Software Is Different from Hardware
Software engineering needs an even greater level of managerial scrutiny and control than does hardware engineering.

### Benefits of Software Validation

* Increase the usability and reliability of the device, 
* Resulting in decreased failure rates, fewer recalls and corrective actions, less risk to patients and users, and reduced liability to device manufacturers. 
* Software validation can also reduce long term costs by making it easier and less costly to reliably modify software and revalidate software changes. 

### Design Review
Design review is a primary tool for managing and evaluating development projects. 

* It is strongly recommended that it should be formal design because it is more structured than the informal one.
* It includes participation from others outside the development team. 
* It reviews may reference or include results from other formal and informal reviews. 
* Design reviews should include 
  * examination of development plans, 
  * requirements specifications, 
  * design specifications, 
  * testing plans and procedures, 
  * all other documents and activities associated with the project, 
  * verification results from each stage of the defined life cycle, and 
  * validation results for the overall device.
* The Quality System regulation requires that at least one formal design review be conducted during the device  design process. **However, it is recommended that multiple design reviews be conducted** 
  * (e.g., at the end of each software life cycle activity, in preparation for proceeding to the next activity). 
* Formal design reviews documented should include:
  * the appropriate tasks and expected results, outputs, or products been established for each software life cycle activity
  * correctness, completeness, consistency, and accuracy
  * satisfaction for the standards, practices, and conventions of that activity
  * establishment of a proper basis for initiating tasks for the next software life cycle activity

## Principles of Software Validation

### Requirements

A documented software requirements specification provides a baseline for both validation and verification. **The software validation process must include an established software requirements specification** (Ref: 21 CFR 820.3(z) and (aa) and 820.30(f) and (g)).

### Deffect Prevention

In order to establish that confidence, software developers should use a mixture of methods and techniques to prevent software errors and to detect software errors that do occur. 

### Time and Effort

Preparation for software validation should begin early, i.e., **during design and development planning and design input**. The final conclusion that the software is validated should be **based on evidence** collected from planned efforts conducted throughout the software lifecycle.

### Software Life Cycle

* Software validation takes place within the environment of an established software life cycle. 
* The software life cycle contains **software engineering tasks and documentation** necessary to support the software validation effort.
* specific verification and validation tasks need to be appropriate for the intended use of the software

### Plans

* The software validation process is defined and controlled through the use of a plan. 
* The software validation plan defines “what” is to be accomplished through the software validation effort. 
* Software validation plans specify areas such as
  * scope, 
  * approach, 
  * resources, 
  * schedules and the types and extent of activities, 
  * tasks, and 
  * work items.

### Procedures

The software validation process is executed through the use of procedures. These procedures establish
“how” to conduct the software validation effort. The procedures should identify the specific actions or
sequence of actions that must be taken to complete individual validation activities, tasks, and work
items.

### Software Validation After a Change

* Due to the complexity of software, a small local change may have a significant global system impact. 
* If a change exists in the software, the whole validation status of the software needs to be re-established. 
* need to determine the extent and impact of that change on the entire software system. 
* the software developer should then conduct an appropriate level of software regression testing to show that
unchanged but vulnerable portions of the system have not been adversely affected. 

### Validation Coverage

* Validation coverage should be based on the software’s complexity and safety risk. 
* The selection of validation activities, tasks, and work items should be commensurate with the complexity of the software design and the risk associated with the use of the software for the specified intended use. 

### Independence of Review

* Validation activities should be based on the basic quality assurance precept of “independence of review.” 
* Self-validation is extremely difficult. 
* When possible, an independent evaluation is always better (like a contracted third-party independent verification and validation)
* Another approach is to assign internal staff members that are not involved in a particular design or its implementation, but who have sufficient knowledge to evaluate the project and conduct the verification and validation activities. 

### Flexibility and Responsibility

The device manufacturer has flexibility in choosing how to apply these validation principles, but retains ultimate responsibility for demonstrating that the software has been validated.
FDA regulated medical device applications include software that:

* Is a component, part, or accessory of a medical device;
  * components: e.g., application software, operating systems, compilers, debuggers, configuration management tools, and many more
* Is itself a medical device; or
* Is used in manufacturing, design and development, or other parts of the quality system.
* No matter how complex and disperse the software is, the manufacturer is in charge of responsibility for software validation.

## Activities and Tasks

### Software Life Cycle Activities

### Typical Tasks Supporting Validation

### Quality Planning

### Requirements

### Design

### Construction or Coding

### Testing by the Software Developer

### User Site Testing

### Maintenance and Software Changes

## Validation of Automated Process Equipment and Quality System Software

### How Much Validation Evidence Is Needed?

### Defined User Equipment

### Validation of Off-The-Shelf Software and Automated Equipment


