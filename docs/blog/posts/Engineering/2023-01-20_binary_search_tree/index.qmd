---
title: Data Structure (8) Binary Search Tree
subtitle: Python List
description: |
  Data Structure for Data Science
categories:
  - Engineering
author: Kwangmin Kim
date: 01/26/2023
format: 
  html:
    page-layout: full
    code-fold: true
draft: False
---

<ul class="nav nav-pills" id="language-tab" role="tablist">
  <li class="nav-item" role="presentation">
    <button class="nav-link active" id="Korean-tab" data-bs-toggle="tab" data-bs-target="#Korean" type="button" role="tab" aria-controls="Korean" aria-selected="true">Korean</button>
  </li>
  <li class="nav-item" role="presentation">
    <button class="nav-link" id="English-tab" data-bs-toggle="tab" data-bs-target="#English" type="button" role="tab" aria-controls="knitr" aria-selected="false">English</button>
  </li>

<div class="tab-content" id="language-tabcontent">

<div class="tab-pane fade  show active" id="Korean" role="tabpanel" aria-labelledby="Korean-tab">


## 트리(Tree)

* 트리는 가계도와 같이 **계층적인 구조**를 표현할 때 사용할 수 있는 자료구조다.
* 나무(tree)의 형태를 뒤집은 것과 같이 생겼다.
* 다수의 데이터를 관리하기에 적합한 트리 자료 구조의 가장 기본적인 형태


## 트리 용어 정리

* 루트 노드(root node): 부모가 없는 최상위 노드
* 단말 노드(leaf node): 자식이 없는 노드
* 트리(tree)에서는 부모와 자식 관계가 성립한다 (직계).
* 형제 관계 (방계): 부모 node로 부터 왼쪽 자식과 오른쪽 자식과의 관계
* 깊이(depth): 루트 노드에서의 길이(length), 루트 노드로부터 손자까지의 depth=2
  * 이때, 길이란 출발 노드에서 목적지 노드까지 거쳐야 하는 간선의 수를 의미한다.
* 트리의 높이(height)은 루트 노드에서 가장 깊은 노드까지의 길이를 의미한다.


## 이진 트리(Binary Tree)

* 이진 트리는 최대 2개의 자식을 가질 수 있는 트리를 말한다.

## 이진 탐색 트리(Binary Search Tree)

* 다수의 데이터를 관리(조회, 저장, 삭제)하기 위한 가장 기본적인 자료구조 중 하나다.
* 이진 탐색 트리의 성질: 순서가 있음
  * 왼쪽 자식 노드 < 부모 노드 < 오른쪽 자식 노드
  * 루트 노드 기준 모든 왼쪽 노드들은 루트 노드보다 작음
  * 루트 노드 기준 모든 오른쪽 노드들은 루트 노드보다 큼
  * 2진 탐색을 가능하게 하는 구조


### 이진 탐색 트리(Binary Search Tree)의 성질

* 특정한 노드의 **키(key) 값**보다 그 왼쪽 자식 노드의 **키(key) 값**이 더 작다.
* 특정한 노드의 키(key) 값보다 그 오른쪽 자식 노드의 키(key) 값이 더 크다.
* 특정한 노드의 왼쪽 서브 트리, 오른쪽 서브 트리 모두 이진 탐색 트리다.
* worst case: 찾는게 없을 때 혹은 찾고자 하는 데이터가 가장 마지막에 있을 때
    * 탐색시 재귀적으로 중앙값을 기준으로 오른쪽만 찾음
    * 매 실행마다 데이터의 개수가 절반씩 줄어듬
    * 그러면, 몇 번만에 사이즈가 1이 되는가?
    * 수식 유도, input size를 N이라고 가정했을때
    * $N \times {(\frac{1}{2})}^{k}=1 \rightarrow N=2^k \rightarrow k = log_2N$
    * 위의 수식을 점근적 표기법으로 표현하면 $\Theta(logN)$
* best case: 한번에 찾았을 때
    * $\Theta(1)$
* 그러므로, lower bound = $\Theta(1)$, upper bound = $O(logN)$


### 삽입 연산

* 루트 노드에서 출발하여 아래쪽으로 내려오면서, 삽입할 위치를 찾는다.
    1. 삽입할 노드의 키(key)가 작으면 왼쪽으로, 
    2. 삽입할 노드의 키(key)가 크면 오른쪽으로 삽입
* 삽입할 노드 목록 예시: [7,4,5,9,6,2,3,2,8]으로 트리 생성해보기

![Binary Tree](Binary_tree.png)

[Sorcue: 코딩 테스트를 위한 트리(Tree) 자료구조 10분 핵심 요약 By 동빈나](https://www.youtube.com/watch?v=i5yHkP1jQmo)

### 조회 연산

* 루트 노드에서 출발하여 아래쪽으로 내려오면서, 찾고자 하는 원소를 조회한다. 삽입 연산과 같은 로직을 따름
* 1 삽입할 노드의 키(key)가 작으면 왼쪽으로, 2 삽입할 노드의 키(key)가 크면 오른쪽으로 조회
* 조회할 노드 목록 예시: 5번 노드

### 삭제 연산

* 루트 노드에서 출발하여 아래쪽으로 내려오면서, 삭제할 원소에 접근한다.
* 삭제할 노드 목록 예시: 7번 노드

Case #1 왼쪽 자식이 없는 경우 → 오른쪽 자식으로 대체
Case #2 오른쪽 자식이 없는 경우 → 왼쪽 자식으로 대체
Case #3 왼쪽, 오른쪽이 모두 있는 경우 → 오른쪽 서브

* 트리에서 가장 작은 노드로 대체
* 삭제할 노드 목록 예시: 4번 노드

![Binary Tree Deletion](binary_tree_deletion.png)

[Sorcue: 코딩 테스트를 위한 트리(Tree) 자료구조 10분 핵심 요약 By 동빈나](https://www.youtube.com/watch?v=i5yHkP1jQmo)

## 트리의 순회

* 트리에 포함되어 있는 정보를 모두 출력하고자 할 때, 어떤 방식을 사용할 수 있을까?
* 바로 순회(traversal)를 사용할 수 있다.
* 트리의 모든 노드를 특정한 순서(조건)에 따라서 방문하는 방법을 순회(traversal)라고 한다.

1. 전위 순회(pre-order traverse): 루트 방문 → 왼쪽 자식 방문 → 오른쪽 자식 방문
1. 중위 순회(in-order traverse): 왼쪽 자식 방문 → 루트 방문 → 오른쪽 자식 방문
1. 후위 순회(post-order traverse): 왼쪽 자식 방문 → 오른쪽 자식 방문 → 루트 방문

### 트리의 순회 한 눈에 보기

* 전위 순회(pre-order traverse): A → B → D → E → C → F → G
* 중위 순회(in-order traverse): D → B → E → A → F → C → G
* 후위 순회(post-order traverse): D → E → B → F → G → C → A

![Binary Tree Traverse](binary_tree_traverse.png)

[Sorcue: 코딩 테스트를 위한 트리(Tree) 자료구조 10분 핵심 요약 By 동빈나](https://www.youtube.com/watch?v=i5yHkP1jQmo)

### 전위 순회(pre-order traverse)

• 방문 방법: 현재 노드 → 왼쪽 자식 노드 → 오른쪽 자식 노드

```{python}
def _preorder(self, node):
  if node:
    print(node.key, end=' ')
    self._preorder(node.left)
    self._preorder(node.right)
```

### 중위 순회(Inorder Traversal)

* 방문 방법: 왼쪽 자식 노드 → 현재 노드 → 오른쪽 자식 노드
```{python}
def _inorder(self, node):
  if node:
    self._inorder(node.left)
    print(node.key, end=' ')
    self._inorder(node.right)
```

### 후위 순회(Postorder Traversal)

* 방문 방법: 왼쪽 자식 노드 → 오른쪽 자식 노드 → 현재 노드
```{python}
def _postorder(self, node):
  if node:
    self._postorder(node.left)
    self._postorder(node.right)
    print(node.key, end=' ')
```

### 레벨 순회(Level Order Traversal)

* 낮은 레벨(루트)부터 높은 레벨까지 순차적으로 방문한다.
* 단순히 루트 노드에서부터 너비 우선 탐색(BST)를 진행하면 된다.
* 레벨 순회 순회(level-order traverse): A → B → C → D → E → F → G

## 이진 탐색 트리의 구현

* 다른 메서드 안에서 사용되는 메서드는 이름 앞에 언더바(_) 기호를 붙인다.

```{python}
def search(self, node, key):
  return self._search(self.root, key) # search: recursively 조회

def _search(self, node, key):
  if node is None or node.key == key:
    return node

  # 현재 노드의 key보다 작은 경우
  if node.key > key:
    return self._search(node.left, key)

  # 현재 노드의 key보다 큰 경우
  elif node.key < key:
    return self._search(node.right, key)
```

### 편향 이진 트리(Skewed Binary Tree)

* 편향 이진 트리는 다음의 두 가지 속성을 가진다.
1. 같은 높이의 이진 트리 중 최소 개수의 노드 개수를 가진다.
1. 왼쪽 혹은 오른쪽으로 한 방향에 대한 서브 트리를 가진다.

### 이진 탐색 트리의 시간 복잡도 

* 노드의 개수가 N개일 때, 시간 복잡도는 다음과 같다.
* 트리의 높이(height)을 H라고 할 때, 엄밀한 시간 복잡도는 $O(H)$ 다.
* 이상적인 경우 H = log2 N로 볼 수 있다.
* 하지만 최악의 경우(편향된 경우) H = N로 볼 수 있다.

| Number | Methods                |   조회   |   삽입    |   삭제   |   수정   |
|--------|------------------------|----------|----------|----------|----------|
| 1      | 균형 잡힌 이진 탐색 트리 |$O(logN)$ |$O(logN)$ |$O(logN)$ |$O(logN)$|
| 2      | 편향 이진 탐색 트리      | $O(N)$   | $O(N)$   | $O(N)$   | $O(N)$   |

: a list of the time complexity of the binary search trees in Python {#tbl-letters}

See @tbl-letters.

### 균형 잡힌 트리: AVL 트리

* AVL stands for **A**delson-**V**elsky and **L**andis
* 이진 탐색 트리는 편향 트리가 될 수 있으므로, 최악의 경우 $O(N)$ 을 요구한다.
* 반면에 AVL 트리는 균형이 갖춰진 이진 트리다.
* 간단한 구현 과정으로 완전 이진 트리에 가까운 형태를 유지하도록 한다.

```{python}
from collections import deque


class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None


class BinarySearchTree:
    def __init__(self):
        self.root = None

    def search(self, node, key):
        return self._search(self.root, key)

    def _search(self, node, key):
        if node is None or node.key == key:
            return node

        # 현재 노드의 key보다 작은 경우
        if node.key > key:
            return self._search(node.left, key)
        # 현재 노드의 key보다 큰 경우
        elif node.key < key:
            return self._search(node.right, key)

    def insert(self, key):
        self.root = self._insert(self.root, key)

    def _insert(self, node, key):
        if node is None:
            return Node(key)

        # 현재 노드의 key보다 작은 경우
        if node.key > key:
            node.left = self._insert(node.left, key)
        # 현재 노드의 key보다 큰 경우
        elif node.key < key:
            node.right = self._insert(node.right, key)

        return node

    def delete(self, key):
        self.root = self._delete(self.root, key)

    def _delete(self, node, key):
        if node is None:
            return None

        # 현재 노드의 key보다 작은 경우
        if node.key > key:
            node.left = self._delete(node.left, key)
        # 현재 노드의 key보다 큰 경우
        elif node.key < key:
            node.right = self._delete(node.right, key)
        # 삭제할 노드를 찾은 경우
        else:
            # 왼쪽 자식이 없는 경우
            if node.left is None:
                return node.right
            # 오른쪽 자식이 없는 경우
            elif node.right is None:
                return node.left
            # 왼쪽과 오른쪽 자식 모두 있는 경우
            node.key = self._get_min(node.right)
            node.right = self._delete(node.right, node.key)

        return node

    def _get_min(self, node):
        key = node.key
        while node.left:
            key = node.left.key
            node = node.left
        return key

    def preorder(self):
        self._preorder(self.root)

    def _preorder(self, node):
        if node:
            print(node.key, end=' ')
            self._preorder(node.left)
            self._preorder(node.right)

    def inorder(self):
        self._inorder(self.root)

    def _inorder(self, node):
        if node:
            self._inorder(node.left)
            print(node.key, end=' ')
            self._inorder(node.right)

    def postorder(self):
        self._postorder(self.root)

    def _postorder(self, node):
        if node:
            self._postorder(node.left)
            self._postorder(node.right)
            print(node.key, end=' ')

    def levelorder(self):
        return self._levelorder(self.root)

    def _levelorder(self, node):
        if node is None:
            return

        result = []

        queue = deque()
        queue.append((0, node))  # (level, node)

        while queue:
            level, node = queue.popleft()
            if node:
                result.append((level, node.key))
                queue.append((level + 1, node.left))
                queue.append((level + 1, node.right))

        for level, key in result:
            print(f"level: {level}, key: {key}")

    def to_list(self):
        return self._to_list(self.root)

    def _to_list(self, node):
        if node is None:
            return []
        return self._to_list(node.left) + [node.key] + self._to_list(
            node.right)


arr = [7, 4, 5, 9, 6, 3, 2, 8]
bst = BinarySearchTree()
for x in arr:
    bst.insert(x)
print('전위 순회:', end=' ')
bst.preorder()
print('\n중위 순회:', end=' ')
bst.inorder()
print('\n후위 순회:', end=' ')
bst.postorder()
print('\n[레벨 순회]')
bst.levelorder()

bst.delete(7)
print('\n전위 순회:', end=' ')
bst.preorder()
print('\n중위 순회:', end=' ')
bst.inorder()
print('\n후위 순회:', end=' ')
bst.postorder()
print('\n[레벨 순회]')
bst.levelorder()

bst.delete(4)
print('\n전위 순회:', end=' ')
bst.preorder()
print('\n중위 순회:', end=' ')
bst.inorder()
print('\n후위 순회:', end=' ')
bst.postorder()
print('\n[레벨 순회]')
bst.levelorder()

bst.delete(3)
print('\n전위 순회:', end=' ')
bst.preorder()
print('\n중위 순회:', end=' ')
bst.inorder()
print('\n후위 순회:', end=' ')
bst.postorder()
print('\n[레벨 순회]')
bst.levelorder()

print(bst.to_list())

```
</div>

<div class="tab-pane fade" id="English" role="tabpanel" aria-labelledby="English-tab">


</div>