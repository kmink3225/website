[
  {
    "objectID": "about.html#enthusiastic-data-scientist",
    "href": "about.html#enthusiastic-data-scientist",
    "title": "Kwangmin Kim",
    "section": "Enthusiastic Data Scientist",
    "text": "Enthusiastic Data Scientist\n\nInterests\nData Modeling, Statistics, Machine Learning, Deep Learning, Optimization"
  },
  {
    "objectID": "docs/blog/index.html",
    "href": "docs/blog/index.html",
    "title": "Blog",
    "section": "",
    "text": "FDA Medical Device Licensing Approval Checklist\n\n\nDcoument: General Principles of Software Validation\n\n\n\n\nPublic Health\n\n\n\n\nThe purpose of this blog is to get a rough concept of the FDA approval process by making a summary of the ‘General Principles of the ’Software Validation; Final Guidance for Industry and FDA Staff’ document issued on 2002-01-11. So far, the document seems to be still valid taking into account that its guidance for the FDA approval are broad, general, and comprehensive, and that many recent FDA documents supplement it.\n\n\n\n\n\n\nDec 15, 2022\n\n\nKwangmin Kim\n\n\n\n\n\n\n  \n\n\n\n\nP-value\n\n\nStatistical Hypothesis Test\n\n\n\n\nStatistics\n\n\n\n\nP value is one of the most commonly used statistcal index to show confidence of a hypothesis testing result of your experiment.\n\n\n\n\n\n\nDec 8, 2022\n\n\nKwangmin Kim\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "docs/blog/posts/2022-12-08-P-value/index.html",
    "href": "docs/blog/posts/2022-12-08-P-value/index.html",
    "title": "P-value",
    "section": "",
    "text": "![](coding.png){.preview-image fig-align=“center” fig-alt=“just for testing”}"
  },
  {
    "objectID": "docs/CV/index.html",
    "href": "docs/CV/index.html",
    "title": "Curriculum Vitae",
    "section": "",
    "text": "an application for a position in industry, non-profit, and public sector\nskills, work experience, educuation\nwithin 2 pages"
  },
  {
    "objectID": "docs/CV/index.html#cv",
    "href": "docs/CV/index.html#cv",
    "title": "Curriculum Vitae",
    "section": "CV",
    "text": "CV\n\napplying for positions in academia, fellowships and grants\nacademic accomplishments\nLength depends upon experience and includes a complete list of publications, posters, and presentations\nbegins with education and can include name of advisor and dissertation title or summary (see examples). Also used for merit/tenure review and sabbatical leave"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introduction",
    "section": "",
    "text": "EnglishKorean\n\n\n\nBrief Introduction\nI am passionate and self-taught in statistics, machine learning, deep learning, and programming using open-source tools such as Python, R, and SQL. It has been 7years since I dealth with data research from data modeling to data visualization through modeling.\n\n\nExperience\nMy educational background is a Bachelor of Science in biochemistry in South Korea, Bachelor of Arts in mathematics in the USA, and Master of Sceince in biostatistics in the USA. I started my career in the medical area of analytics because I have a strong background in biology. My work experience exposed me to an environment where I had to interact with non-experts to make them understand data science.\n\n\nReason for Blogging in Data Science\n(Pursuing Goal in Data Science)\nAfter dealing with data and collaborating with SW developers and non-professional colleagues, I realized that the importance of communicating with them efficiently and effectively. This requires more knowledge in mathematics, statistics, and IT to master the art of explaining easily, clearly, and concisely. So, I started blogging to have an opportunity to have a detailed and systematic understanding of new techaniques of machine learning, as well as fundamental statistics.\n\n\n\n\nBrief Introduction\n저는 R과 Python같은 open-source tool을 사용하여 통계, machine learning 및 deep learning을 독학하는 열정 가득한 data scientist입니다. 약 7년여 동안 data modeling, 통계적 모델링, machine learning 모델링 및 시각화를 통하여 data 관련 업무 경험을 쌓았습니다.\n\n\nExperience\n저는 한국에서 학부과정으로 생화학과 미국에서 학부 과정으로 수학과 석사 과정으로 생물통계학을 전공했습니다. 저의 생화학 전공을 살려 Bio와 의료분야에서 커리어를 시작했고 그 과정에서 많은 data science 비전문가들과 협업하면서 통계 및 data science에 대하여 그들과 소통하는 법을 익혔습니다.\n\n\nReason for Blogging in Data Science\nData science에 대하여 비전문가들과 SW 개발자들과 협업을 하면서 그들과 효율적이고 효과적으로 소통하는것이 중요하다는 것을 깨달았습니다. 그 효과적인 소통이 수학, 통계 및 IT에 대한 지식으로부터 온다고 생각해서 새로운 기술에 대하여 세부적이고 체계적인 지식을 쌓기위해 블로깅을 시작했습니다."
  },
  {
    "objectID": "docs/projects/back_fitting.html",
    "href": "docs/projects/back_fitting.html",
    "title": "Back Fitting Algorithm",
    "section": "",
    "text": "flowchart LR\n\nhelper.R --> visualize.R"
  },
  {
    "objectID": "docs/projects/high_dimension.html",
    "href": "docs/projects/high_dimension.html",
    "title": "Comparative Study of Dimension Reduction Methods",
    "section": "",
    "text": "library(glmnet)\n\n필요한 패키지를 로딩중입니다: Matrix\n\n\nLoaded glmnet 4.1-6\n\nlibrary(tidyverse)\n\n── Attaching packages\n───────────────────────────────────────\ntidyverse 1.3.2 ──\n\n\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ tidyr::expand() masks Matrix::expand()\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n✖ tidyr::pack()   masks Matrix::pack()\n✖ tidyr::unpack() masks Matrix::unpack()\n\nset.seed(20221213) \n\n\nn <- 1000    # sample size\np <- 10000     # the number of predictors\nsignificant_p <- p*0.25  # the number of predictors associated with a response variable\n\nx <- matrix(rnorm(n*p), nrow=n, ncol=p)\ny <- apply(x[,1:significant_p], 1, sum) + rnorm(n)\n\n# Split data into train (2/3) and test (1/3) sets\ntrain_rows <- sample(1:n, .66*n)\nx.train <- x[train_rows, ]\nx.test <- x[-train_rows, ]\n\ny.train <- y[train_rows]\ny.test <- y[-train_rows]\n\nlist.of.fits <- list()\nfor (i in 0:10) {\n  fit.name <- paste0(\"alpha\", i/10)\n  \n  list.of.fits[[fit.name]] <-\n    cv.glmnet(x.train, y.train, type.measure=\"mse\", alpha=i/10, \n      family=\"gaussian\")\n}\n\nresults <- data.frame()\nfor (i in 0:10) {\n  fit.name <- paste0(\"alpha\", i/10)\n  \n  predicted <- \n    predict(list.of.fits[[fit.name]], \n      s=list.of.fits[[fit.name]]$lambda.1se, newx=x.test)\n  \n  mse <- mean((y.test - predicted)^2)\n  \n  temp <- data.frame(alpha=i/10, mse=mse, fit.name=fit.name)\n  results <- rbind(results, temp)\n}\n\nresults\n\n   alpha      mse fit.name\n1    0.0 2529.146   alpha0\n2    0.1 2529.146 alpha0.1\n3    0.2 2529.146 alpha0.2\n4    0.3 2529.146 alpha0.3\n5    0.4 2529.146 alpha0.4\n6    0.5 2529.146 alpha0.5\n7    0.6 2529.146 alpha0.6\n8    0.7 2529.146 alpha0.7\n9    0.8 2529.146 alpha0.8\n10   0.9 2529.146 alpha0.9\n11   1.0 2529.146   alpha1"
  },
  {
    "objectID": "docs/blog/posts/2022-12-10-QMD-formatting/qmd-formatting.html",
    "href": "docs/blog/posts/2022-12-10-QMD-formatting/qmd-formatting.html",
    "title": "FDA",
    "section": "",
    "text": "dsf"
  },
  {
    "objectID": "docs/blog/posts/2022-12-10-FDA/index.html",
    "href": "docs/blog/posts/2022-12-10-FDA/index.html",
    "title": "FDA Medical Device Licensing Approval Checklist",
    "section": "",
    "text": "FDA: General Principles of Software Validation\n\n\n\nFDA has reported the following Analysis:\n\n242 of 3140 (7.7%) medical device recalls between 1992 and 1998 are attributable to software failures.\n192 of the 242 (79.3%) failures were caused by software defects that were introduced when changes were made to the software after its initial production and distribution.\nThe software validation check is a principal means of avoiding such defects and resultant recalls.\n\n\n\n\n\nCenter for Devices and Radiological Health (CDRH)\nU.S. Department Of Health and Human Services\nFood and Drug Administration\nCenter for Biologics Evaluation and Research"
  },
  {
    "objectID": "docs/blog/posts/2022-12-10-FDA/index.html#purpose",
    "href": "docs/blog/posts/2022-12-10-FDA/index.html#purpose",
    "title": "FDA Medical Device Licensing Approval Checklist",
    "section": "2.1 Purpose",
    "text": "2.1 Purpose\nThe purpose is to make a sketch of general validation principle of the validation of medical device software used to design, develop, or manufacture medical devices."
  },
  {
    "objectID": "docs/blog/posts/2022-12-10-FDA/index.html#scope",
    "href": "docs/blog/posts/2022-12-10-FDA/index.html#scope",
    "title": "FDA Medical Device Licensing Approval Checklist",
    "section": "2.2 Scope",
    "text": "2.2 Scope\nThis document does not enumerate all the list of the elements neccesarry for the validation of software. So, the scope of this guidance is broad. The important activities for the software validation include at least planning, verfication, testing, traceability, and configuration management. This document suggests that the they should be integrated and describe software life cycle management and risk management.\nIt does not necessarily mean that the activities follow any specific life cycle model or any specific technique or method. Rather, the software validation and verification activities should be focused into the entire software life cycle.\n\n2.2.1 Applicability\nThe guidance is applicable to any software related to a regulated medical device as defined by Section 201(h) of the Federal Food, Drug, and Cosmetic Act (the Act) and by current FDA software and regulatory policy. The specific examples are like the following:\n\nSoftware used as a component, part, or accessory of a medical device;\nSoftware that is itself a medical device (e.g., blood establishment software);\nSoftware used in the production of a device (e.g., programmable logic controllers in manufacturing equipment); and\nSoftware used in implementation of the device manufacturer’s quality system (e.g., software that records and maintains the device history record).\n\n\n\n2.2.2 Audience\nAnyone who is employed in a bio or medical industry.\n\n\n2.2.3 The Least Burdensome Approach\nThe guidance reflects that the minimum list of the relavant scientific and legal requirements that you must comply with.\n\n\n2.2.4 Regulatory Requirements for Software Validation\n\nSoftware validation is a requirement of the Quality System regulation, which was published in the Federal Register on October 7, 1996 and took effect on June 1, 1997. (See Title 21 Code of Federal Regulations (CFR) Part 820, and 61 Federal Register (FR) 52602, respectively.)\nSpecific requirements for validation of device software are found in 21 CFR §820.30(g). Other design controls, such as planning, input, verification, and reviews, are required for medical device software. (See 21 CFR §820.30.)\ncomputer systems used to create, modify, and maintain electronic records and to manage electronic signatures are also subject to the validation requirements. (See 21 CFR §11.10(a).)\n\n\n2.2.4.1 Objective\nThe objective of software validation is to ensure:\n\naccuracy\nreliability\nconsistent intended performance, and\nthe ability to discern invalid or altered records.\n\n\n\n2.2.4.2 What to validate\nAny software used to automate device design, testing, component acceptance, manufacturing, labeling, packaging, distribution, complaint handling, or to automate any other aspect of the quality system, including any off-the-shelf software.\n\n\n\n2.2.5 Quality System Regulation vs Pre-market Submissions\nThis document does not address any specific requirements but general ones. Specific Issues should be addressed to\n\nthe Office of Device Evaluation (ODE),\nCenter for Devices and Radiological Health (CDRH)\nthe Office of Blood Research and Review,\nCenter for Biologics Evaluation and Research (CBER). See the references in Appendix A for applicable FDA guidance documents for pre-market submissions."
  },
  {
    "objectID": "docs/blog/posts/2022-12-10-FDA/index.html#context-for-software-validation",
    "href": "docs/blog/posts/2022-12-10-FDA/index.html#context-for-software-validation",
    "title": "FDA Medical Device Licensing Approval Checklist",
    "section": "2.3 Context for Software Validation",
    "text": "2.3 Context for Software Validation\n\nValidation elements that FDA expects to do for the Quality System regulation, using the principles and tasks are listed in Sections 4 and 5.\nBroad concepts provide an acceptable framework for building a comprehensive approach to software validation.\nAdditional specific information is available from many of the references listed in Appendix A\n\n\n2.3.1 Definition and Teminology\nThe medical device Quality System regulation (21 CFR 820.3(k)) defines\n\n“establish” = “define, document, and implement”\n“establish” = “established”\nConfusing terminology between the medical device Quality System regulation and the software industry: requirements, specification, verification, and validation.\n\n\n2.3.1.1 Requirements and Specifications\nThe Quality System regulation states\n\nthat design input requirements must be documented and\nthat specified requirements must be verified\n\n\nRequirement\n\nany need or expectation for a system or for its software.\nRequirements reflect the stated or implied needs of the customer, and may be market-based, contractual, or statutory, as well as an organization’s internal requirements.\nvarious examples of requirements\n\ne.g., design, functional, implementation, interface, performance, or physical requirements\n\nSoftware requirements derived from the system requirements for those aspects of system functionality\nSoftware requirements are typically stated in functional terms and are defined, refined, and updated as a development project progresses.\nSuccess in accurately and completely documenting software requirements is a crucial factor in successful validation of the resulting software.\n\nSpecification\n\ndefined as “a document that states requirements.” (See 21 CFR §820.3(y).)\nIt may refer to or include drawings, patterns, or other relevant documents\nIt usually indicates the means and the criteria whereby conformity with the requirement can be checked.\nVarious examples of written specifications\n\ne.g., system requirements specification, software requirements specification, software design specification, software test specification, software integration specification, etc.\n\nAll of these documents are design outputs for which various forms of verification are necessary.\n\n\n\n\n2.3.1.2 Verifiaction and Validation\nThe Quality System regulation is harmonized with ISO 8402:1994, which treats “verification” and “validation” as separate and distinct terms.\n\nSoftware verification\n\nIt provides objective evidence that the design outputs of a particular phase of the software development life cycle meet all of the specified requirements for that phase.\nIt looks for\n\nconsistency,\ncompleteness, and\ncorrectness of the software and its supporting documentation, as it is being developed, and provides support for a subsequent conclusion that software is validated.\n\nSoftware testing\n\none of many verification activities intended to confirm that software development output meets its input requirements.\n\nTypes of verification activities include\n\nvarious static and dynamic analyses,\ncode and document inspections,\nwalkthroughs, and other techniques.\n\n\nSoftware Validation\n\nConfirmation by examination and provision of the following objective evidence:\nEvidence 1: software specifications conform to user needs and intended uses, and\nEvidnece 2: the particular requirements implemented through software can be consistently fulfilled.\nEvidnece 3: all software requirements have been implemented correctly and completely and are traceable to system requirements.\nA conclusion that software is validated is highly dependent upon comprehensive software testing, inspections, analyses, and other verification tasks performed at each stage of the software development life cycle.\nTesting of device software functionality in a simulated* use environment, and user site testing are typically included as components of an overall design validation program for a software automated device.\n\nDifficulty in Software verification and validation\n\na developer cannot test forever, and\nit is hard to know how much evidence is enough.\nIn large measure, software validation is a matter of developing a “level of confidence” that the device meets all requirements and user expectations for the software automated functions and features of the device.\nConsiderations for an acceptable level of confidence\n\nmeasures such as defects found in specifications documents,\nestimates of defects remaining,\ntesting coverage, and other techniques are all used to develop before shipping the product.\nHowever, a level of confidence varies depending upon the safety risk (hazard) posed by the automated functions of the device. (Info on safety risk is found in Section 4 and in the international standards ISO/IEC 14971-1 and IEC 60601-1-4 referenced in Appendix A).\n\n\n\n\n\n\n2.3.2 IQ/OQ/PQ\nIQ/OQ/PQ are the terminology related to user site software validation\n\nInstallation qualification (IQ)\nOperational qualification (OQ)\nPerformance qualification (PQ).\n\nDefinitions of these terms may be found in FDA’s Guideline on General Principles of Process Validation, dated May 11, 1987, and in FDA’s Glossary of Computerized System and Software Development Terminology, dated August 1995. Both FDA personnel and device manufacturers need to be aware of these differences in terminology as they ask for and provide information regarding software validation.\n\n\n2.3.3 Software Development as Part of System Design\nSoftware validation must be considered within the context of the overall design validation for the system. A documented requirements specification represents\n\nthe user’s needs\nintended uses from which the product is developed.\n\nA primary goal of software validation is to then demonstrate that all completed software products comply with all documented software and system requirements.\n\n\n2.3.4 Software Is Different from Hardware\nSoftware engineering needs an even greater level of managerial scrutiny and control than does hardware engineering.\n\n\n2.3.5 Benefits of Software Validation\n\nIncrease the usability and reliability of the device,\nResulting in decreased failure rates, fewer recalls and corrective actions, less risk to patients and users, and reduced liability to device manufacturers.\nSoftware validation can also reduce long term costs by making it easier and less costly to reliably modify software and revalidate software changes.\n\n\n\n2.3.6 Design Review\nDesign review is a primary tool for managing and evaluating development projects.\n\nIt is strongly recommended that it should be formal design because it is more structured than the informal one.\nIt includes participation from others outside the development team.\nIt reviews may reference or include results from other formal and informal reviews.\nDesign reviews should include\n\nexamination of development plans,\nrequirements specifications,\ndesign specifications,\ntesting plans and procedures,\nall other documents and activities associated with the project,\nverification results from each stage of the defined life cycle, and\nvalidation results for the overall device.\n\nThe Quality System regulation requires that at least one formal design review be conducted during the device design process. However, it is recommended that multiple design reviews be conducted\n\n(e.g., at the end of each software life cycle activity, in preparation for proceeding to the next activity).\n\nFormal design reviews documented should include:\n\nthe appropriate tasks and expected results, outputs, or products been established for each software life cycle activity\ncorrectness, completeness, consistency, and accuracy\nsatisfaction for the standards, practices, and conventions of that activity\nestablishment of a proper basis for initiating tasks for the next software life cycle activity"
  },
  {
    "objectID": "docs/blog/posts/2022-12-10-FDA/index.html#principles-of-software-validation",
    "href": "docs/blog/posts/2022-12-10-FDA/index.html#principles-of-software-validation",
    "title": "FDA Medical Device Licensing Approval Checklist",
    "section": "2.4 Principles of Software Validation",
    "text": "2.4 Principles of Software Validation\n\n2.4.1 Requirements\nA documented software requirements specification provides a baseline for both validation and verification. The software validation process must include an established software requirements specification (Ref: 21 CFR 820.3(z) and (aa) and 820.30(f) and (g)).\n\n\n2.4.2 Deffect Prevention\nIn order to establish that confidence, software developers should use a mixture of methods and techniques to prevent software errors and to detect software errors that do occur.\n\n\n2.4.3 Time and Effort\nPreparation for software validation should begin early, i.e., during design and development planning and design input. The final conclusion that the software is validated should be based on evidence collected from planned efforts conducted throughout the software lifecycle.\n\n\n2.4.4 Software Life Cycle\n\nSoftware validation takes place within the environment of an established software life cycle.\nThe software life cycle contains software engineering tasks and documentation necessary to support the software validation effort.\nspecific verification and validation tasks need to be appropriate for the intended use of the software\n\n\n\n2.4.5 Plans\n\nThe software validation process is defined and controlled through the use of a plan.\nThe software validation plan defines “what” is to be accomplished through the software validation effort.\nSoftware validation plans specify areas such as\n\nscope,\napproach,\nresources,\nschedules and the types and extent of activities,\ntasks, and\nwork items.\n\n\n\n\n2.4.6 Procedures\nThe software validation process is executed through the use of procedures. These procedures establish “how” to conduct the software validation effort. The procedures should identify the specific actions or sequence of actions that must be taken to complete individual validation activities, tasks, and work items.\n\n\n2.4.7 Software Validation After a Change\n\nDue to the complexity of software, a small local change may have a significant global system impact.\nIf a change exists in the software, the whole validation status of the software needs to be re-established.\nneed to determine the extent and impact of that change on the entire software system.\nthe software developer should then conduct an appropriate level of software regression testing to show that unchanged but vulnerable portions of the system have not been adversely affected.\n\n\n\n2.4.8 Validation Coverage\n\nValidation coverage should be based on the software’s complexity and safety risk.\nThe selection of validation activities, tasks, and work items should be commensurate with the complexity of the software design and the risk associated with the use of the software for the specified intended use.\n\n\n\n2.4.9 Independence of Review\n\nValidation activities should be based on the basic quality assurance precept of “independence of review.”\nSelf-validation is extremely difficult.\nWhen possible, an independent evaluation is always better (like a contracted third-party independent verification and validation)\nAnother approach is to assign internal staff members that are not involved in a particular design or its implementation, but who have sufficient knowledge to evaluate the project and conduct the verification and validation activities.\n\n\n\n2.4.10 Flexibility and Responsibility\nThe device manufacturer has flexibility in choosing how to apply these validation principles, but retains ultimate responsibility for demonstrating that the software has been validated. FDA regulated medical device applications include software that:\n\nIs a component, part, or accessory of a medical device;\n\ncomponents: e.g., application software, operating systems, compilers, debuggers, configuration management tools, and many more\n\nIs itself a medical device; or\nIs used in manufacturing, design and development, or other parts of the quality system.\nNo matter how complex and disperse the software is, the manufacturer is in charge of responsibility for software validation."
  },
  {
    "objectID": "docs/blog/posts/2022-12-10-FDA/index.html#activities-and-tasks",
    "href": "docs/blog/posts/2022-12-10-FDA/index.html#activities-and-tasks",
    "title": "FDA Medical Device Licensing Approval Checklist",
    "section": "2.5 Activities and Tasks",
    "text": "2.5 Activities and Tasks\n\n2.5.1 Software Life Cycle Activities\n\n\n2.5.2 Typical Tasks Supporting Validation\n\n\n2.5.3 Quality Planning\n\n\n2.5.4 Requirements\n\n\n2.5.5 Design\n\n\n2.5.6 Construction or Coding\n\n\n2.5.7 Testing by the Software Developer\n\n\n2.5.8 User Site Testing\n\n\n2.5.9 Maintenance and Software Changes"
  },
  {
    "objectID": "docs/blog/posts/2022-12-10-FDA/index.html#validation-of-automated-process-equipment-and-quality-system-software",
    "href": "docs/blog/posts/2022-12-10-FDA/index.html#validation-of-automated-process-equipment-and-quality-system-software",
    "title": "FDA Medical Device Licensing Approval Checklist",
    "section": "2.6 Validation of Automated Process Equipment and Quality System Software",
    "text": "2.6 Validation of Automated Process Equipment and Quality System Software\n\n2.6.1 How Much Validation Evidence Is Needed?\n\n\n2.6.2 Defined User Equipment\n\n\n2.6.3 Validation of Off-The-Shelf Software and Automated Equipment"
  }
]